{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/locationMaster/AddEditArea.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi, addUpdateLocationApi } from '../common/Api';\nimport ReactDOM from 'react-dom';\nimport MyGoogleMap from './_utils/MyGoogleMap';\nimport { LocationType } from '../../utils/Constant';\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditArea extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      if (this.state.path.length === 0) {\n        toast.error(\"Please map geofence\");\n        return false;\n      }\n\n      const data = new URLSearchParams();\n      data.append(\"location_type\", LocationType.AREA);\n      data.append(\"parent_id\", this.state.cityId);\n      data.append(\"name\", this.state.areaName);\n      data.append(\"code\", this.state.code);\n      data.append(\"is_operational\", true);\n      data.append(\"geo_fencing\", JSON.stringify(this.state.path));\n\n      if (this.state.areaId) {\n        data.append(\"location_id\", this.state.areaId);\n      }\n\n      addUpdateLocationApi(data, () => this.props.history.goBack());\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.handlePath = path => {\n      console.log('path', path);\n      let dummy = [];\n      path.map(item => {\n        return dummy.push([item.lat, item.lng]);\n      });\n      this.setState({\n        path: dummy\n      });\n    };\n\n    const _data = props.location.state ? props.location.state.editData : null;\n\n    this.state = {\n      areaId: _data ? _data.id : \"\",\n      polygon: _data ? _data : false,\n      areaName: _data ? _data.name : \"\",\n      code: _data ? _data.code : \"\",\n      cityId: _data ? _data.parent_id : \"\",\n      path: _data ? _data.geo_fencing.coordinates[0] : [],\n      cityList: [],\n      stateId: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.CITY);\n  }\n\n  render() {\n    const {\n      cityList\n    } = this.state;\n    let newCityList = cityList.filter(row => row.is_operational === true);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.areaId ? \"Edit Area\" : \"Add Area\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onSubmit,\n            ref: el => this.form = el,\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"areaName\"),\n                  label: \"Area Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Area name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter area name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"code\"),\n                  label: \"Code\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Area code cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter area code\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"cityId\"),\n                  label: \"Select City\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"City cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select City\",\n                      options: newCityList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        let cityName = newCityList.filter(item => item.id === this.state.cityId);\n                        this.setState({\n                          cityName\n                        });\n                        onBlur(this.state.cityId);\n                        console.log('Hello world!');\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"red-hat-display-medium f-s-14 grey-AAA\",\n                  children: \" Draw Polygon \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MyGoogleMap, {\n                  polygon: this.state.polygon,\n                  setPath: path => this.handlePath(path)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {\n  getAllLocationApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditArea);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/locationMaster/AddEditArea.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomTextControl","Form","FormElement","FormValidator","SelectControl","ComponentHeader","getAllLocationApi","addUpdateLocationApi","ReactDOM","MyGoogleMap","LocationType","toast","AddEditArea","constructor","props","onSubmit","state","path","length","error","data","URLSearchParams","append","AREA","cityId","areaName","code","JSON","stringify","areaId","history","goBack","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","handlePath","console","log","dummy","map","item","push","lat","lng","setState","location","editData","id","polygon","name","parent_id","geo_fencing","coordinates","cityList","stateId","componentDidMount","CITY","render","newCityList","filter","row","is_operational","el","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","cityName","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi, addUpdateLocationApi } from '../common/Api';\nimport ReactDOM from 'react-dom';\nimport MyGoogleMap from './_utils/MyGoogleMap';\nimport { LocationType } from '../../utils/Constant';\nimport { toast } from \"react-toastify\";\n\nclass AddEditArea extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const data = props.location.state ? props.location.state.editData : null;\n    this.state = {\n      areaId: data ? data.id : \"\",\n      polygon: data ? data : false,\n      areaName: data ? data.name : \"\",\n      code: data ? data.code : \"\",\n      cityId: data ? data.parent_id : \"\",\n      path: data ? data.geo_fencing.coordinates[0] :[],\n      cityList: [],\n      stateId: \"\",\n    }\n  }\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.CITY);\n  }\n\n  onSubmit = () => {\n    if (this.state.path.length === 0) {\n      toast.error(\"Please map geofence\")\n      return false\n    }\n    const data = new URLSearchParams();\n    data.append(\"location_type\", LocationType.AREA);\n    data.append(\"parent_id\", this.state.cityId);\n    data.append(\"name\", this.state.areaName);\n    data.append(\"code\", this.state.code);\n    data.append(\"is_operational\", true);\n    data.append(\"geo_fencing\", JSON.stringify(this.state.path));\n    if (this.state.areaId) {\n      data.append(\"location_id\", this.state.areaId);\n    }\n    addUpdateLocationApi(data, () => this.props.history.goBack());\n  }\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  handlePath = (path) => {\n    console.log('path',path);\n    let dummy = [];\n    path.map((item) => {\n      return (dummy.push([item.lat, item.lng]))\n    })\n    this.setState({\n      path: dummy\n    })\n  }\n\n  render() {\n    const { cityList } = this.state;\n    let newCityList = cityList.filter(row => row.is_operational === true);\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.areaId ? \"Edit Area\" : \"Add Area\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save Area\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onSubmit} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"areaName\")}\n                    label=\"Area Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Area name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter area name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"code\")}\n                    label=\"Code\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Area code cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter area code\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"cityId\")}\n                    label=\"Select City\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"City cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select City\",\n                        options: newCityList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          let cityName = newCityList.filter((item) => item.id === this.state.cityId);\n                          this.setState({\n                            cityName\n                          })\n                          onBlur(this.state.cityId);\n                          console.log('Hello world!');\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col sm={12}>\n                  <h4 className='red-hat-display-medium f-s-14 grey-AAA'> Draw Polygon </h4>\n                  <MyGoogleMap polygon={this.state.polygon} setPath={(path) => this.handlePath(path)} />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n\n});\nconst mapDispatchToProps = {\n  getAllLocationApi,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditArea);"]},"metadata":{},"sourceType":"module"}