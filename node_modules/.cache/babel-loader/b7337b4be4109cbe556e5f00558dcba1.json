{"ast":null,"code":"/* eslint-disable */\n// TO DISABLE ESLINT FOR THIS FILE.\nimport _ from \"lodash\";\nexport default class FormValidator {}\n\nFormValidator.isRequired = value => {\n  if (_.isArray(value)) {\n    return value.length !== 0;\n  }\n\n  if (_.isString(value)) {\n    return value.trim().length !== 0;\n  }\n\n  if (_.isNull(value) || _.isUndefined(value)) {\n    return false;\n  }\n\n  return true;\n};\n\nFormValidator.isEqual = referenceValue => value => referenceValue === value;\n\nFormValidator.matchRegex = regex => value => regex.test(value);\n\nFormValidator.hasMinLength = min => value => _.isArray(value) || _.isString(value) ? value.length >= min : false;\n\nFormValidator.hasMaxLength = max => value => _.isArray(value) || _.isString(value) ? value.length <= max : false;\n\nFormValidator.isWithinLength = (min, max) => value => _.isArray(value) || _.isString(value) ? value.length >= min && value.length <= max : false;\n\nFormValidator.contains = seed => value => _.isArray(value) || _.isString(value) ? value.indexOf(seed) !== -1 : false;\n\nFormValidator.isString = value => _.isString(value);\n\nFormValidator.isEmail = value => FormValidator.matchRegex(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i)(value);\n\nFormValidator.isSceneNumber = value => FormValidator.matchRegex(/^[0-9]+[a-zA-Z]*$/)(value);\n\nFormValidator.isEmailOptional = value => {\n  if (value !== null && value.length > 1) {\n    let isEmail;\n    isEmail = FormValidator.matchRegex(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i)(value);\n    return isEmail;\n  } else {\n    return true;\n  }\n};\n\nFormValidator.isLetter = value => FormValidator.matchRegex(/^[a-zA-Z]*$/i)(value);\n\nFormValidator.isLetterAndSpecial = value => FormValidator.matchRegex(/^[a-zA-Z!@#$%&*()\\-_=+\\^\\s]*$/)(value);\n\nFormValidator.isInt = value => _.isInteger(parseInt(value, 10));\n\nFormValidator.isNum = value => FormValidator.matchRegex(/^\\d+$/)(value);\n\nFormValidator.isPositiveInt = value => {\n  if (value) {\n    FormValidator.isInt(value) && value > 0;\n  } else {\n    return true;\n  }\n};\n\nFormValidator.isWithinInt = (min, max) => value => FormValidator.isInt(value) && value >= min && value <= max;\n\nFormValidator.isNumeric = (precision, scale) => value => {\n  const highestNumber = 10 ** (precision - scale) - 10 ** -scale;\n  return value >= -highestNumber && value <= highestNumber;\n};\n\nFormValidator.isDecimalTwo = value => FormValidator.matchRegex(/^[0-9]+([.][0-9]{0,2})?$/)(value);\n\nFormValidator.isPostiveNumeric = (precision, scale) => value => FormValidator.isNumeric(precision, scale)(value) && value > 0;\n\nFormValidator.isWithinNumeric = (precision, scale, min, max) => value => FormValidator.isNumeric(precision, scale)(value) && value >= min && value <= max;\n\nFormValidator.isLowercase = value => FormValidator.matchRegex(/^[a-z]*$/)(value);\n\nFormValidator.isUppercase = value => FormValidator.matchRegex(/^[A-Z]*$/)(value);\n\nFormValidator.isPassword = function () {\n  let requireSmallLetter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let requireCapitalLetter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let requireNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let requireSpecialCharacter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return value => {\n    let passwordValidity = true;\n\n    if (requireSmallLetter && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[a-z]+/)(value);\n    }\n\n    if (requireCapitalLetter && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[A-Z]+/)(value);\n    }\n\n    if (requireNumber && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[0-9]+/)(value);\n    }\n\n    if (requireSpecialCharacter && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[!@#$%^&*_]+/)(value);\n    }\n\n    return passwordValidity;\n  };\n};\n\nFormValidator.isPhone = value => FormValidator.matchRegex(/^\\+?([0-9-]){10,10}$/)(value);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/utils/form/FormValidator.js"],"names":["_","FormValidator","isRequired","value","isArray","length","isString","trim","isNull","isUndefined","isEqual","referenceValue","matchRegex","regex","test","hasMinLength","min","hasMaxLength","max","isWithinLength","contains","seed","indexOf","isEmail","isSceneNumber","isEmailOptional","isLetter","isLetterAndSpecial","isInt","isInteger","parseInt","isNum","isPositiveInt","isWithinInt","isNumeric","precision","scale","highestNumber","isDecimalTwo","isPostiveNumeric","isWithinNumeric","isLowercase","isUppercase","isPassword","requireSmallLetter","requireCapitalLetter","requireNumber","requireSpecialCharacter","passwordValidity","isPhone"],"mappings":"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","sourcesContent":["/* eslint-disable */        // TO DISABLE ESLINT FOR THIS FILE.\nimport _ from \"lodash\";\n\nexport default class FormValidator {\n  static isRequired = value => {\n    if (_.isArray(value)) {\n      return value.length !== 0;\n    }\n\n    if (_.isString(value)) {\n      return value.trim().length !== 0;\n    }\n\n    if (_.isNull(value) || _.isUndefined(value)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  static isEqual = referenceValue => value => referenceValue === value;\n\n  static matchRegex = regex => value => regex.test(value);\n\n  static hasMinLength = min => value =>\n    _.isArray(value) || _.isString(value) ? value.length >= min : false;\n\n  static hasMaxLength = max => value =>\n    _.isArray(value) || _.isString(value) ? value.length <= max : false;\n\n  static isWithinLength = (min, max) => value =>\n    _.isArray(value) || _.isString(value)\n      ? value.length >= min && value.length <= max\n      : false;\n\n  static contains = seed => value =>\n    _.isArray(value) || _.isString(value) ? value.indexOf(seed) !== -1 : false;\n\n  static isString = value => _.isString(value);\n\n  static isEmail = value =>\n    FormValidator.matchRegex(\n      /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\n    )(value);\n\n  // for numbers followed by letters. eg: 2234ADdsdsAD\n  static isSceneNumber = value =>\n    FormValidator.matchRegex(/^[0-9]+[a-zA-Z]*$/)(value);\n\n  static isEmailOptional = value => {\n    if (value !== null && value.length > 1) {\n      let isEmail;\n      isEmail = FormValidator.matchRegex(\n        /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i)(value);\n      return isEmail\n    }\n    else {\n      return true;\n    }\n  }\n\n  static isLetter = value =>\n    FormValidator.matchRegex(\n      /^[a-zA-Z]*$/i\n    )(value);\n\n  static isLetterAndSpecial = value =>\n    FormValidator.matchRegex(/^[a-zA-Z!@#$%&*()\\-_=+\\^\\s]*$/)(value);\n\n  static isInt = value => _.isInteger(parseInt(value, 10));\n\n  static isNum = value => FormValidator.matchRegex(/^\\d+$/)(value)\n\n  static isPositiveInt = value => {\n    if (value) {\n      FormValidator.isInt(value) && value > 0;\n    } else {\n      return true;\n    }\n  }\n\n  static isWithinInt = (min, max) => value =>\n    FormValidator.isInt(value) && value >= min && value <= max;\n\n  static isNumeric = (precision, scale) => value => {\n    const highestNumber = 10 ** (precision - scale) - 10 ** -scale;\n    return value >= -highestNumber && value <= highestNumber;\n  };\n\n  static isDecimalTwo = value =>\n    FormValidator.matchRegex(/^[0-9]+([.][0-9]{0,2})?$/)(value)\n\n\n  static isPostiveNumeric = (precision, scale) => value =>\n    FormValidator.isNumeric(precision, scale)(value) && value > 0;\n\n  static isWithinNumeric = (precision, scale, min, max) => value =>\n    FormValidator.isNumeric(precision, scale)(value) &&\n    value >= min &&\n    value <= max;\n\n  static isLowercase = value => FormValidator.matchRegex(/^[a-z]*$/)(value);\n\n  static isUppercase = value => FormValidator.matchRegex(/^[A-Z]*$/)(value);\n\n  static isPassword = (\n    requireSmallLetter = true,\n    requireCapitalLetter = true,\n    requireNumber = true,\n    requireSpecialCharacter = true\n  ) => value => {\n    let passwordValidity = true;\n    if (requireSmallLetter && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[a-z]+/)(value);\n    }\n    if (requireCapitalLetter && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[A-Z]+/)(value);\n    }\n    if (requireNumber && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[0-9]+/)(value);\n    }\n    if (requireSpecialCharacter && passwordValidity) {\n      passwordValidity = FormValidator.matchRegex(/[!@#$%^&*_]+/)(value);\n    }\n    return passwordValidity;\n  };\n\n  static isPhone = value =>\n    FormValidator.matchRegex(/^\\+?([0-9-]){10,10}$/)(value);\n}"]},"metadata":{},"sourceType":"module"}