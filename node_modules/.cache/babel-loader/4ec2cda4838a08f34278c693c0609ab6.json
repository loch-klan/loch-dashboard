{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/utils/form/Sandbox.js\";\nimport PropTypes from \"prop-types\";\nimport React, { Fragment } from \"react\";\nimport { Col, Container, Row } from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport BaseReactComponent from \"./BaseReactComponent\";\nimport CustomButton from \"./CustomButton\";\nimport CustomTextControl from \"./CustomTextControl\";\nimport Form from \"./Form\";\nimport FormElement from \"./FormElement\";\nimport FormValidator from \"./FormValidator\";\nimport RangeInput from \"./RangeInput\";\nimport SelectControl from \"./SelectControl\";\nimport CustomRadio from \"./CustomRadio\";\nimport FileUploadControl from './FileUploadControl';\nimport CustomCheckbox from \"./CustomCheckbox\";\nimport CustomTable from \"../commonComponent/CustomTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Sandbox extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.setValue = value => {\n      this.setState({\n        value\n      });\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\"));\n    };\n\n    this.onValidSubmit = (done, event) => {\n      // console.log('hey', event);\n      console.log(\"Value submitted\" + this.state.value);\n      console.log(\"Form Submitted\" + this.state.name);\n    };\n\n    this.handlePageSize = pageSize => {\n      console.log('Heyyy pageSize', pageSize);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      value: \"\",\n      validated: false,\n      name: \"\",\n      address: \"\",\n      lastName: \"\",\n      gender: \"\",\n      searchableSingleRegion: '',\n      searchableMultipleRegion: \"\",\n      regionOptions: [{\n        value: 1,\n        label: \"Goa\"\n      }, {\n        value: 2,\n        label: \"Maha\"\n      }, {\n        value: 3,\n        label: \"Delhi\"\n      }, {\n        value: 4,\n        label: \"Goa highway\"\n      }],\n      attachment: {\n        name: \"filename.jpg\",\n        url: \"https://image.shutterstock.com/image-photo/mountains-during-sunset-beautiful-natural-260nw-407021107.jpg\"\n      },\n      attachments: [],\n      checkboxList: [{\n        key: true,\n        label: \"On Premise Venue\" // isDefault: false,\n        // isChecked: true,\n\n      }, {\n        key: false,\n        label: \"Retail Venue\" // isDefault: false,\n        // isChecked: false,\n\n      }],\n      dummyData: [{\n        firstName: \"Nirav\",\n        lastName: \"Panchal\"\n      }, {\n        firstName: \"Mahesh\",\n        lastName: \"Kadam\"\n      }, {\n        firstName: \"Dharmik\",\n        lastName: \"Joshi\"\n      }, {\n        firstName: \"Uday\",\n        lastName: \"Naidu\"\n      }],\n      currentPage: 1,\n      page: page ? parseInt(page, 10) : 1\n    };\n  }\n\n  /* onSubmit = (event) => {\n    // console.log('hey', event);\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.setState({ validated: true });\n  } */\n  componentDidMount() {\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('Hey');\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n\n    if (prevPage !== page) {\n      this.setState({\n        page\n      });\n    }\n  }\n\n  render() {\n    const regionOptions = [...this.state.regionOptions];\n    const {\n      dummyData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onValidSubmit: this.onValidSubmit,\n        ref: el => this.form = el,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"show-grid\",\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"name\"),\n                label: \"First Name\",\n                required: true // helpText=\"This is helptext\"\n                // toolTipText=\"This is tooltip\"\n                ,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: CustomTextControl,\n                  settings: {\n                    placeholder: \"Enter First Name\",\n                    prefix: \"Mr/Ms\",\n                    suffix: \"is here!\"\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"address\"),\n                label: \"Address\",\n                required: true // helpText=\"This is helptext\"\n                // toolTipText=\"This is tooltip\"\n                ,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: CustomTextControl,\n                  settings: {\n                    placeholder: \"Please enter address\",\n                    as: \"textarea\",\n                    // multiline: true,\n                    rows: 5 // isValid: this.state.address ? true : false,\n                    // isInvalid: this.state.address ? false : true,\n                    // classes: \"custom-text\"\n                    // readOnly: true,\n                    // disabled: true,\n\n                  }\n                },\n                classes: {\n                  inputField: \"custom-input\",\n                  label: \"custom-label\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"lastName\"),\n                label: \"Last Name\",\n                required: true,\n                helpText: \"This is helptext\" // toolTipText=\"This is tooltip\"\n                ,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: CustomTextControl,\n                  settings: {\n                    placeholder: \"Enter Last Name\" // prefix: \"Mr/Ms\",\n                    // suffix: \"is here!\"\n\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"rating\"),\n                label: \"Rating\",\n                required: true // helpText=\"This is helptext\"\n                // toolTipText=\"This is tooltip\"\n                ,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: RangeInput,\n                  settings: {\n                    minValue: 0,\n                    maxValue: 100,\n                    rangeId: \"ratingRange\",\n                    rangeName: \"ratingRange\"\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"searchableSingleRegion\"),\n                label: \"Market\",\n                required: true,\n                helpText: \"\",\n                hint: {\n                  title: \"Title Custom\",\n                  description: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \" Custom Hint Bro! \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 34\n                  }, this)\n                },\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: SelectControl,\n                  settings: {\n                    options: regionOptions,\n                    multiple: false,\n                    searchable: true,\n                    onChangeCallback: onBlur => {\n                      onBlur(this.state.searchableSingleRegion);\n                      console.log('Hello world!');\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"searchableMultipleRegion\"),\n                label: \"Multiple Market\",\n                required: true,\n                helpText: \"\",\n                hint: {\n                  title: \"Title Custom\",\n                  description: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \" Custom Hint Bro! \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 34\n                  }, this)\n                },\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: SelectControl,\n                  settings: {\n                    options: regionOptions,\n                    multiple: true,\n                    searchable: true,\n                    closeMenuOnSelect: false,\n                    // menuIsOpen: true,\n                    onChangeCallback: onBlur => {\n                      onBlur(this.state.searchableMultipleRegion);\n                      console.log('Hello world!');\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"gender\"),\n                label: \"Gender Type\",\n                required: true // helpText=\"This is helptext\"\n                // toolTipText=\"This is tooltip\"\n                ,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: CustomRadio,\n                  settings: {\n                    radioId: \"gender\",\n                    radioName: \"gender\",\n                    options: [{\n                      key: \"1\",\n                      label: \"On Premise Venue\"\n                    }, {\n                      key: \"2\",\n                      label: \"Retail Venue\"\n                    }],\n                    isInline: true\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"checkboxList\"),\n                label: \"Hobby\",\n                required: true // helpText=\"This is helptext\"\n                // toolTipText=\"This is tooltip\"\n                ,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }],\n                control: {\n                  type: CustomCheckbox,\n                  settings: {\n                    radioId: \"hobby\",\n                    radioName: \"hobby\",\n                    options: this.state.checkboxList // isInline: true,\n\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"attachment\"),\n                label: \"Upload Image\",\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"File is required\"\n                }],\n                control: {\n                  type: FileUploadControl,\n                  settings: {\n                    moduleName: \"account\",\n                    subModule: \"project\",\n                    fileType: \"IMAGE\",\n                    extensions: [\"image/*\"],\n                    maxFiles: 1,\n                    maxFileSize: 100000000,\n                    onSelect: (file, callback) => {\n                      // You will need to generate signedURL by calling API and then call callback\n                      const fileInfo = {\n                        id: file.lastModified,\n                        name: file.name,\n                        size: file.size,\n                        mimeType: file.type,\n                        path: \"single.jpg\"\n                      };\n                      callback(fileInfo, \"http://35.154.155.206/api\");\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"attachments\"),\n                label: \"Upload Image Multiple\",\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"File is required\"\n                }],\n                control: {\n                  type: FileUploadControl,\n                  settings: {\n                    moduleName: \"account\",\n                    subModule: \"project\",\n                    fileType: \"IMAGE\",\n                    extensions: [\".png,.jpg\"],\n                    maxFiles: 2,\n                    maxFileSize: 100000000,\n                    onSelect: (file, callback) => {\n                      // You will need to generate signedURL by calling API and then call callback\n                      const fileInfo = {\n                        id: file.lastModified,\n                        name: file.name,\n                        size: file.size,\n                        mimeType: file.type,\n                        path: \"multi\" + (this.state.attachments.length + 1) + \".jpg\"\n                      };\n                      callback(fileInfo, \"http://35.154.155.206/api\");\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 12,\n              children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n                type: \"submit\",\n                handleClick: () => {\n                  this.setValue(\"now\");\n                },\n                variant: \"success\",\n                buttonText: \"Now\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n                handleClick: () => {\n                  this.setValue(\"later\");\n                },\n                buttonText: \"Later\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: /*#__PURE__*/_jsxDEV(CustomTable, {\n              tableData: dummyData,\n              columnList: [{\n                coumnWidth: 250,\n                labelName: \"First Name\",\n                dataKey: \"firstName\",\n                className: \"first-name\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"firstName\") {\n                    return rowData.firstName;\n                  }\n                }\n              }, {\n                coumnWidth: 250,\n                labelName: \"Last Name\",\n                dataKey: \"lastName\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"lastName\") {\n                    return rowData.lastName;\n                  }\n                }\n              }],\n              message: \"No data found\" // For Pagination\n              ,\n              history: this.props.history,\n              location: this.props.location,\n              totalPages: 2,\n              currentPage: this.state.page,\n              pageSize: true,\n              pageSizeOptions: [{\n                value: 10,\n                label: \"10\"\n              }, {\n                value: 20,\n                label: \"20\"\n              }, {\n                value: 30,\n                label: \"30\"\n              }, {\n                value: 40,\n                label: \"40\"\n              }],\n              handlePageSize: this.handlePageSize\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSandbox.propTypes = {\n  classes: PropTypes.object\n};\nexport default Sandbox;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/utils/form/Sandbox.js"],"names":["PropTypes","React","Fragment","Col","Container","Row","ReactDOM","BaseReactComponent","CustomButton","CustomTextControl","Form","FormElement","FormValidator","RangeInput","SelectControl","CustomRadio","FileUploadControl","CustomCheckbox","CustomTable","Sandbox","constructor","props","setValue","value","setState","findDOMNode","form","dispatchEvent","Event","onValidSubmit","done","event","console","log","state","name","handlePageSize","pageSize","search","location","params","URLSearchParams","page","get","validated","address","lastName","gender","searchableSingleRegion","searchableMultipleRegion","regionOptions","label","attachment","url","attachments","checkboxList","key","dummyData","firstName","currentPage","parseInt","componentDidMount","history","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","el","linkState","validate","isRequired","message","type","settings","placeholder","prefix","suffix","as","rows","inputField","minValue","maxValue","rangeId","rangeName","title","description","options","multiple","searchable","onChangeCallback","onBlur","closeMenuOnSelect","radioId","radioName","isInline","moduleName","subModule","fileType","extensions","maxFiles","maxFileSize","onSelect","file","callback","fileInfo","id","lastModified","size","mimeType","path","length","coumnWidth","labelName","dataKey","className","isCell","cell","rowData","propTypes","classes","object"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Fragment } from \"react\";\nimport { Col, Container, Row } from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport BaseReactComponent from \"./BaseReactComponent\";\nimport CustomButton from \"./CustomButton\";\nimport CustomTextControl from \"./CustomTextControl\";\nimport Form from \"./Form\";\nimport FormElement from \"./FormElement\";\nimport FormValidator from \"./FormValidator\";\nimport RangeInput from \"./RangeInput\";\nimport SelectControl from \"./SelectControl\";\nimport CustomRadio from \"./CustomRadio\";\nimport FileUploadControl from './FileUploadControl';\nimport CustomCheckbox from \"./CustomCheckbox\";\nimport CustomTable from \"../commonComponent/CustomTable\";\n\n\nclass Sandbox extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      value: \"\",\n      validated: false,\n      name: \"\",\n      address: \"\",\n      lastName: \"\",\n      gender: \"\",\n      searchableSingleRegion: '',\n      searchableMultipleRegion: \"\",\n      regionOptions: [\n        { value: 1, label: \"Goa\" },\n        { value: 2, label: \"Maha\" },\n        { value: 3, label: \"Delhi\" },\n        { value: 4, label: \"Goa highway\" }\n      ],\n      attachment: {\n        name: \"filename.jpg\",\n        url: \"https://image.shutterstock.com/image-photo/mountains-during-sunset-beautiful-natural-260nw-407021107.jpg\"\n      },\n      attachments: [],\n      checkboxList: [\n        {\n          key: true,\n          label: \"On Premise Venue\",\n          // isDefault: false,\n          // isChecked: true,\n        },\n        {\n          key: false,\n          label: \"Retail Venue\",\n          // isDefault: false,\n          // isChecked: false,\n        }\n      ],\n      dummyData: [\n        {\n          firstName: \"Nirav\",\n          lastName: \"Panchal\",\n        },\n        {\n          firstName: \"Mahesh\",\n          lastName: \"Kadam\",\n        },\n        {\n          firstName: \"Dharmik\",\n          lastName: \"Joshi\",\n        },\n        {\n          firstName: \"Uday\",\n          lastName: \"Naidu\",\n        },\n      ],\n      currentPage: 1,\n      page: page ? parseInt(page, 10) : 1,\n    };\n  }\n\n  setValue = (value) => {\n    this.setState({ value });\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\"));\n  };\n\n  onValidSubmit = (done, event) => {\n    // console.log('hey', event);\n    console.log(\"Value submitted\" + this.state.value);\n    console.log(\"Form Submitted\" + this.state.name);\n  };\n\n  handlePageSize = (pageSize) => {\n    console.log('Heyyy pageSize', pageSize);\n  }\n\n  /* onSubmit = (event) => {\n    // console.log('hey', event);\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.setState({ validated: true });\n  } */\n\n  componentDidMount() {\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('Hey');\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n\n    if (prevPage !== page) {\n      this.setState({ page })\n    }\n  }\n\n  render() {\n    const regionOptions = [...this.state.regionOptions];\n    const { dummyData } = this.state;\n    return (\n      <Fragment>\n        <Form onValidSubmit={this.onValidSubmit} ref={el => this.form = el}>\n          <Container>\n            <Row className=\"show-grid\">\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"name\")}\n                  label=\"First Name\"\n                  required\n                  // helpText=\"This is helptext\"\n                  // toolTipText=\"This is tooltip\"\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n\n                  control={{\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter First Name\",\n                      prefix: \"Mr/Ms\",\n                      suffix: \"is here!\"\n                    }\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"address\")}\n                  label=\"Address\"\n                  required\n                  // helpText=\"This is helptext\"\n                  // toolTipText=\"This is tooltip\"\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n                  control={{\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Please enter address\",\n                      as: \"textarea\",\n                      // multiline: true,\n                      rows: 5,\n                      // isValid: this.state.address ? true : false,\n                      // isInvalid: this.state.address ? false : true,\n                      // classes: \"custom-text\"\n                      // readOnly: true,\n                      // disabled: true,\n                    }\n                  }}\n                  classes={{\n                    inputField: \"custom-input\",\n                    label: \"custom-label\"\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"lastName\")}\n                  label=\"Last Name\"\n                  required\n                  helpText=\"This is helptext\"\n                  // toolTipText=\"This is tooltip\"\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n\n                  control={{\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Last Name\",\n                      // prefix: \"Mr/Ms\",\n                      // suffix: \"is here!\"\n                    }\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"rating\")}\n                  label=\"Rating\"\n                  required\n                  // helpText=\"This is helptext\"\n                  // toolTipText=\"This is tooltip\"\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n\n                  control={{\n                    type: RangeInput,\n                    settings: {\n                      minValue: 0,\n                      maxValue: 100,\n                      rangeId: \"ratingRange\",\n                      rangeName: \"ratingRange\",\n                    }\n                  }}\n                />\n              </Col>\n              <Col sm={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"searchableSingleRegion\")}\n                  label=\"Market\"\n                  required\n                  helpText=\"\"\n                  hint={{\n                    title: \"Title Custom\",\n                    description: <span> Custom Hint Bro! </span>\n                  }}\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n                  control={{\n                    type: SelectControl,\n                    settings: {\n                      options: regionOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: (onBlur) => {\n                        onBlur(this.state.searchableSingleRegion);\n                        console.log('Hello world!');\n                      }\n                    }\n                  }}\n                />\n              </Col>\n              <Col sm={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"searchableMultipleRegion\")}\n                  label=\"Multiple Market\"\n                  required\n                  helpText=\"\"\n                  hint={{\n                    title: \"Title Custom\",\n                    description: <span> Custom Hint Bro! </span>\n                  }}\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n                  control={{\n                    type: SelectControl,\n                    settings: {\n                      options: regionOptions,\n                      multiple: true,\n                      searchable: true,\n                      closeMenuOnSelect: false,\n                      // menuIsOpen: true,\n                      onChangeCallback: (onBlur) => {\n                        onBlur(this.state.searchableMultipleRegion);\n                        console.log('Hello world!');\n                      }\n                    }\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"gender\")}\n                  label=\"Gender Type\"\n                  required\n                  // helpText=\"This is helptext\"\n                  // toolTipText=\"This is tooltip\"\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n                  control={{\n                    type: CustomRadio,\n                    settings: {\n                      radioId: \"gender\",\n                      radioName: \"gender\",\n                      options: [\n                        {\n                          key: \"1\",\n                          label: \"On Premise Venue\"\n                        },\n                        {\n                          key: \"2\",\n                          label: \"Retail Venue\"\n                        }\n                      ],\n                      isInline: true,\n                    }\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"checkboxList\")}\n                  label=\"Hobby\"\n                  required\n                  // helpText=\"This is helptext\"\n                  // toolTipText=\"This is tooltip\"\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"Field cannot be empty\"\n                    }\n                  ]}\n                  control={{\n                    type: CustomCheckbox,\n                    settings: {\n                      radioId: \"hobby\",\n                      radioName: \"hobby\",\n                      options: this.state.checkboxList,\n                      // isInline: true,\n                    }\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n\n                <FormElement\n                  valueLink={this.linkState(this, \"attachment\")}\n                  label=\"Upload Image\"\n                  required\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"File is required\"\n                    }\n                  ]}\n                  control={{\n                    type: FileUploadControl,\n                    settings: {\n                      moduleName: \"account\",\n                      subModule: \"project\",\n                      fileType: \"IMAGE\",\n                      extensions: [\"image/*\"],\n                      maxFiles: 1,\n                      maxFileSize: 100000000,\n                      onSelect: (file, callback) => {\n                        // You will need to generate signedURL by calling API and then call callback\n                        const fileInfo = {\n                          id: file.lastModified,\n                          name: file.name,\n                          size: file.size,\n                          mimeType: file.type,\n                          path: \"single.jpg\"\n                        };\n                        callback(fileInfo, \"http://35.154.155.206/api\");\n                      }\n                    }\n                  }}\n                />\n              </Col>\n              <Col md={6}>\n                <FormElement\n                  valueLink={this.linkState(this, \"attachments\")}\n                  label=\"Upload Image Multiple\"\n                  required\n                  validations={[\n                    {\n                      validate: FormValidator.isRequired,\n                      message: \"File is required\"\n                    }\n                  ]}\n                  control={{\n                    type: FileUploadControl,\n                    settings: {\n                      moduleName: \"account\",\n                      subModule: \"project\",\n                      fileType: \"IMAGE\",\n                      extensions: [\".png,.jpg\"],\n                      maxFiles: 2,\n                      maxFileSize: 100000000,\n                      onSelect: (file, callback) => {\n                        // You will need to generate signedURL by calling API and then call callback\n                        const fileInfo = {\n                          id: file.lastModified,\n                          name: file.name,\n                          size: file.size,\n                          mimeType: file.type,\n                          path: \"multi\" + (this.state.attachments.length + 1) + \".jpg\"\n                        };\n                        callback(fileInfo, \"http://35.154.155.206/api\");\n                      }\n                    }\n                  }}\n                />\n              </Col>\n\n              <Col md={12}>\n                <CustomButton type={\"submit\"} handleClick={() => { this.setValue(\"now\") }} variant=\"success\" buttonText=\"Now\" />\n                <CustomButton handleClick={() => { this.setValue(\"later\") }} buttonText=\"Later\" />\n              </Col>\n            </Row>\n          </Container>\n        </Form>\n        <Container>\n          <Row>\n            <Col md={12}>\n              <CustomTable\n                tableData={dummyData}\n                columnList={[\n                  {\n                    coumnWidth: 250,\n                    labelName: \"First Name\",\n                    dataKey: \"firstName\",\n                    className: \"first-name\",\n                    isCell: true,\n                    cell: (rowData, dataKey) => {\n                      if (dataKey === \"firstName\") {\n                        return rowData.firstName\n                      }\n                    }\n                  },\n                  {\n                    coumnWidth: 250,\n                    labelName: \"Last Name\",\n                    dataKey: \"lastName\",\n                    className: \"\",\n                    isCell: true,\n                    cell: (rowData, dataKey) => {\n                      if (dataKey === \"lastName\") {\n                        return rowData.lastName\n                      }\n                    }\n                  }\n                ]}\n                message=\"No data found\"\n                // For Pagination\n                history={this.props.history}\n                location={this.props.location}\n                totalPages={2}\n                currentPage={this.state.page}\n                pageSize={true}\n                pageSizeOptions={[\n                  { value: 10, label: \"10\" },\n                  { value: 20, label: \"20\" },\n                  { value: 30, label: \"30\" },\n                  { value: 40, label: \"40\" },\n                ]}\n                handlePageSize={this.handlePageSize}\n              />\n\n            </Col>\n          </Row>\n        </Container>\n      </Fragment>\n    );\n  }\n}\n\nSandbox.propTypes = {\n  classes: PropTypes.object\n};\n\nexport default Sandbox;\n"]},"metadata":{},"sourceType":"module"}