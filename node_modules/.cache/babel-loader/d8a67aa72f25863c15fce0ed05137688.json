{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/customers/Customers.js\";\nimport React, { Component } from \"react\"; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport { CustomerFilterModal } from \".\";\nimport CustomTable from \"../../utils/commonComponent/CustomTable\";\nimport { PermissionList, START_PAGE } from \"../../utils/Constant\"; // import { PermissionList } from '../../utils/Constant';\n\nimport { replaceHistory } from \"../../utils/ReusableFunctions\";\nimport { ComponentHeader } from \"../common\"; // import { ComponentHeader } from '../common';\n\nimport ActionDropdown from \"../common/_utils/ActionDropdown\";\nimport Switch from \"../common/_utils/Switch\";\nimport { getAllCustomersApi, updateCustomerStatusApi } from \"./Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Customers extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clearSearch = () => {\n      this.onChangeMethod({\n        search: \"\"\n      });\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchText: value.search,\n        page: 1\n      }, () => {\n        replaceHistory(this.props.history, 1, value.search);\n      });\n    };\n\n    this.handleEditCustomer = rowData => {\n      this.props.history.push({\n        pathname: `/edit-customer/`,\n        state: {\n          editData: rowData\n        }\n      });\n    };\n\n    this.handleAddCustomer = () => {\n      this.props.history.push(\"/add-customer\");\n    };\n\n    this.handleToggle = rowData => {\n      console.log(\"rowData\", rowData);\n      let data = new URLSearchParams();\n      data.append(\"customer_id\", rowData.id);\n      data.append(\"active\", !rowData.active);\n      updateCustomerStatusApi(data, this);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const searchText = params.get(\"search\");\n    this.state = {\n      customersList: [],\n      showFilter: false,\n      // page: page ? parseInt(page, 10) : 1,\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      totalPages: 1,\n      searchText,\n      searchKey: \"SEARCH_BY_TEXT\"\n    };\n  }\n\n  componentDidMount() {\n    getAllCustomersApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1;\n    const prevSearchText = prevParams.get(\"search\");\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get(\"p\"), 10) || 1;\n    const searchText = params.get(\"search\");\n\n    if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({\n        page,\n        searchText\n      }, () => {\n        getAllCustomersApi(this);\n      });\n    }\n  }\n\n  render() {\n    const {\n      customersList\n    } = this.state; // const permissionList = getAssignedPermission();\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.showFilter && /*#__PURE__*/_jsxDEV(CustomerFilterModal, {\n        show: this.state.showFilter,\n        handleClose: this.handleFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Customers\",\n        title: \"Customers\",\n        isSearch: true,\n        placeholder: \"Search Customer\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: this.clearSearch,\n        searchValue: {\n          search: this.state.searchText\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: customersList,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Customer Name\",\n            dataKey: \"name\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"name\") {\n                return /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"cursor\",\n                  onClick: () => this.props.history.push(`/customer/${rowData.id}`),\n                  children: rowData.first_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Contact Number\",\n            dataKey: \"mobile\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"mobile\") {\n                return rowData.mobile || \"NA\";\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Email Id\",\n            dataKey: \"email\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"email\") {\n                return rowData.email || \"NA\";\n              }\n            }\n          }, // {\n          //   coumnWidth: 250,\n          //   labelName: \"Status\",\n          //   dataKey: \"status\",\n          //   className: \"\",\n          //   isCell: true,\n          //   cell: (rowData, dataKey) => {\n          //     if (dataKey === \"status\") {\n          //       return (\n          //         <p className=\"status\">\n          //           {\" \"}\n          //           <span\n          //             className={`circle ${\n          //               rowData.active ? \"active\" : \"inactive\"\n          //             }`}\n          //           ></span>{\" \"}\n          //           {rowData.active ? \"Attached\" : \"Inactive\"}\n          //         </p>\n          //       )\n          //     }\n          //   }\n          // },\n          {\n            coumnWidth: 350,\n            labelName: \"Status\",\n            dataKey: \"active\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"active\") {\n                return /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: rowData.active,\n                  handleClick: () => this.handleToggle(rowData)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [{\n                  title: \"View Details\",\n                  type: \"\",\n                  linkUrl: `/customer/${rowData.id}`\n                }];\n                return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                  menuItem: menuItem\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 28\n                }, this);\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: this.state.totalPages,\n          currentPage: this.state.page - 1 // because of 0 based indexing\n          // message={\"Customer list is empty\"}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n}; // Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Customers);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/customers/Customers.js"],"names":["React","Component","connect","CustomerFilterModal","CustomTable","PermissionList","START_PAGE","replaceHistory","ComponentHeader","ActionDropdown","Switch","getAllCustomersApi","updateCustomerStatusApi","Customers","constructor","props","clearSearch","onChangeMethod","search","value","setState","searchText","page","history","handleEditCustomer","rowData","push","pathname","state","editData","handleAddCustomer","handleToggle","console","log","data","URLSearchParams","append","id","active","location","params","get","customersList","showFilter","parseInt","totalPages","searchKey","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","prevSearchText","render","handleFilter","coumnWidth","labelName","dataKey","className","isCell","cell","first_name","mobile","email","menuItem","title","type","linkUrl","mapStateToProps","customersState","CustomersState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\"\nimport { CustomerFilterModal } from \".\"\nimport CustomTable from \"../../utils/commonComponent/CustomTable\"\nimport { PermissionList, START_PAGE } from \"../../utils/Constant\"\n// import { PermissionList } from '../../utils/Constant';\nimport { replaceHistory } from \"../../utils/ReusableFunctions\"\nimport { ComponentHeader } from \"../common\"\n// import { ComponentHeader } from '../common';\nimport ActionDropdown from \"../common/_utils/ActionDropdown\"\nimport Switch from \"../common/_utils/Switch\"\nimport { getAllCustomersApi, updateCustomerStatusApi } from \"./Api\"\n\nclass Customers extends Component {\n  constructor(props) {\n    super(props)\n    const search = props.location.search\n    const params = new URLSearchParams(search)\n    const page = params.get(\"p\")\n    const searchText = params.get(\"search\")\n    this.state = {\n      customersList: [],\n      showFilter: false,\n      // page: page ? parseInt(page, 10) : 1,\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      totalPages: 1,\n      searchText,\n      searchKey: \"SEARCH_BY_TEXT\"\n    }\n  }\n\n  componentDidMount() {\n    getAllCustomersApi(this)\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search)\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1\n    const prevSearchText = prevParams.get(\"search\")\n\n    const params = new URLSearchParams(this.props.location.search)\n    const page = parseInt(params.get(\"p\"), 10) || 1\n    const searchText = params.get(\"search\")\n\n    if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({ page, searchText }, () => {\n        getAllCustomersApi(this)\n      })\n    }\n  }\n\n  clearSearch = () => {\n    this.onChangeMethod({ search: \"\" })\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({ searchText: value.search, page: 1 }, () => {\n      replaceHistory(this.props.history, 1, value.search)\n    })\n  }\n\n  handleEditCustomer = (rowData) => {\n    this.props.history.push({\n      pathname: `/edit-customer/`,\n      state: { editData: rowData }\n    })\n  }\n\n  handleAddCustomer = () => {\n    this.props.history.push(\"/add-customer\")\n  }\n\n  handleToggle = (rowData) => {\n    console.log(\"rowData\", rowData)\n    let data = new URLSearchParams()\n    data.append(\"customer_id\", rowData.id)\n    data.append(\"active\", !rowData.active)\n    updateCustomerStatusApi(data, this)\n  }\n\n  render() {\n    const { customersList } = this.state\n    // const permissionList = getAssignedPermission();\n    return (\n      <>\n        {this.state.showFilter && (\n          <CustomerFilterModal\n            show={this.state.showFilter}\n            handleClose={this.handleFilter}\n          />\n        )}\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Customers\"}\n          title={\"Customers\"}\n          isSearch={true}\n          placeholder={\"Search Customer\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={this.clearSearch}\n          searchValue={{ search: this.state.searchText }}\n        />\n        <div className=\"custom-table-wrapper\">\n          <CustomTable\n            tableData={customersList}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"Customer Name\",\n                dataKey: \"name\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"name\") {\n                    return (\n                      <span\n                        className=\"cursor\"\n                        onClick={() =>\n                          this.props.history.push(`/customer/${rowData.id}`)\n                        }\n                      >\n                        {rowData.first_name}\n                      </span>\n                    )\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Contact Number\",\n                dataKey: \"mobile\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"mobile\") {\n                    return rowData.mobile || \"NA\"\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Email Id\",\n                dataKey: \"email\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"email\") {\n                    return rowData.email || \"NA\"\n                  }\n                }\n              },\n              // {\n              //   coumnWidth: 250,\n              //   labelName: \"Status\",\n              //   dataKey: \"status\",\n              //   className: \"\",\n              //   isCell: true,\n              //   cell: (rowData, dataKey) => {\n              //     if (dataKey === \"status\") {\n              //       return (\n              //         <p className=\"status\">\n              //           {\" \"}\n              //           <span\n              //             className={`circle ${\n              //               rowData.active ? \"active\" : \"inactive\"\n              //             }`}\n              //           ></span>{\" \"}\n              //           {rowData.active ? \"Attached\" : \"Inactive\"}\n              //         </p>\n              //       )\n              //     }\n              //   }\n              // },\n              {\n                coumnWidth: 350,\n                labelName: \"Status\",\n                dataKey: \"active\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"active\") {\n                    return (\n                      <Switch\n                        checked={rowData.active}\n                        handleClick={() => this.handleToggle(rowData)}\n                      />\n                    )\n                  }\n                }\n              },\n              {\n                coumnWidth: 50,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [\n                      {\n                        title: \"View Details\",\n                        type: \"\",\n                        linkUrl: `/customer/${rowData.id}`\n                      }\n                    ]\n                    return <ActionDropdown menuItem={menuItem} />\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={this.state.totalPages}\n            currentPage={this.state.page - 1} // because of 0 based indexing\n            // message={\"Customer list is empty\"}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  customersState: state.CustomersState\n})\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\n// Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Customers)\n"]},"metadata":{},"sourceType":"module"}