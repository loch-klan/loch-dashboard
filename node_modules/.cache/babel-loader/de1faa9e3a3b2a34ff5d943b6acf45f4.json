{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/utils/form/FileUploader.js\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Image } from \"react-bootstrap\";\nimport { getToken } from \"../ManageToken\"; // import Dropzone from \"react-dropzone\";\n\nimport BaseReactComponent from \"./BaseReactComponent\";\nimport FilePreview from \"./FilePreview\"; // import { DisplayUtil } from \"../utils\";\n\nimport plusIcon from \"../../assets/images/icons/plus-icon.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayUtil = null;\n\nclass FileUploader extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onUploadProgress = (fileInfo, percentage) => {\n      const {\n        uploadProgress\n      } = this.state;\n      let stateCallback = null;\n\n      if (percentage === 100) {\n        delete uploadProgress[fileInfo.id];\n        stateCallback = this.updateValueLink;\n      } else {\n        uploadProgress[fileInfo.id] = percentage;\n      } //console.log('uploadProgress', uploadProgress);\n\n\n      this.setState({\n        uploadProgress\n      }, stateCallback);\n    };\n\n    this.uploadFile = (uploadURL, htmlFile, fileInfo, onProgress) => {\n      return new Promise((res, rej) => {\n        const xhr = new XMLHttpRequest();\n        const formData = new FormData(); //console.log('htmlFile', htmlFile.type);\n\n        let type;\n\n        if (htmlFile.type.match('image.*')) {\n          type = \"IMAGE\";\n        } else if (htmlFile.type.match('video.*')) {\n          type = \"VIDEO\";\n        } else {\n          type = \"ALL_FORMAT\";\n        } // return;\n        // let type = \"IMAGE\";\n        // if (htmlFile.type === \"application/pdf\") {\n        //     type = \"PDF\"\n        // }\n\n\n        formData.append('file', htmlFile);\n        formData.append('module', this.props.moduleName);\n        formData.append('sub_module', this.props.subModule); // formData.append('type', type);\n\n        formData.append('media_type', type); // IF THE MODULE NAME IS ORGANISATION THEN PASS ACCOUNT ID = 0 AS ITS GLOBAL ASSET.\n\n        /*\n        if (this.props.moduleName === \"organisation\")\n            formData.append('scope', JSON.stringify({ account_id: 0 }));\n        else\n            formData.append('scope', getScope());\n        */\n\n        xhr.open(\"POST\", uploadURL + \"common/attachment/upload\"); // xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n\n        xhr.setRequestHeader(\"Authorization\", getToken());\n\n        xhr.onload = e => res(e.target.responseText);\n\n        xhr.onerror = rej;\n        if (xhr.upload && onProgress) xhr.upload.onprogress = onProgress; // event.loaded / event.total * 100 ; //event.lengthComputable\n        // console.log('formData', formData);\n\n        xhr.send(formData);\n      });\n    };\n\n    this.startUpload = (htmlFile, fileInfo, uploadURL) => {\n      this.uploadFile(uploadURL, htmlFile, fileInfo, event => {\n        this.onUploadProgress(fileInfo, parseInt(event.loaded / event.total * 100, 10));\n      }).then(response => {\n        let res = JSON.parse(response); //console.log('image upload response', response);\n\n        if (!res.error) {\n          // console.log('image upload response', res.data.id);\n          fileInfo.imageId = res.data.id;\n          fileInfo.path = res.data.url; // console.log('image upload res', res);\n          // console.log('image upload fileInfo', fileInfo);\n\n          this.onUploadProgress(fileInfo, 100);\n        } else {\n          fileInfo.error = true;\n          fileInfo.errorText = \"Unable to upload file\";\n        }\n      }).catch(err => {\n        // console.log('Error', err);\n        fileInfo.error = true;\n        fileInfo.errorText = \"Unable to upload file\"; // DisplayUtil.showErrorAlert(\"Unable to upload file\");\n      });\n    };\n\n    this.onImageChange = e => {\n      // console.log('event files', e.target.files[0]);\n      let acceptedFiles = e.target.files; // console.log('acceptedFiles', acceptedFiles);\n\n      const {\n        onSelect\n      } = this.props;\n      const {\n        files,\n        uploadProgress\n      } = this.state; // console.log('files',files);\n\n      Array.from(acceptedFiles).forEach(htmlFile => {\n        onSelect(htmlFile, (fileInfo, uploadURL) => {\n          files.push(fileInfo);\n          uploadProgress[fileInfo.id] = 1;\n          this.setState({\n            files,\n            uploadProgress\n          }, () => this.startUpload(htmlFile, fileInfo, uploadURL));\n        });\n      });\n    };\n\n    this.onDropRejected = rejectedFiles => {\n      const fileNames = _.map(rejectedFiles, \"name\");\n\n      DisplayUtil.showWarningAlert(fileNames.join(\", \") + \" rejected due to size or invalid format\");\n    };\n\n    this.onRemove = fileInfo => {\n      const {\n        files\n      } = this.state;\n      files.splice(files.indexOf(fileInfo), 1);\n      this.setState({\n        files\n      }, this.updateValueLink);\n    };\n\n    this.updateValueLink = () => {\n      const {\n        maxFiles,\n        valueLink\n      } = this.props;\n      const {\n        files\n      } = this.state;\n      valueLink.requestChange(maxFiles === 1 ? files.length === 0 ? null : files[0] : files);\n    };\n\n    this.state = {\n      files: props.maxFiles === 1 ? props.valueLink.value ? [props.valueLink.value] : [] : props.valueLink.value,\n      uploadProgress: {}\n    }; // console.log('props.valueLink.value', props.valueLink.value);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"prevProps\", prevProps);\n    // console.log('this.props', this.props);\n    // Typical usage (don't forget to compare props):\n    if (this.props.valueLink.value && (prevProps.valueLink.value === \"\" || prevProps.valueLink.value && prevProps.valueLink.value.imageId || prevProps.valueLink.value && prevProps.valueLink.value.length === 0)) {\n      if (this.props.valueLink.value.imageId !== prevProps.valueLink.value.imageId) {\n        const {\n          maxFiles,\n          valueLink\n        } = this.props;\n        let files = maxFiles === 1 ? [valueLink.value] : valueLink.value;\n        this.setState({\n          files\n        });\n      } else if (this.props.valueLink.value.length) {\n        const {\n          valueLink\n        } = this.props;\n        let files = valueLink.value;\n        this.setState({\n          files\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      extensions,\n      maxFiles,\n      columns\n    } = this.props;\n    const {\n      files,\n      uploadProgress\n    } = this.state; // console.log('files',files);\n\n    const showDropZone = files.length !== maxFiles;\n    let imgUploadId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-wrapper\",\n      children: [showDropZone && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-image-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: imgUploadId,\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: plusIcon,\n            className: \"plus-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"red-hat-display-medium f-s-14\",\n            children: \"Browse to choose file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: imgUploadId,\n          accept: extensions,\n          multiple: maxFiles > 1,\n          onChange: this.onImageChange,\n          style: {\n            \"display\": \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-preview-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(FilePreview, {\n          files: files,\n          uploadProgress: uploadProgress,\n          columns: columns,\n          onRemove: this.onRemove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nFileUploader.propTypes = {\n  classes: PropTypes.object,\n  extensions: PropTypes.array,\n  maxFiles: PropTypes.number,\n  maxFileSize: PropTypes.number,\n  columns: PropTypes.number,\n  valueLink: PropTypes.object.isRequired,\n  onSelect: PropTypes.func.isRequired\n};\nFileUploader.defaultProps = {\n  extensions: [\"*\"],\n  maxFiles: 1,\n  maxFileSize: 2000000,\n  columns: 1\n};\nexport default FileUploader;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/utils/form/FileUploader.js"],"names":["_","PropTypes","React","Image","getToken","BaseReactComponent","FilePreview","DisplayUtil","FileUploader","constructor","props","onUploadProgress","fileInfo","percentage","uploadProgress","state","stateCallback","id","updateValueLink","setState","uploadFile","uploadURL","htmlFile","onProgress","Promise","res","rej","xhr","XMLHttpRequest","formData","FormData","type","match","append","moduleName","subModule","open","setRequestHeader","onload","e","target","responseText","onerror","upload","onprogress","send","startUpload","event","parseInt","loaded","total","then","response","JSON","parse","error","imageId","data","path","url","errorText","catch","err","onImageChange","acceptedFiles","files","onSelect","Array","from","forEach","push","onDropRejected","rejectedFiles","fileNames","map","showWarningAlert","join","onRemove","splice","indexOf","maxFiles","valueLink","requestChange","length","value","componentDidUpdate","prevProps","prevState","render","extensions","columns","showDropZone","imgUploadId","Math","random","toString","substring","plusIcon","propTypes","classes","object","array","number","maxFileSize","isRequired","func","defaultProps"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CACA;;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;;;;AAGA,MAAMC,WAAW,GAAG,IAApB;;AAEA,MAAMC,YAAN,SAA2BH,kBAA3B,CAA8C;AAC5CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,gBAhBmB,GAgBA,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAC3C,YAAM;AAAEC,QAAAA;AAAF,UAAqB,KAAKC,KAAhC;AACA,UAAIC,aAAa,GAAG,IAApB;;AACA,UAAIH,UAAU,KAAK,GAAnB,EAAwB;AACtB,eAAOC,cAAc,CAACF,QAAQ,CAACK,EAAV,CAArB;AACAD,QAAAA,aAAa,GAAG,KAAKE,eAArB;AACD,OAHD,MAGO;AACLJ,QAAAA,cAAc,CAACF,QAAQ,CAACK,EAAV,CAAd,GAA8BJ,UAA9B;AACD,OAR0C,CAS3C;;;AACA,WAAKM,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd,EAAkCE,aAAlC;AACD,KA3BkB;;AAAA,SA6BnBI,UA7BmB,GA6BN,CAACC,SAAD,EAAYC,QAAZ,EAAsBV,QAAtB,EAAgCW,UAAhC,KAA+C;AAC1D,aAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,cAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,cAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB,CAF+B,CAG/B;;AACA,YAAIC,IAAJ;;AACA,YAAIT,QAAQ,CAACS,IAAT,CAAcC,KAAd,CAAoB,SAApB,CAAJ,EAAoC;AAClCD,UAAAA,IAAI,GAAG,OAAP;AACD,SAFD,MAEO,IAAIT,QAAQ,CAACS,IAAT,CAAcC,KAAd,CAAoB,SAApB,CAAJ,EAAoC;AACzCD,UAAAA,IAAI,GAAG,OAAP;AACD,SAFM,MAEA;AACLA,UAAAA,IAAI,GAAG,YAAP;AACD,SAX8B,CAa/B;AACA;AACA;AACA;AACA;;;AAEAF,QAAAA,QAAQ,CAACI,MAAT,CAAgB,MAAhB,EAAwBX,QAAxB;AACAO,QAAAA,QAAQ,CAACI,MAAT,CAAgB,QAAhB,EAA0B,KAAKvB,KAAL,CAAWwB,UAArC;AACAL,QAAAA,QAAQ,CAACI,MAAT,CAAgB,YAAhB,EAA8B,KAAKvB,KAAL,CAAWyB,SAAzC,EArB+B,CAsB/B;;AACAN,QAAAA,QAAQ,CAACI,MAAT,CAAgB,YAAhB,EAA8BF,IAA9B,EAvB+B,CAwB/B;;AACA;AACN;AACA;AACA;AACA;AACA;;AAEMJ,QAAAA,GAAG,CAACS,IAAJ,CAAS,MAAT,EAAiBf,SAAS,GAAG,0BAA7B,EAhC+B,CAiC/B;;AACAM,QAAAA,GAAG,CAACU,gBAAJ,CAAqB,eAArB,EAAsCjC,QAAQ,EAA9C;;AAEAuB,QAAAA,GAAG,CAACW,MAAJ,GAAaC,CAAC,IAAId,GAAG,CAACc,CAAC,CAACC,MAAF,CAASC,YAAV,CAArB;;AACAd,QAAAA,GAAG,CAACe,OAAJ,GAAchB,GAAd;AACA,YAAIC,GAAG,CAACgB,MAAJ,IAAcpB,UAAlB,EAA8BI,GAAG,CAACgB,MAAJ,CAAWC,UAAX,GAAwBrB,UAAxB,CAtCC,CAsCmC;AAClE;;AACAI,QAAAA,GAAG,CAACkB,IAAJ,CAAShB,QAAT;AACD,OAzCM,CAAP;AA0CD,KAxEkB;;AAAA,SA0EnBiB,WA1EmB,GA0EL,CAACxB,QAAD,EAAWV,QAAX,EAAqBS,SAArB,KAAmC;AAC/C,WAAKD,UAAL,CAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCV,QAArC,EAA+CmC,KAAK,IAAI;AACtD,aAAKpC,gBAAL,CACEC,QADF,EAEEoC,QAAQ,CAACD,KAAK,CAACE,MAAN,GAAeF,KAAK,CAACG,KAArB,GAA6B,GAA9B,EAAmC,EAAnC,CAFV;AAID,OALD,EAMGC,IANH,CAMQC,QAAQ,IAAI;AAChB,YAAI3B,GAAG,GAAG4B,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAV,CADgB,CAEhB;;AACA,YAAI,CAAC3B,GAAG,CAAC8B,KAAT,EAAgB;AACd;AACA3C,UAAAA,QAAQ,CAAC4C,OAAT,GAAmB/B,GAAG,CAACgC,IAAJ,CAASxC,EAA5B;AACAL,UAAAA,QAAQ,CAAC8C,IAAT,GAAgBjC,GAAG,CAACgC,IAAJ,CAASE,GAAzB,CAHc,CAId;AACA;;AACA,eAAKhD,gBAAL,CAAsBC,QAAtB,EAAgC,GAAhC;AACD,SAPD,MAOO;AACLA,UAAAA,QAAQ,CAAC2C,KAAT,GAAiB,IAAjB;AACA3C,UAAAA,QAAQ,CAACgD,SAAT,GAAqB,uBAArB;AACD;AACF,OApBH,EAqBGC,KArBH,CAqBSC,GAAG,IAAI;AACZ;AACAlD,QAAAA,QAAQ,CAAC2C,KAAT,GAAiB,IAAjB;AACA3C,QAAAA,QAAQ,CAACgD,SAAT,GAAqB,uBAArB,CAHY,CAIZ;AACD,OA1BH;AA2BD,KAtGkB;;AAAA,SAwGnBG,aAxGmB,GAwGFxB,CAAD,IAAO;AACrB;AACA,UAAIyB,aAAa,GAAGzB,CAAC,CAACC,MAAF,CAASyB,KAA7B,CAFqB,CAGrB;;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKxD,KAA1B;AACA,YAAM;AAAEuD,QAAAA,KAAF;AAASnD,QAAAA;AAAT,UAA4B,KAAKC,KAAvC,CALqB,CAMzB;;AACIoD,MAAAA,KAAK,CAACC,IAAN,CAAWJ,aAAX,EAA0BK,OAA1B,CAAkC/C,QAAQ,IAAI;AAC5C4C,QAAAA,QAAQ,CAAC5C,QAAD,EAAW,CAACV,QAAD,EAAWS,SAAX,KAAyB;AAC1C4C,UAAAA,KAAK,CAACK,IAAN,CAAW1D,QAAX;AACAE,UAAAA,cAAc,CAACF,QAAQ,CAACK,EAAV,CAAd,GAA8B,CAA9B;AACA,eAAKE,QAAL,CACE;AACE8C,YAAAA,KADF;AAEEnD,YAAAA;AAFF,WADF,EAKE,MAAM,KAAKgC,WAAL,CAAiBxB,QAAjB,EAA2BV,QAA3B,EAAqCS,SAArC,CALR;AAOD,SAVO,CAAR;AAWD,OAZD;AAaD,KA5HkB;;AAAA,SA8HnBkD,cA9HmB,GA8HFC,aAAa,IAAI;AAChC,YAAMC,SAAS,GAAGzE,CAAC,CAAC0E,GAAF,CAAMF,aAAN,EAAqB,MAArB,CAAlB;;AACAjE,MAAAA,WAAW,CAACoE,gBAAZ,CACEF,SAAS,CAACG,IAAV,CAAe,IAAf,IAAuB,yCADzB;AAGD,KAnIkB;;AAAA,SAqInBC,QArImB,GAqIRjE,QAAQ,IAAI;AACrB,YAAM;AAAEqD,QAAAA;AAAF,UAAY,KAAKlD,KAAvB;AACAkD,MAAAA,KAAK,CAACa,MAAN,CAAab,KAAK,CAACc,OAAN,CAAcnE,QAAd,CAAb,EAAsC,CAAtC;AACA,WAAKO,QAAL,CAAc;AAAE8C,QAAAA;AAAF,OAAd,EAAyB,KAAK/C,eAA9B;AACD,KAzIkB;;AAAA,SA2InBA,eA3ImB,GA2ID,MAAM;AACtB,YAAM;AAAE8D,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA0B,KAAKvE,KAArC;AACA,YAAM;AAAEuD,QAAAA;AAAF,UAAY,KAAKlD,KAAvB;AACAkE,MAAAA,SAAS,CAACC,aAAV,CACEF,QAAQ,KAAK,CAAb,GAAkBf,KAAK,CAACkB,MAAN,KAAiB,CAAjB,GAAqB,IAArB,GAA4BlB,KAAK,CAAC,CAAD,CAAnD,GAA0DA,KAD5D;AAGD,KAjJkB;;AAEjB,SAAKlD,KAAL,GAAa;AACXkD,MAAAA,KAAK,EACHvD,KAAK,CAACsE,QAAN,KAAmB,CAAnB,GACItE,KAAK,CAACuE,SAAN,CAAgBG,KAAhB,GACE,CAAC1E,KAAK,CAACuE,SAAN,CAAgBG,KAAjB,CADF,GAGA,EAJJ,GAME1E,KAAK,CAACuE,SAAN,CAAgBG,KART;AASXtE,MAAAA,cAAc,EAAE;AATL,KAAb,CAFiB,CAajB;AACD;;AAqIDuE,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC;AACA;AACA;AAEA,QAAI,KAAK7E,KAAL,CAAWuE,SAAX,CAAqBG,KAArB,KAA+BE,SAAS,CAACL,SAAV,CAAoBG,KAApB,KAA8B,EAA9B,IAChCE,SAAS,CAACL,SAAV,CAAoBG,KAApB,IAA6BE,SAAS,CAACL,SAAV,CAAoBG,KAApB,CAA0B5B,OADvB,IAEhC8B,SAAS,CAACL,SAAV,CAAoBG,KAApB,IAA6BE,SAAS,CAACL,SAAV,CAAoBG,KAApB,CAA0BD,MAA1B,KAAqC,CAFjE,CAAJ,EAE0E;AACxE,UAAI,KAAKzE,KAAL,CAAWuE,SAAX,CAAqBG,KAArB,CAA2B5B,OAA3B,KAAuC8B,SAAS,CAACL,SAAV,CAAoBG,KAApB,CAA0B5B,OAArE,EAA8E;AAC5E,cAAM;AAAEwB,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA0B,KAAKvE,KAArC;AACA,YAAIuD,KAAK,GAAGe,QAAQ,KAAK,CAAb,GAAiB,CAACC,SAAS,CAACG,KAAX,CAAjB,GAAqCH,SAAS,CAACG,KAA3D;AACA,aAAKjE,QAAL,CAAc;AAAE8C,UAAAA;AAAF,SAAd;AACD,OAJD,MAIO,IAAI,KAAKvD,KAAL,CAAWuE,SAAX,CAAqBG,KAArB,CAA2BD,MAA/B,EAAuC;AAC5C,cAAM;AAAEF,UAAAA;AAAF,YAAgB,KAAKvE,KAA3B;AACA,YAAIuD,KAAK,GAAGgB,SAAS,CAACG,KAAtB;AACA,aAAKjE,QAAL,CAAc;AAAE8C,UAAAA;AAAF,SAAd;AACD;AACF;AACF;;AAEDuB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,UAAF;AAAcT,MAAAA,QAAd;AAAwBU,MAAAA;AAAxB,QAAoC,KAAKhF,KAA/C;AACA,UAAM;AAAEuD,MAAAA,KAAF;AAASnD,MAAAA;AAAT,QAA4B,KAAKC,KAAvC,CAFO,CAGP;;AACA,UAAM4E,YAAY,GAAG1B,KAAK,CAACkB,MAAN,KAAiBH,QAAtC;AACA,QAAIY,WAAW,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,IAA8CH,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,CAAhE;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,iBAEIL,YAAY,iBACV;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAO,UAAA,OAAO,EAAEC,WAAhB;AAAA,kCAGE,QAAC,KAAD;AAAO,YAAA,GAAG,EAAEK,QAAZ;AAAsB,YAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAG,YAAA,SAAS,EAAC,+BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,EAAE,EAAEL,WAFN;AAGE,UAAA,MAAM,EAAEH,UAHV;AAIE,UAAA,QAAQ,EAAET,QAAQ,GAAG,CAJvB;AAKE,UAAA,QAAQ,EAAE,KAAKjB,aALjB;AAME,UAAA,KAAK,EAAE;AAAE,uBAAW;AAAb;AANT;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHN,EAuBIE,KAAK,CAACkB,MAAN,GAAe,CAAf,iBACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE,QAAC,WAAD;AACE,UAAA,KAAK,EAAElB,KADT;AAEE,UAAA,cAAc,EAAEnD,cAFlB;AAGE,UAAA,OAAO,EAAE4E,OAHX;AAIE,UAAA,QAAQ,EAAE,KAAKb;AAJjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAxBN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoCD;;AAlN2C;;AAqN9CrE,YAAY,CAAC0F,SAAb,GAAyB;AACvBC,EAAAA,OAAO,EAAElG,SAAS,CAACmG,MADI;AAEvBX,EAAAA,UAAU,EAAExF,SAAS,CAACoG,KAFC;AAGvBrB,EAAAA,QAAQ,EAAE/E,SAAS,CAACqG,MAHG;AAIvBC,EAAAA,WAAW,EAAEtG,SAAS,CAACqG,MAJA;AAKvBZ,EAAAA,OAAO,EAAEzF,SAAS,CAACqG,MALI;AAMvBrB,EAAAA,SAAS,EAAEhF,SAAS,CAACmG,MAAV,CAAiBI,UANL;AAOvBtC,EAAAA,QAAQ,EAAEjE,SAAS,CAACwG,IAAV,CAAeD;AAPF,CAAzB;AAUAhG,YAAY,CAACkG,YAAb,GAA4B;AAC1BjB,EAAAA,UAAU,EAAE,CAAC,GAAD,CADc;AAE1BT,EAAAA,QAAQ,EAAE,CAFgB;AAG1BuB,EAAAA,WAAW,EAAE,OAHa;AAI1Bb,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,eAAelF,YAAf","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Image } from \"react-bootstrap\";\nimport { getToken } from \"../ManageToken\";\n// import Dropzone from \"react-dropzone\";\nimport BaseReactComponent from \"./BaseReactComponent\";\nimport FilePreview from \"./FilePreview\";\n// import { DisplayUtil } from \"../utils\";\nimport plusIcon from '../../assets/images/icons/plus-icon.svg';\n\nconst DisplayUtil = null;\n\nclass FileUploader extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files:\n        props.maxFiles === 1\n          ? props.valueLink.value\n            ? [props.valueLink.value]\n            :\n            []\n          :\n          props.valueLink.value,\n      uploadProgress: {}\n    };\n    // console.log('props.valueLink.value', props.valueLink.value);\n  }\n\n  onUploadProgress = (fileInfo, percentage) => {\n    const { uploadProgress } = this.state;\n    let stateCallback = null;\n    if (percentage === 100) {\n      delete uploadProgress[fileInfo.id];\n      stateCallback = this.updateValueLink;\n    } else {\n      uploadProgress[fileInfo.id] = percentage;\n    }\n    //console.log('uploadProgress', uploadProgress);\n    this.setState({ uploadProgress }, stateCallback);\n  };\n\n  uploadFile = (uploadURL, htmlFile, fileInfo, onProgress) => {\n    return new Promise((res, rej) => {\n      const xhr = new XMLHttpRequest();\n      const formData = new FormData();\n      //console.log('htmlFile', htmlFile.type);\n      let type;\n      if (htmlFile.type.match('image.*')) {\n        type = \"IMAGE\";\n      } else if (htmlFile.type.match('video.*')) {\n        type = \"VIDEO\";\n      } else {\n        type = \"ALL_FORMAT\"\n      }\n\n      // return;\n      // let type = \"IMAGE\";\n      // if (htmlFile.type === \"application/pdf\") {\n      //     type = \"PDF\"\n      // }\n\n      formData.append('file', htmlFile);\n      formData.append('module', this.props.moduleName);\n      formData.append('sub_module', this.props.subModule);\n      // formData.append('type', type);\n      formData.append('media_type', type);\n      // IF THE MODULE NAME IS ORGANISATION THEN PASS ACCOUNT ID = 0 AS ITS GLOBAL ASSET.\n      /*\n      if (this.props.moduleName === \"organisation\")\n          formData.append('scope', JSON.stringify({ account_id: 0 }));\n      else\n          formData.append('scope', getScope());\n      */\n\n      xhr.open(\"POST\", uploadURL + \"common/attachment/upload\");\n      // xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n      xhr.setRequestHeader(\"Authorization\", getToken());\n\n      xhr.onload = e => res(e.target.responseText);\n      xhr.onerror = rej;\n      if (xhr.upload && onProgress) xhr.upload.onprogress = onProgress; // event.loaded / event.total * 100 ; //event.lengthComputable\n      // console.log('formData', formData);\n      xhr.send(formData);\n    });\n  };\n\n  startUpload = (htmlFile, fileInfo, uploadURL) => {\n    this.uploadFile(uploadURL, htmlFile, fileInfo, event => {\n      this.onUploadProgress(\n        fileInfo,\n        parseInt(event.loaded / event.total * 100, 10)\n      );\n    })\n      .then(response => {\n        let res = JSON.parse(response);\n        //console.log('image upload response', response);\n        if (!res.error) {\n          // console.log('image upload response', res.data.id);\n          fileInfo.imageId = res.data.id;\n          fileInfo.path = res.data.url;\n          // console.log('image upload res', res);\n          // console.log('image upload fileInfo', fileInfo);\n          this.onUploadProgress(fileInfo, 100);\n        } else {\n          fileInfo.error = true;\n          fileInfo.errorText = \"Unable to upload file\";\n        }\n      })\n      .catch(err => {\n        // console.log('Error', err);\n        fileInfo.error = true;\n        fileInfo.errorText = \"Unable to upload file\";\n        // DisplayUtil.showErrorAlert(\"Unable to upload file\");\n      });\n  };\n\n  onImageChange = (e) => {\n    // console.log('event files', e.target.files[0]);\n    let acceptedFiles = e.target.files;\n    // console.log('acceptedFiles', acceptedFiles);\n    const { onSelect } = this.props;\n    const { files, uploadProgress } = this.state;\n// console.log('files',files);\n    Array.from(acceptedFiles).forEach(htmlFile => {\n      onSelect(htmlFile, (fileInfo, uploadURL) => {\n        files.push(fileInfo);\n        uploadProgress[fileInfo.id] = 1;\n        this.setState(\n          {\n            files,\n            uploadProgress\n          },\n          () => this.startUpload(htmlFile, fileInfo, uploadURL)\n        );\n      });\n    });\n  };\n\n  onDropRejected = rejectedFiles => {\n    const fileNames = _.map(rejectedFiles, \"name\");\n    DisplayUtil.showWarningAlert(\n      fileNames.join(\", \") + \" rejected due to size or invalid format\"\n    );\n  };\n\n  onRemove = fileInfo => {\n    const { files } = this.state;\n    files.splice(files.indexOf(fileInfo), 1);\n    this.setState({ files }, this.updateValueLink);\n  };\n\n  updateValueLink = () => {\n    const { maxFiles, valueLink } = this.props;\n    const { files } = this.state;\n    valueLink.requestChange(\n      maxFiles === 1 ? (files.length === 0 ? null : files[0]) : files\n    );\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"prevProps\", prevProps);\n    // console.log('this.props', this.props);\n    // Typical usage (don't forget to compare props):\n\n    if (this.props.valueLink.value && (prevProps.valueLink.value === \"\" ||\n      (prevProps.valueLink.value && prevProps.valueLink.value.imageId) ||\n      (prevProps.valueLink.value && prevProps.valueLink.value.length === 0))) {\n      if (this.props.valueLink.value.imageId !== prevProps.valueLink.value.imageId) {\n        const { maxFiles, valueLink } = this.props;\n        let files = maxFiles === 1 ? [valueLink.value] : valueLink.value;\n        this.setState({ files });\n      } else if (this.props.valueLink.value.length) {\n        const { valueLink } = this.props;\n        let files = valueLink.value;\n        this.setState({ files });\n      }\n    }\n  }\n\n  render() {\n    const { extensions, maxFiles, columns } = this.props;\n    const { files, uploadProgress } = this.state;\n    // console.log('files',files);\n    const showDropZone = files.length !== maxFiles;\n    let imgUploadId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    return (\n      <div className=\"image-wrapper\">\n        {\n          showDropZone && (\n            <div className='upload-image-wrapper'>\n              <label htmlFor={imgUploadId}>\n                {/* <h2>Upload Banner</h2> */}\n                {/* <span>+</span> */}\n                <Image src={plusIcon} className=\"plus-icon\" />\n                <p className=\"red-hat-display-medium f-s-14\">Browse to choose file</p>\n              </label>\n              <input\n                type='file'\n                id={imgUploadId}\n                accept={extensions}\n                multiple={maxFiles > 1}\n                onChange={this.onImageChange}\n                style={{ \"display\": \"none\" }}\n              />\n              {/* <h6>Note: Banner should be of type .png/.jpeg and of recommended size 1200x500</h6> */}\n            </div>\n          )\n        }\n        {\n          files.length > 0 && (\n            <div className=\"img-preview-wrapper\">\n              <FilePreview\n                files={files}\n                uploadProgress={uploadProgress}\n                columns={columns}\n                onRemove={this.onRemove}\n              />\n            </div>\n          )}\n      </div>\n    );\n  };\n}\n\nFileUploader.propTypes = {\n  classes: PropTypes.object,\n  extensions: PropTypes.array,\n  maxFiles: PropTypes.number,\n  maxFileSize: PropTypes.number,\n  columns: PropTypes.number,\n  valueLink: PropTypes.object.isRequired,\n  onSelect: PropTypes.func.isRequired\n};\n\nFileUploader.defaultProps = {\n  extensions: [\"*\"],\n  maxFiles: 1,\n  maxFileSize: 2000000,\n  columns: 1\n};\n\nexport default FileUploader;\n"]},"metadata":{},"sourceType":"module"}