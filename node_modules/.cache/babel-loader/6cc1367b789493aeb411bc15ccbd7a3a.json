{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/utils/form/BaseReactComponent.js\";\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BaseReactComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getIn = (obj, path) => {\n      // console.log('obj, path', obj, path);\n      const stack = path.split(\".\"); // console.log('stack', stack);\n\n      let getElement = { ...obj\n      }; // console.log('getElement 1', getElement);\n\n      while (stack.length) {\n        getElement = getElement[stack.shift()];\n      } // console.log('getElement', getElement);\n\n\n      return getElement;\n    };\n\n    this.updateIn = (obj, path, value) => {\n      // console.log('obj, path, value', obj, path, value);\n      let current = obj;\n      const stack = path.split(\".\"); // console.log('stack', stack);\n\n      while (stack.length > 1) {\n        current = current[stack.shift()];\n      }\n\n      current[stack.shift()] = value; // console.log('obj', obj);\n\n      return obj;\n    };\n\n    this.updateCb = (obj, path, position) => {\n      // console.log('obj, path, position', obj, path, position);\n      // console.log('obj.path', obj[path]);\n      let current = obj;\n      const stack = path.split(\".\"); // console.log('stack', stack);\n\n      while (stack.length > 1) {\n        current = current[stack.shift()];\n      } // console.log('current', current);\n      // console.log('current[stack.shift()]', current[stack.shift()]);\n      // let newCurrent = current[stack.shift()];\n\n\n      let newCurrent = obj[path]; // console.log('newCurrent', newCurrent);\n\n      newCurrent.map((item, i) => {\n        if (i === position) {\n          return item.key = !item.key;\n        }\n\n        return item;\n      });\n      return newCurrent;\n    };\n\n    this.linkState = (ctx, path, onUpdateCallback) => ( // console.log('ctx, path, onUpdateCallback', ctx, path, onUpdateCallback),\n    {\n      // todo : add type to handle type of input\n      // also add preUpdateCallback if required.\n      value: this.getIn(ctx.state, path),\n      requestChange: (value, onSetCallback) => ctx.setState(this.updateIn(ctx.state, path, value), () => {\n        if (onUpdateCallback) {\n          onUpdateCallback(value);\n        }\n\n        if (onSetCallback) {\n          onSetCallback(value);\n        }\n      }),\n      // value: this.getIn(ctx.state, path),\n      requestCheckboxChange: (value, position, onSetCallback) => ctx.setState(this.updateCb(ctx.state, path, position), () => {\n        if (onUpdateCallback) {\n          onUpdateCallback(value);\n        }\n\n        if (onSetCallback) {\n          onSetCallback(value);\n        }\n      })\n    });\n\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nBaseReactComponent.propTypes = {\n  children: PropTypes.any\n};\nBaseReactComponent.defaultProps = {\n  children: null\n};\nexport default BaseReactComponent;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/utils/form/BaseReactComponent.js"],"names":["React","Fragment","PropTypes","BaseReactComponent","Component","constructor","props","getIn","obj","path","stack","split","getElement","length","shift","updateIn","value","current","updateCb","position","newCurrent","map","item","i","key","linkState","ctx","onUpdateCallback","state","requestChange","onSetCallback","setState","requestCheckboxChange","render","children","propTypes","any","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass BaseReactComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getIn = (obj, path) => {\n    // console.log('obj, path', obj, path);\n    const stack = path.split(\".\");\n    // console.log('stack', stack);\n    let getElement = { ...obj };\n    // console.log('getElement 1', getElement);\n    while (stack.length) {\n\n      getElement = getElement[stack.shift()];\n    }\n    // console.log('getElement', getElement);\n    return getElement;\n  };\n\n  updateIn = (obj, path, value) => {\n    // console.log('obj, path, value', obj, path, value);\n    let current = obj;\n    const stack = path.split(\".\");\n    // console.log('stack', stack);\n    while (stack.length > 1) {\n      current = current[stack.shift()];\n    }\n    current[stack.shift()] = value;\n    // console.log('obj', obj);\n    return obj;\n  };\n\n  updateCb = (obj, path, position) => {\n    // console.log('obj, path, position', obj, path, position);\n    // console.log('obj.path', obj[path]);\n    let current = obj;\n    const stack = path.split(\".\");\n    // console.log('stack', stack);\n    while (stack.length > 1) {\n      current = current[stack.shift()];\n    }\n    // console.log('current', current);\n    // console.log('current[stack.shift()]', current[stack.shift()]);\n    // let newCurrent = current[stack.shift()];\n    let newCurrent = obj[path];\n    // console.log('newCurrent', newCurrent);\n    newCurrent.map((item, i) => {\n      if (i === position) {\n        return (\n          item.key = !item.key\n        )\n      }\n      return item\n    })\n    return newCurrent;\n  }\n\n  linkState = (ctx, path, onUpdateCallback) => (\n    // console.log('ctx, path, onUpdateCallback', ctx, path, onUpdateCallback),\n    {\n      // todo : add type to handle type of input\n      // also add preUpdateCallback if required.\n      value: this.getIn(ctx.state, path),\n      requestChange: (value, onSetCallback) =>\n        ctx.setState(this.updateIn(ctx.state, path, value), () => {\n          if (onUpdateCallback) {\n            onUpdateCallback(value);\n          }\n          if (onSetCallback) {\n            onSetCallback(value);\n          }\n        }),\n      // value: this.getIn(ctx.state, path),\n      requestCheckboxChange: (value, position, onSetCallback) =>\n        ctx.setState(this.updateCb(ctx.state, path, position), () => {\n          if (onUpdateCallback) {\n            onUpdateCallback(value);\n          }\n          if (onSetCallback) {\n            onSetCallback(value);\n          }\n        })\n\n    });\n\n  render() {\n    return <Fragment>{this.props.children}</Fragment>;\n  }\n}\n\nBaseReactComponent.propTypes = {\n  children: PropTypes.any\n};\n\nBaseReactComponent.defaultProps = {\n  children: null\n};\n\nexport default BaseReactComponent;"]},"metadata":{},"sourceType":"module"}