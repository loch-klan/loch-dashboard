{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/customers/AddEditCustomer.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { AccountType, LocationType } from '../../utils/Constant';\nimport { BaseReactComponent, CustomTextControl, DatePickerControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi } from '../common/Api';\nimport { getAllAccounts, getAllVehiclesDropdownApi } from '../vehicles/Api';\nimport ReactDOM from 'react-dom';\nimport { format } from 'date-fns';\nimport { addUpdateCustomerApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditCustomer extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onValidSubmit = () => {\n      const data = new URLSearchParams();\n      const {\n        name,\n        phone,\n        state,\n        city,\n        orderId,\n        vehicleId,\n        orderDate,\n        dealer,\n        email\n      } = this.state;\n      const orderDateString = format(orderDate, 'dd-MM-yyyy');\n      data.append('customer_email', email);\n      data.append('customer_name', name);\n      data.append('city_id', city);\n      data.append('state_id', state);\n      data.append('contact_name', name);\n      data.append('contact_number', phone); // data.append('customer_gender', gender);\n\n      data.append('order_id', orderId);\n      data.append('order_date', orderDateString);\n      data.append('dealer_account_id', dealer);\n      data.append('vehicle_id', vehicleId);\n      addUpdateCustomerApi(data, () => {\n        this.props.history.push(\"/customers\");\n      });\n    };\n\n    const userAccountType = getUserAccountType();\n    const editData = props.location.state ? props.location.state.editData : null; // console.log('editData', editData);\n\n    this.state = {\n      editId: editData ? editData.id : \"\",\n      name: editData ? editData.name : \"\",\n      email: editData ? editData.billing_email : \"\",\n      phone: editData ? editData.billing_contact : \"\",\n      orderId: \"\",\n      vehicleId: editData ? editData.vehicle_inventory.id : \"\",\n      orderDate: \"\",\n      dealer: \"\",\n      state: editData ? editData.extra_information.state_id : \"\",\n      city: editData ? editData.extra_information.city_id : \"\",\n      stateList: [],\n      cityList: [],\n      vehicleOptions: [],\n      userAccountType\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.STATE);\n    if (this.state.editId) this.props.getAllLocationApi(this, LocationType.CITY);\n\n    if (this.state.userAccountType < AccountType.DEALER) {\n      getAllAccounts(this, AccountType.DEALER, 'dealerOptions');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.editId ? \"Edit Customer\" : \"Add Customer\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.handleSave,\n        primaryBtnText: \"Save Customer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onValidSubmit,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"name\"),\n                  label: \"Customer Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"email\"),\n                  label: \"Customer Email\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Email cannot be empty\"\n                  }, {\n                    validate: FormValidator.isEmail,\n                    message: \"Please enter a valid email\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Email\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"phone\"),\n                  label: \"Contact Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Number cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPhone,\n                    message: \"Please enter a valid number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"state\"),\n                  label: \"State\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"State cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select State\",\n                      options: this.state.stateList,\n                      onChangeCallback: () => {\n                        this.setState({\n                          city: \"\",\n                          stateId: this.state.state\n                        }, () => {\n                          this.props.getAllLocationApi(this, LocationType.CITY);\n                        });\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"city\"),\n                  label: \"City\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"City cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select City\",\n                      options: this.state.cityList,\n                      noOptionCustom: () => \"Please select a state first\",\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.city);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"orderId\"),\n                  label: \"Order Reference ID\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Order ID cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Order Reference ID\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this), this.state.userAccountType < AccountType.DEALER && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"dealer\"),\n                  label: \"Dealer\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Dealer cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Dealer\",\n                      options: this.state.dealerOptions,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.dealer);\n                        getAllVehiclesDropdownApi(this);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"vehicleId\"),\n                  label: \"Vehicle Chassis No.\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Chassis number cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Vehicle by Chassis No\",\n                      options: this.state.vehicleOptions,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.vehicleId);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"orderDate\"),\n                  label: \"Order Date\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Order date cannot be empty\"\n                  }],\n                  control: {\n                    type: DatePickerControl,\n                    settings: {\n                      placeholder: \"Select Order Date\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\n\nconst mapDispatchToProps = {\n  getAllLocationApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditCustomer);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/customers/AddEditCustomer.js"],"names":["React","Col","Row","connect","AccountType","LocationType","BaseReactComponent","CustomTextControl","DatePickerControl","Form","FormElement","FormValidator","SelectControl","getUserAccountType","ComponentHeader","getAllLocationApi","getAllAccounts","getAllVehiclesDropdownApi","ReactDOM","format","addUpdateCustomerApi","AddEditCustomer","constructor","props","handleSave","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onValidSubmit","data","URLSearchParams","name","phone","state","city","orderId","vehicleId","orderDate","dealer","email","orderDateString","append","history","push","userAccountType","editData","location","editId","id","billing_email","billing_contact","vehicle_inventory","extra_information","state_id","city_id","stateList","cityList","vehicleOptions","componentDidMount","STATE","CITY","DEALER","render","goBack","el","linkState","validate","isRequired","message","type","settings","placeholder","isEmail","isPhone","options","onChangeCallback","setState","stateId","noOptionCustom","onBlur","dealerOptions","mapStateToProps","customersState","CustomersState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { AccountType, LocationType } from '../../utils/Constant';\nimport { BaseReactComponent, CustomTextControl, DatePickerControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi } from '../common/Api';\nimport { getAllAccounts, getAllVehiclesDropdownApi } from '../vehicles/Api';\nimport ReactDOM from 'react-dom';\nimport { format } from 'date-fns';\nimport { addUpdateCustomerApi } from './Api';\n\nclass AddEditCustomer extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const userAccountType = getUserAccountType();\n    const editData = props.location.state ? props.location.state.editData : null;\n    // console.log('editData', editData);\n    this.state = {\n      editId: editData ? editData.id : \"\",\n      name: editData ? editData.name : \"\",\n      email: editData ? editData.billing_email : \"\",\n      phone: editData ? editData.billing_contact : \"\",\n      orderId: \"\",\n      vehicleId: editData ? editData.vehicle_inventory.id : \"\",\n      orderDate: \"\",\n      dealer: \"\",\n      state: editData ? editData.extra_information.state_id : \"\",\n      city: editData ? editData.extra_information.city_id : \"\",\n      stateList: [],\n      cityList: [],\n      vehicleOptions: [],\n      userAccountType,\n    }\n  }\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.STATE);\n    if (this.state.editId)\n      this.props.getAllLocationApi(this, LocationType.CITY);\n\n    if (this.state.userAccountType < AccountType.DEALER) {\n      getAllAccounts(this, AccountType.DEALER, 'dealerOptions');\n    }\n  }\n  handleSave = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  onValidSubmit = () => {\n\n    const data = new URLSearchParams();\n\n    const {\n      name, phone, state, city, orderId,\n      vehicleId, orderDate,\n      dealer, email,\n    } = this.state;\n\n    const orderDateString = format(orderDate, 'dd-MM-yyyy');\n\n    data.append('customer_email', email);\n    data.append('customer_name', name);\n    data.append('city_id', city);\n    data.append('state_id', state);\n    data.append('contact_name', name);\n    data.append('contact_number', phone);\n    // data.append('customer_gender', gender);\n    data.append('order_id', orderId);\n    data.append('order_date', orderDateString);\n    data.append('dealer_account_id', dealer);\n    data.append('vehicle_id', vehicleId);\n\n    addUpdateCustomerApi(data, () => {\n      this.props.history.push(\"/customers\");\n    })\n\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.editId ? \"Edit Customer\" : \"Add Customer\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.handleSave}\n          primaryBtnText={\"Save Customer\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onValidSubmit} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"name\")}\n                    label=\"Customer Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"email\")}\n                    label=\"Customer Email\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Email cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isEmail,\n                        message: \"Please enter a valid email\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Email\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"phone\")}\n                    label=\"Contact Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Number cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPhone,\n                        message: \"Please enter a valid number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Number\",\n                      }\n                    }}\n                  />\n                </Col>\n                {/*  </Row>\n              <Row> */}\n                {/* <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"gender\")}\n                    label=\"Select Gender\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Gender cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Gender\",\n                        options: GenderOptions,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.gender);\n                        }\n                      }\n                    }}\n                  />\n                </Col> */}\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"state\")}\n                    label=\"State\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"State cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select State\",\n                        options: this.state.stateList,\n                        onChangeCallback: () => {\n                          this.setState({\n                            city: \"\",\n                            stateId: this.state.state\n                          }, () => {\n                            this.props.getAllLocationApi(this, LocationType.CITY);\n                          })\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"city\")}\n                    label=\"City\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"City cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select City\",\n                        options: this.state.cityList,\n                        noOptionCustom: () => (\"Please select a state first\"),\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.city);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                {/* </Row>\n              <Row> */}\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"orderId\")}\n                    label=\"Order Reference ID\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Order ID cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Order Reference ID\",\n                      }\n                    }}\n                  />\n                </Col>\n                {\n                  this.state.userAccountType < AccountType.DEALER &&\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"dealer\")}\n                      label=\"Dealer\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Dealer cannot be empty\"\n                        },\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Dealer\",\n                          options: this.state.dealerOptions,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.dealer);\n                            getAllVehiclesDropdownApi(this);\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                }\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"vehicleId\")}\n                    label=\"Vehicle Chassis No.\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Chassis number cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Vehicle by Chassis No\",\n                        options: this.state.vehicleOptions,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.vehicleId);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"orderDate\")}\n                    label=\"Order Date\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Order date cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: DatePickerControl,\n                      settings: {\n                        placeholder: \"Select Order Date\",\n                      }\n                    }}\n                  />\n                </Col>\n                {/* </Row>\n              <Row> */}\n\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\nconst mapDispatchToProps = {\n  getAllLocationApi,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditCustomer);"]},"metadata":{},"sourceType":"module"}