{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/vehicles/AddEditVehicle.js\";\nimport React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport { AccountType } from \"../../utils/Constant\";\nimport { BaseReactComponent, Form, CustomTextControl, FormElement, FormValidator, SelectControl } from \"../../utils/form\";\nimport { getUserAccountType } from \"../../utils/ManageToken\";\nimport { ComponentHeader } from \"../common\";\nimport { addUpdateVehicleApi, // getAllAccounts,\ngetAllBatteriesDropdownApi, getAllBikeModelsDropdownApi, getAllIotDropdownApi } from \"./Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditVehicle extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onValidSubmit = () => {\n      let batteryIds = [];\n\n      if (this.state.battery1) {\n        batteryIds.push(this.state.battery1);\n      }\n\n      if (this.state.battery2) {\n        batteryIds.push(this.state.battery2);\n      }\n\n      const data = new URLSearchParams();\n      data.append(\"model_id\", this.state.modelId);\n      data.append(\"chassis_no\", this.state.chassisNumber);\n      data.append(\"motor_no\", this.state.motorNumber);\n      data.append(\"registration_no\", this.state.regNo);\n      data.append(\"name\", this.state.vehicleName);\n\n      if (this.state.iot) {\n        data.append(\"telematics_id\", this.state.iot);\n      }\n\n      data.append(\"battery_ids\", JSON.stringify(batteryIds));\n\n      if (this.state.editId) {\n        data.append(\"vehicle_id\", this.state.editId);\n      }\n\n      addUpdateVehicleApi(data, () => {\n        this.props.history.push(\"/vehicles\");\n      });\n    };\n\n    const userAccountType = getUserAccountType();\n    const editData = props.location.state ? props.location.state.editData : {};\n    console.log(\"editData\", editData);\n    this.state = {\n      editId: editData.id || \"\",\n      bikeModelOptions: [],\n      iotOptions: [],\n      batteryOptions: [],\n      regNo: editData.registrationNo || \"\",\n      vehicleName: editData.name || \"\",\n      motorNumber: editData.motorNo || \"\",\n      modelId: editData.modelInfo ? editData.modelInfo.id : \"\",\n      chassisNumber: editData.chassisNo || \"\",\n      iot: editData.attachedTelematics ? editData.attachedTelematics.id : \"\",\n      battery1: editData.attachedBatteries ? editData.attachedBatteries[0].id : \"\",\n      battery2: editData.attachedBatteries && editData.attachedBatteries[1] ? editData.attachedBatteries[1].id : \"\",\n      showBattery2: editData.attachedBatteries && editData.attachedBatteries[1] ? true : false,\n      isOem: userAccountType === AccountType.OEM\n    };\n  }\n\n  componentDidMount() {\n    getAllBikeModelsDropdownApi(this);\n    getAllBatteriesDropdownApi(this);\n    getAllIotDropdownApi(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: `${this.state.editId ? \"Edit\" : \"Add\"} Vehicle`,\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.handleSave,\n        primaryBtnText: \"Save Vehicle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onValidSubmit,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"vehicleName\"),\n                  label: \"Vehicle Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Vehicle name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Vehicle Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"regNo\"),\n                  label: \"Registration Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Registration number cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Registration Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"motorNumber\"),\n                  label: \"Motor Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Motor number cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Motor Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"chassisNumber\"),\n                  label: \"Chassis Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Chassis number cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Chassis Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"modelId\"),\n                  label: \"Model Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Model name cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Model Name\",\n                      options: this.state.bikeModelOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: () => {\n                        const selectedModel = this.state.bikeModelOptions.find(item => item.value === this.state.modelId);\n                        this.setState({\n                          showBattery2: selectedModel.noOfBatteries === 2\n                        });\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"iot\"),\n                  label: \"IOT\",\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Iot\",\n                      options: this.state.iotOptions,\n                      multiple: false,\n                      searchable: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"battery1\"),\n                  label: \"Battery 1\",\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Battery\",\n                      options: this.state.batteryOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.battery1);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this), this.state.showBattery2 && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"battery2\"),\n                  label: \"Battery 2\",\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Battery\",\n                      options: this.state.batteryOptions,\n                      multiple: false,\n                      searchable: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  vehiclesState: state.VehiclesState\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditVehicle);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/vehicles/AddEditVehicle.js"],"names":["React","Col","Row","ReactDOM","connect","AccountType","BaseReactComponent","Form","CustomTextControl","FormElement","FormValidator","SelectControl","getUserAccountType","ComponentHeader","addUpdateVehicleApi","getAllBatteriesDropdownApi","getAllBikeModelsDropdownApi","getAllIotDropdownApi","AddEditVehicle","constructor","props","handleSave","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onValidSubmit","batteryIds","state","battery1","push","battery2","data","URLSearchParams","append","modelId","chassisNumber","motorNumber","regNo","vehicleName","iot","JSON","stringify","editId","history","userAccountType","editData","location","console","log","id","bikeModelOptions","iotOptions","batteryOptions","registrationNo","name","motorNo","modelInfo","chassisNo","attachedTelematics","attachedBatteries","showBattery2","isOem","OEM","componentDidMount","render","goBack","el","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","selectedModel","find","item","value","setState","noOfBatteries","onBlur","mapStateToProps","vehiclesState","VehiclesState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport { AccountType } from \"../../utils/Constant\";\nimport {\n  BaseReactComponent,\n  Form,\n  CustomTextControl,\n  FormElement,\n  FormValidator,\n  SelectControl,\n} from \"../../utils/form\";\nimport { getUserAccountType } from \"../../utils/ManageToken\";\nimport { ComponentHeader } from \"../common\";\nimport {\n  addUpdateVehicleApi,\n  // getAllAccounts,\n  getAllBatteriesDropdownApi,\n  getAllBikeModelsDropdownApi,\n  getAllIotDropdownApi,\n} from \"./Api\";\nclass AddEditVehicle extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const userAccountType = getUserAccountType();\n    const editData = props.location.state ? props.location.state.editData : {};\n    console.log(\"editData\", editData)\n    this.state = {\n      editId: editData.id || \"\",\n      bikeModelOptions: [],\n      iotOptions: [],\n      batteryOptions: [],\n      regNo: editData.registrationNo || \"\",\n      vehicleName: editData.name || \"\",\n      motorNumber: editData.motorNo || \"\",\n      modelId: editData.modelInfo ? editData.modelInfo.id : \"\",\n      chassisNumber: editData.chassisNo || \"\",\n      iot: editData.attachedTelematics ? editData.attachedTelematics.id : \"\",\n      battery1: editData.attachedBatteries\n        ? editData.attachedBatteries[0].id\n        : \"\",\n      battery2:\n        editData.attachedBatteries && editData.attachedBatteries[1]\n          ? editData.attachedBatteries[1].id\n          : \"\",\n      showBattery2:\n        editData.attachedBatteries && editData.attachedBatteries[1]\n          ? true\n          : false,\n      isOem: userAccountType === AccountType.OEM,\n    };\n  }\n  componentDidMount() {\n    getAllBikeModelsDropdownApi(this);\n    getAllBatteriesDropdownApi(this);\n    getAllIotDropdownApi(this);\n  }\n  handleSave = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    );\n  };\n  onValidSubmit = () => {\n    let batteryIds = [];\n    if (this.state.battery1) {\n      batteryIds.push(this.state.battery1);\n    }\n    if (this.state.battery2) {\n      batteryIds.push(this.state.battery2);\n    }\n    const data = new URLSearchParams();\n    data.append(\"model_id\", this.state.modelId);\n    data.append(\"chassis_no\", this.state.chassisNumber);\n    data.append(\"motor_no\", this.state.motorNumber);\n    data.append(\"registration_no\", this.state.regNo);\n    data.append(\"name\", this.state.vehicleName);\n    if (this.state.iot) {\n      data.append(\"telematics_id\", this.state.iot);\n    }\n    data.append(\"battery_ids\", JSON.stringify(batteryIds));\n    if (this.state.editId) {\n      data.append(\"vehicle_id\", this.state.editId);\n    }\n\n    addUpdateVehicleApi(data, () => {\n      this.props.history.push(\"/vehicles\");\n    });\n  };\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={`${this.state.editId ? \"Edit\" : \"Add\"} Vehicle`}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.handleSave}\n          primaryBtnText={\"Save Vehicle\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          <div className=\"content\">\n            <Form\n              onValidSubmit={this.onValidSubmit}\n              ref={(el) => (this.form = el)}\n            >\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"vehicleName\")}\n                    label=\"Vehicle Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Vehicle name cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Vehicle Name\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"regNo\")}\n                    label=\"Registration Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Registration number cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Registration Number\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"motorNumber\")}\n                    label=\"Motor Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Motor number cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Motor Number\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"chassisNumber\")}\n                    label=\"Chassis Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Chassis number cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Chassis Number\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"modelId\")}\n                    label=\"Model Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Model name cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Model Name\",\n                        options: this.state.bikeModelOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: () => {\n                          const selectedModel =\n                            this.state.bikeModelOptions.find(\n                              (item) => item.value === this.state.modelId\n                            );\n                          this.setState({\n                            showBattery2: selectedModel.noOfBatteries === 2,\n                          });\n                        },\n                      },\n                    }}\n                  />\n                </Col>\n\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"iot\")}\n                    label=\"IOT\"\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Iot\",\n                        options: this.state.iotOptions,\n                        multiple: false,\n                        searchable: true,\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"battery1\")}\n                    label=\"Battery 1\"\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Battery\",\n                        options: this.state.batteryOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.battery1);\n                        },\n                      },\n                    }}\n                  />\n                </Col>\n                {this.state.showBattery2 && (\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"battery2\")}\n                      label=\"Battery 2\"\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Battery\",\n                          options: this.state.batteryOptions,\n                          multiple: false,\n                          searchable: true,\n                        },\n                      }}\n                    />\n                  </Col>\n                )}\n                {/* {this.props.isEdit && (\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"regNo\")}\n                      label=\"Registration Number\"\n                      required\n                      disabled\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Registration number cannot be empty\",\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Registration Number\",\n                        },\n                      }}\n                    />\n                  </Col>\n                )} */}\n              </Row>\n            </Form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  vehiclesState: state.VehiclesState,\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditVehicle);\n"]},"metadata":{},"sourceType":"module"}