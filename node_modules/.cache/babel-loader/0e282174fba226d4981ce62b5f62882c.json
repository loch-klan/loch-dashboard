{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/login/Login.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator } from '../../utils/form';\nimport { deleteToken } from '../../utils/ManageToken';\nimport ForgotPassword from '../common/ForgotPassword';\nimport { loginApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onValidSubmit = () => {\n      const data = new URLSearchParams();\n      data.append('email', this.state.email);\n      data.append('password', this.state.password);\n      loginApi(this, data);\n    };\n\n    this.openCloseForgotPasswordModal = () => {\n      this.setState({\n        forgotPassword: !this.state.forgotPassword\n      });\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      forgotPassword: false\n    };\n  }\n\n  componentDidMount() {\n    // DELETE TOKEN AND OTHER DETAILS ON COMPONENT LOAD.\n    deleteToken();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-wrapper\",\n      children: [this.state.forgotPassword && /*#__PURE__*/_jsxDEV(ForgotPassword, {\n        show: this.state.forgotPassword,\n        handleClose: this.openCloseForgotPasswordModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"red-hat-display-bold f-s-24\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onValidSubmit: this.onValidSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormElement, {\n            valueLink: this.linkState(this, \"email\"),\n            label: \"Email Address\",\n            required: true,\n            validations: [{\n              validate: FormValidator.isRequired,\n              message: \"Field cannot be empty\"\n            }, {\n              validate: FormValidator.isEmail,\n              message: \"Email is invalid\"\n            }],\n            control: {\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Email Address\"\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n            valueLink: this.linkState(this, \"password\"),\n            label: \"Password\",\n            required: true,\n            validations: [{\n              validate: FormValidator.isRequired,\n              message: \"Field cannot be empty\"\n            }],\n            control: {\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Password\",\n                type: \"password\"\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forgot-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"red-hat-display-medium\",\n              style: {\n                cursor: \"pointer\"\n              },\n              onClick: this.openCloseForgotPasswordModal,\n              children: \"Forgot Password?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"submit-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n              customClass: \"btn black-btn\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  loginState: state.LoginState\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/login/Login.js"],"names":["React","connect","BaseReactComponent","CustomTextControl","Form","FormElement","FormSubmitButton","FormValidator","deleteToken","ForgotPassword","loginApi","Login","constructor","props","onValidSubmit","data","URLSearchParams","append","state","email","password","openCloseForgotPasswordModal","setState","forgotPassword","componentDidMount","render","linkState","validate","isRequired","message","isEmail","type","settings","placeholder","cursor","mapStateToProps","loginState","LoginState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator } from '../../utils/form';\nimport { deleteToken } from '../../utils/ManageToken';\nimport ForgotPassword from '../common/ForgotPassword';\nimport { loginApi } from './Api';\n\nclass Login extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      forgotPassword: false,\n    }\n  }\n\n  componentDidMount() {\n    // DELETE TOKEN AND OTHER DETAILS ON COMPONENT LOAD.\n    deleteToken();\n  }\n\n  onValidSubmit = () => {\n    const data = new URLSearchParams();\n    data.append('email', this.state.email);\n    data.append('password', this.state.password);\n    loginApi(this, data)\n  }\n\n  openCloseForgotPasswordModal = () => {\n    this.setState({\n      forgotPassword: !this.state.forgotPassword\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"login-wrapper\">\n        {\n          this.state.forgotPassword &&\n          <ForgotPassword\n            show={this.state.forgotPassword}\n            handleClose={this.openCloseForgotPasswordModal}\n          />\n        }\n        <div className=\"login-content\">\n          <h1 className=\"red-hat-display-bold f-s-24\">Login</h1>\n          <Form onValidSubmit={this.onValidSubmit}>\n            <FormElement\n              valueLink={this.linkState(this, \"email\")}\n              label=\"Email Address\"\n              required\n              validations={[\n                {\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                },\n                {\n                  validate: FormValidator.isEmail,\n                  message: \"Email is invalid\"\n                }\n              ]}\n              control={{\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Email Address\",\n                }\n              }}\n            />\n            <FormElement\n              valueLink={this.linkState(this, \"password\")}\n              label=\"Password\"\n              required\n              validations={[\n                {\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }\n              ]}\n              control={{\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Password\",\n                  type: \"password\"\n                }\n              }}\n            />\n            <div className=\"forgot-wrapper\">\n              {/* <Link to={'/'} className=\"red-hat-display-medium\">forgot password?</Link> */}\n              <p className=\"red-hat-display-medium\" style={{ cursor: \"pointer\" }} onClick={this.openCloseForgotPasswordModal}>\n                Forgot Password?\n              </p>\n            </div>\n            <div className=\"submit-wrapper\">\n              <FormSubmitButton customClass=\"btn black-btn\">Login</FormSubmitButton>\n            </div>\n          </Form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  loginState: state.LoginState\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}