{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/battery/AddEditBattery.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { GenderOptions, ModelName } from '../../utils/Constant';\nimport { BaseReactComponent, Form, CustomTextControl, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { addUpdateBatteryApi, getBatteryModelApi } from './Api';\nimport { getIotApi } from '../iot/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditBattery extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      const data = new URLSearchParams();\n      data.append(\"model_id\", this.state.batteryModel);\n      data.append(\"serial_no\", this.state.serialNo);\n      data.append(\"telematics_id\", this.state.iotId);\n      if (this.state.batteryId) data.append(\"battery_id\", this.state.batteryId);\n      addUpdateBatteryApi(data, () => this.props.history.goBack());\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    const _data = props.location.state ? props.location.state.data : null;\n\n    this.state = {\n      batteryId: _data ? _data.id : \"\",\n      batteryModel: _data ? _data.modelInfo.id : \"\",\n      serialNo: _data ? _data.serialNo : \"\",\n      iotId: _data && _data.attachedTelematics ? _data.attachedTelematics.id : \"\",\n      purchaseDate: \"\",\n      batteryModalOptions: [],\n      iotModalOptions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getBatteryModelApi(this);\n    this.props.getIotApi(this);\n  }\n\n  render() {\n    console.log('this.props', this.props);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.batteryId ? \"Edit Battery\" : \"Add Battery\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save Battery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.handleSave,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"batteryModel\"),\n                  label: \"Battery Model\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Battery model name cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Battery Model\",\n                      options: this.state.batteryModalOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.batteryModel);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"serialNo\"),\n                  label: \"Battery Serial Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Battery serial number cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Battery Serial Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"iotId\"),\n                  label: \"IOT\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Iot cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Iot\",\n                      options: this.state.iotModalOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.iotId);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this), this.state.modelName === ModelName.RUGGEDG2.toString() && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"battery2\"),\n                  label: \"Battery 2\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Battery 2 cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Battery\",\n                      options: GenderOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.battery2);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this), this.props.isEdit && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"regNo\"),\n                  label: \"Registration Number\",\n                  required: true,\n                  disabled: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Registration number cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Registration Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  batteryState: state.BatteryState\n});\n\nconst mapDispatchToProps = {\n  getBatteryModelApi,\n  getIotApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBattery);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/battery/AddEditBattery.js"],"names":["React","Col","Row","connect","GenderOptions","ModelName","BaseReactComponent","Form","CustomTextControl","FormElement","FormValidator","SelectControl","ComponentHeader","ReactDOM","addUpdateBatteryApi","getBatteryModelApi","getIotApi","AddEditBattery","constructor","props","handleSave","data","URLSearchParams","append","state","batteryModel","serialNo","iotId","batteryId","history","goBack","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","location","id","modelInfo","attachedTelematics","purchaseDate","batteryModalOptions","iotModalOptions","componentDidMount","render","console","log","el","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","modelName","RUGGEDG2","toString","battery2","isEdit","mapStateToProps","batteryState","BatteryState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { GenderOptions, ModelName } from '../../utils/Constant';\nimport { BaseReactComponent, Form, CustomTextControl, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { addUpdateBatteryApi, getBatteryModelApi } from './Api';\nimport { getIotApi } from '../iot/Api';\nclass AddEditBattery extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const data = props.location.state ? props.location.state.data : null;\n    this.state = {\n      batteryId: data ? data.id : \"\",\n      batteryModel: data ? data.modelInfo.id : \"\",\n      serialNo: data ? data.serialNo : \"\",\n      iotId: data && data.attachedTelematics ? data.attachedTelematics.id : \"\",\n      purchaseDate: \"\",\n      batteryModalOptions: [],\n      iotModalOptions: []\n    }\n  }\n  componentDidMount() {\n    this.props.getBatteryModelApi(this);\n    this.props.getIotApi(this);\n  }\n\n  handleSave = () => {\n    const data = new URLSearchParams();\n    data.append(\"model_id\", this.state.batteryModel);\n    data.append(\"serial_no\", this.state.serialNo);\n    data.append(\"telematics_id\", this.state.iotId);\n\n    if (this.state.batteryId)\n      data.append(\"battery_id\", this.state.batteryId);\n\n    addUpdateBatteryApi(data, () => this.props.history.goBack());\n  }\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  render() {\n    console.log('this.props', this.props);\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.batteryId ? \"Edit Battery\" : \"Add Battery\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save Battery\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          <div className=\"content\">\n            <Form onValidSubmit={this.handleSave} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"batteryModel\")}\n                    label=\"Battery Model\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Battery model name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Battery Model\",\n                        options: this.state.batteryModalOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.batteryModel);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"serialNo\")}\n                    label=\"Battery Serial Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Battery serial number cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Battery Serial Number\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"iotId\")}\n                    label=\"IOT\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Iot cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Iot\",\n                        options: this.state.iotModalOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.iotId);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                {/* <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"purchaseDate\")}\n                    label=\"Purchase Date\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Purchase date cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: DatePickerControl,\n                      settings: {\n                        placeholder: \"Select Purchase Date\",\n                      }\n                    }}\n                  />\n                </Col> */}\n                {\n                  this.state.modelName === ModelName.RUGGEDG2.toString() &&\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"battery2\")}\n                      label=\"Battery 2\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Battery 2 cannot be empty\"\n                        },\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Battery\",\n                          options: GenderOptions,\n                          multiple: false,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.battery2);\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                }\n                {\n                  this.props.isEdit &&\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"regNo\")}\n                      label=\"Registration Number\"\n                      required\n                      disabled\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Registration number cannot be empty\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Registration Number\",\n                        }\n                      }}\n                    />\n                  </Col>\n                }\n              </Row>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  batteryState: state.BatteryState\n});\nconst mapDispatchToProps = {\n  getBatteryModelApi,\n  getIotApi\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBattery);"]},"metadata":{},"sourceType":"module"}