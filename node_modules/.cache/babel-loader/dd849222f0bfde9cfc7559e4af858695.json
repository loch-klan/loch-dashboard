{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/franchise/FranchiseLocation.js\";\nimport React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport CustomTable from \"../../utils/commonComponent/CustomTable\";\nimport { AccountType, PermissionList, START_PAGE } from \"../../utils/Constant\";\nimport { getAssignedPermission, replaceHistory } from \"../../utils/ReusableFunctions\";\nimport { ComponentHeader } from \"../common\";\nimport ActionDropdown from \"../common/_utils/ActionDropdown\";\nimport { getAllFranchiseLocationApi, getAllFranchiseApi } from \"./Api\";\nimport { BaseReactComponent, FormElement, FormValidator, SelectControl, Form } from \"../../utils/form\";\nimport ShowQRCode from \"./_utils/ShowQRCode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass FranchiseLocation extends BaseReactComponent {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      this.props.getAllFranchiseLocationApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      }, () => {\n        if (currentPage === START_PAGE) {\n          this.props.getAllFranchiseLocationApi(this, START_PAGE);\n        }\n      });\n      replaceHistory(this.props.history, START_PAGE + 1);\n    };\n\n    this.handleAddEditFranchiseLocation = function () {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      if (data) {\n        _this.props.history.push({\n          pathname: `/franchise-location/edit-franchise-location/${data.franchise_account_id}`,\n          state: {\n            data: data\n          }\n        });\n      } else {\n        _this.props.history.push(\"/franchise-location/add-franchise-location\");\n      }\n    };\n\n    this.handleViewFranchiseLocation = function () {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      _this.props.history.push({\n        pathname: `/franchise-location/view-franchise-location/${data.id}`\n      });\n    };\n\n    this.handleViewQRCode = function () {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      _this.setState({\n        franchiseData: data ? {\n          franchise_location_id: data.id,\n          latitude: data.location_details.geometry.location.lat,\n          longitude: data.location_details.geometry.location.lng\n        } : \"\",\n        showQRCode: !_this.state.showQRCode\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const userDetails = JSON.parse(localStorage.getItem(\"userDetails\"));\n    this.state = {\n      userDetails,\n      data: [],\n      franchiseOptionsList: [],\n      franchiseId: \"\",\n      conditions: userDetails.user_account_type !== AccountType.COMPANY ? [{\n        key: \"SEARCH_BY_FRANCHISE_ID\",\n        value: userDetails.id\n      }] : [],\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      showQRCode: false,\n      franchiseData: \"\"\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.userDetails.user_account_type !== AccountType.COMPANY) {\n      this.props.getAllFranchiseLocationApi(this);\n    } else {\n      this.props.getAllFranchiseApi(this, -1);\n    }\n\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get(\"p\"), 10) || 1;\n    const search = params.get(\"search\") || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllFranchiseLocationApi(this);\n      } else {\n        this.props.getAllFranchiseLocationApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      data,\n      page,\n      totalPage,\n      userDetails,\n      franchiseOptionsList,\n      showQRCode,\n      franchiseData\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showQRCode && /*#__PURE__*/_jsxDEV(ShowQRCode, {\n        show: showQRCode,\n        handleClose: () => this.handleViewQRCode(),\n        value: franchiseData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Franchise Location\",\n        title: \"Franchise Location\",\n        isFilter: false,\n        isPrimaryBtn: () => this.handleAddEditFranchiseLocation(),\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_FRANCHISE_LOCATION) ? \"+ Add Franchise Location\" : \"\" // isSearch={true}\n        // placeholder={\"Search Franchise Location\"}\n        // onChangeMethod={this.onChangeMethod}\n        // clearSearch={() => this.clearSearch(page || START_PAGE)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), userDetails.user_account_type === AccountType.COMPANY && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onValidSubmit: this.onValidSubmit,\n          ref: el => this.form = el,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"franchiseId\"),\n                label: \"Select Franchise\",\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Franchise cannot be empty\"\n                }],\n                control: {\n                  type: SelectControl,\n                  settings: {\n                    placeholder: \"Select Franchise\",\n                    options: franchiseOptionsList,\n                    multiple: false,\n                    searchable: true,\n                    onChangeCallback: onBlur => {\n                      this.setState({\n                        conditions: [{\n                          key: \"SEARCH_BY_FRANCHISE_ID\",\n                          value: this.state.franchiseId\n                        }]\n                      }, () => {\n                        this.props.getAllFranchiseLocationApi(this);\n                      });\n                      onBlur(this.state.franchiseId);\n                      console.log(\"Hello world!\");\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: data,\n          columnList: [// {\n          //     coumnWidth: 200,\n          //     labelName: \"Franchise Name\",\n          //     dataKey: \"franchise_account_id\",\n          //     className: \"red-hat-display-bold\",\n          //     isCell: true,\n          //     cell: (rowData, dataKey) => {\n          //         if (dataKey === \"franchise_account_id\") {\n          //             return franchiseOptionsList.map((item)=>{ if (item.value === rowData.franchise_account_id){return item.label} else {return \"\"}})\n          //           }\n          //     }\n          // },\n          {\n            coumnWidth: 200,\n            labelName: \"Franchise Area\",\n            dataKey: \"area_details\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"area_details\") {\n                return rowData.area_details.name || \"\";\n              }\n            }\n          },\n          /* {\n            coumnWidth: 250,\n            labelName: \"Contact\",\n            dataKey: \"mobile\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"mobile\") {\n                return rowData.mobile\n              }\n            }\n          }, */\n          {\n            coumnWidth: 550,\n            labelName: \"Location\",\n            dataKey: \"location_details\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"location_details\") {\n                return rowData.location_details ? rowData.location_details.formatted_address : \"NA\";\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [];\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_FRANCHISE_LOCATION)) {\n                  menuItem.push({\n                    title: \"Edit\",\n                    type: \"event\",\n                    handleClick: () => this.handleAddEditFranchiseLocation(rowData)\n                  });\n                }\n\n                menuItem.push({\n                  title: \"View\",\n                  type: \"event\",\n                  handleClick: () => this.handleViewFranchiseLocation(rowData)\n                });\n                menuItem.push({\n                  title: \"View QR Code\",\n                  type: \"event\",\n                  handleClick: () => this.handleViewQRCode(rowData)\n                });\n                return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                  menuItem: menuItem\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 28\n                }, this);\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Franchise Location list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  franchiseState: state.FranchiseState\n});\n\nconst mapDispatchToProps = {\n  getAllFranchiseLocationApi,\n  getAllFranchiseApi\n};\nFranchiseLocation.propTypes = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(FranchiseLocation);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/franchise/FranchiseLocation.js"],"names":["React","Col","Row","connect","CustomTable","AccountType","PermissionList","START_PAGE","getAssignedPermission","replaceHistory","ComponentHeader","ActionDropdown","getAllFranchiseLocationApi","getAllFranchiseApi","BaseReactComponent","FormElement","FormValidator","SelectControl","Form","ShowQRCode","FranchiseLocation","constructor","props","onChangeMethod","value","setState","searchValue","conditions","key","search","history","clearSearch","currentPage","handleAddEditFranchiseLocation","data","push","pathname","franchise_account_id","state","handleViewFranchiseLocation","id","handleViewQRCode","franchiseData","franchise_location_id","latitude","location_details","geometry","location","lat","longitude","lng","showQRCode","params","URLSearchParams","page","get","userDetails","JSON","parse","localStorage","getItem","franchiseOptionsList","franchiseId","user_account_type","COMPANY","parseInt","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","permissionList","includes","ADD_UPDATE_FRANCHISE_LOCATION","onValidSubmit","el","form","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","console","log","coumnWidth","labelName","dataKey","className","isCell","cell","rowData","area_details","name","formatted_address","menuItem","title","handleClick","mapStateToProps","franchiseState","FranchiseState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Col, Row } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport CustomTable from \"../../utils/commonComponent/CustomTable\"\nimport { AccountType, PermissionList, START_PAGE } from \"../../utils/Constant\"\nimport {\n  getAssignedPermission,\n  replaceHistory\n} from \"../../utils/ReusableFunctions\"\nimport { ComponentHeader } from \"../common\"\nimport ActionDropdown from \"../common/_utils/ActionDropdown\"\nimport { getAllFranchiseLocationApi, getAllFranchiseApi } from \"./Api\"\nimport {\n  BaseReactComponent,\n  FormElement,\n  FormValidator,\n  SelectControl,\n  Form\n} from \"../../utils/form\"\nimport ShowQRCode from \"./_utils/ShowQRCode\"\n\nclass FranchiseLocation extends BaseReactComponent {\n  constructor(props) {\n    super(props)\n    const search = props.location.search\n    const params = new URLSearchParams(search)\n    const page = params.get(\"p\")\n    const userDetails = JSON.parse(localStorage.getItem(\"userDetails\"))\n    this.state = {\n      userDetails,\n      data: [],\n      franchiseOptionsList: [],\n      franchiseId: \"\",\n      conditions:\n        userDetails.user_account_type !== AccountType.COMPANY\n          ? [{ key: \"SEARCH_BY_FRANCHISE_ID\", value: userDetails.id }]\n          : [],\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      showQRCode: false,\n      franchiseData: \"\"\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.userDetails.user_account_type !== AccountType.COMPANY) {\n      this.props.getAllFranchiseLocationApi(this)\n    } else {\n      this.props.getAllFranchiseApi(this, -1)\n    }\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search)\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1\n\n    const params = new URLSearchParams(this.props.location.search)\n    const page = parseInt(params.get(\"p\"), 10) || 1\n    const search = params.get(\"search\") || \"\"\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllFranchiseLocationApi(this)\n      } else {\n        this.props.getAllFranchiseLocationApi(this, page - 1)\n      }\n    }\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({\n      searchValue: value,\n      conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n    })\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    this.props.getAllFranchiseLocationApi(this, START_PAGE)\n  }\n\n  clearSearch = (currentPage) => {\n    this.setState({ searchValue: \"\", conditions: [] }, () => {\n      if (currentPage === START_PAGE) {\n        this.props.getAllFranchiseLocationApi(this, START_PAGE)\n      }\n    })\n\n    replaceHistory(this.props.history, START_PAGE + 1)\n  }\n\n  handleAddEditFranchiseLocation = (data = \"\") => {\n    if (data) {\n      this.props.history.push({\n        pathname: `/franchise-location/edit-franchise-location/${data.franchise_account_id}`,\n        state: { data: data }\n      })\n    } else {\n      this.props.history.push(\"/franchise-location/add-franchise-location\")\n    }\n  }\n\n  handleViewFranchiseLocation = (data = \"\") => {\n    this.props.history.push({\n      pathname: `/franchise-location/view-franchise-location/${data.id}`\n    })\n  }\n\n  handleViewQRCode = (data = \"\") => {\n    this.setState({\n      franchiseData: data\n        ? {\n            franchise_location_id: data.id,\n            latitude: data.location_details.geometry.location.lat,\n            longitude: data.location_details.geometry.location.lng\n          }\n        : \"\",\n      showQRCode: !this.state.showQRCode\n    })\n  }\n\n  render() {\n    const {\n      data,\n      page,\n      totalPage,\n      userDetails,\n      franchiseOptionsList,\n      showQRCode,\n      franchiseData\n    } = this.state\n    const permissionList = getAssignedPermission()\n    return (\n      <>\n        {showQRCode && (\n          <ShowQRCode\n            show={showQRCode}\n            handleClose={() => this.handleViewQRCode()}\n            value={franchiseData}\n          />\n        )}\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Franchise Location\"}\n          title={\"Franchise Location\"}\n          isFilter={false}\n          isPrimaryBtn={() => this.handleAddEditFranchiseLocation()}\n          primaryBtnText={\n            permissionList.includes(\n              PermissionList.ADD_UPDATE_FRANCHISE_LOCATION\n            )\n              ? \"+ Add Franchise Location\"\n              : \"\"\n          }\n          // isSearch={true}\n          // placeholder={\"Search Franchise Location\"}\n          // onChangeMethod={this.onChangeMethod}\n          // clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        {userDetails.user_account_type === AccountType.COMPANY && (\n          <div className=\"state-wrapper\">\n            <Form\n              onValidSubmit={this.onValidSubmit}\n              ref={(el) => (this.form = el)}\n            >\n              <Row>\n                <Col sm={6}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"franchiseId\")}\n                    label=\"Select Franchise\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Franchise cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Franchise\",\n                        options: franchiseOptionsList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          this.setState(\n                            {\n                              conditions: [\n                                {\n                                  key: \"SEARCH_BY_FRANCHISE_ID\",\n                                  value: this.state.franchiseId\n                                }\n                              ]\n                            },\n                            () => {\n                              this.props.getAllFranchiseLocationApi(this)\n                            }\n                          )\n\n                          onBlur(this.state.franchiseId)\n                          console.log(\"Hello world!\")\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n        )}\n\n        <div className=\"custom-table-wrapper\">\n          <CustomTable\n            tableData={data}\n            columnList={[\n              // {\n              //     coumnWidth: 200,\n              //     labelName: \"Franchise Name\",\n              //     dataKey: \"franchise_account_id\",\n              //     className: \"red-hat-display-bold\",\n              //     isCell: true,\n              //     cell: (rowData, dataKey) => {\n              //         if (dataKey === \"franchise_account_id\") {\n              //             return franchiseOptionsList.map((item)=>{ if (item.value === rowData.franchise_account_id){return item.label} else {return \"\"}})\n              //           }\n              //     }\n              // },\n              {\n                coumnWidth: 200,\n                labelName: \"Franchise Area\",\n                dataKey: \"area_details\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"area_details\") {\n                    return rowData.area_details.name || \"\"\n                  }\n                }\n              },\n              /* {\n                coumnWidth: 250,\n                labelName: \"Contact\",\n                dataKey: \"mobile\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"mobile\") {\n                    return rowData.mobile\n                  }\n                }\n              }, */\n              {\n                coumnWidth: 550,\n                labelName: \"Location\",\n                dataKey: \"location_details\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"location_details\") {\n                    return rowData.location_details\n                      ? rowData.location_details.formatted_address\n                      : \"NA\"\n                  }\n                }\n              },\n\n              {\n                coumnWidth: 50,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = []\n                    if (\n                      permissionList.includes(\n                        PermissionList.ADD_UPDATE_FRANCHISE_LOCATION\n                      )\n                    ) {\n                      menuItem.push({\n                        title: \"Edit\",\n                        type: \"event\",\n                        handleClick: () =>\n                          this.handleAddEditFranchiseLocation(rowData)\n                      })\n                    }\n                    menuItem.push({\n                      title: \"View\",\n                      type: \"event\",\n                      handleClick: () =>\n                        this.handleViewFranchiseLocation(rowData)\n                    })\n                    menuItem.push({\n                      title: \"View QR Code\",\n                      type: \"event\",\n                      handleClick: () => this.handleViewQRCode(rowData)\n                    })\n\n                    return <ActionDropdown menuItem={menuItem} />\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"Franchise Location list is empty\"}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  franchiseState: state.FranchiseState\n})\nconst mapDispatchToProps = {\n  getAllFranchiseLocationApi,\n  getAllFranchiseApi\n}\nFranchiseLocation.propTypes = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FranchiseLocation)\n"]},"metadata":{},"sourceType":"module"}