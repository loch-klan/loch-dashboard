{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/userManagement/Dealer.js\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { AccountType, START_PAGE } from '../../utils/Constant';\nimport { replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common'; // import ActionDropdown from '../common/_utils/ActionDropdown';\n\nimport { getAllAccountApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\n\nclass Dealer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddDealer = () => {\n      this.props.history.push(\"/user-management/dealer/add-dealer\");\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          \"key\": \"SEARCH_BY_TYPE\",\n          \"value\": AccountType.DEALER,\n          \"context\": null\n        }, {\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      this.props.getAllAccountApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      console.log('currentPage', currentPage);\n      this.setState({\n        page: currentPage,\n        searchValue: \"\",\n        conditions: [{\n          \"key\": \"SEARCH_BY_TYPE\",\n          \"value\": AccountType.DEALER,\n          \"context\": null\n        }]\n      }, () => {\n        if (currentPage === START_PAGE) {\n          this.props.getAllAccountApi(this, START_PAGE);\n        }\n      });\n      replaceHistory(this.props.history, START_PAGE + 1);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      data: [],\n      conditions: [{\n        \"key\": \"SEARCH_BY_TYPE\",\n        \"value\": AccountType.DEALER,\n        \"context\": null\n      }],\n      page: page ? parseInt(page, 10) : START_PAGE + 1\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllAccountApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllAccountApi(this);\n      } else {\n        this.props.getAllAccountApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      data,\n      page,\n      totalPage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Dealers\",\n        title: \"Dealers\",\n        isFilter: false,\n        isPrimaryBtn: this.handleAddDealer,\n        primaryBtnText: \"+ Add Dealer\",\n        isSearch: true,\n        placeholder: \"Search Dealer\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: data,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Company Name\",\n            dataKey: \"companyName\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"companyName\") {\n                return rowData.name;\n              }\n            }\n          },\n          /* {\n            coumnWidth: 250,\n            labelName: \"Dealer Name\",\n            dataKey: \"dealerName\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"dealerName\") {\n                return rowData.dealerName\n              }\n            }\n          },\n          {\n            coumnWidth: 250,\n            labelName: \"Contact Number\",\n            dataKey: \"contactNumber\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"contactNumber\") {\n                return rowData.contactNumber\n              }\n            }\n          }, */\n          {\n            coumnWidth: 250,\n            labelName: \"Email\",\n            dataKey: \"email\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"email\") {\n                return rowData.billing_email;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Location\",\n            dataKey: \"location\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"location\") {\n                return rowData.extra_information.state_details.name + \" - \" + rowData.extra_information.city_details.name;\n              }\n            }\n          }\n          /* {\n            coumnWidth: 250,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [\n                  {\n                    title: \"View Details\",\n                    type: \"link\",\n                    linkUrl: `view-details`\n                  },\n                  {\n                    title: \"Raise Service Request\",\n                    type: \"link\",\n                    linkUrl: `view-details`\n                  },\n                  {\n                    title: \"Allocate Vehicle\",\n                    type: \"link\",\n                    linkUrl: `view-details`\n                  },\n                ];\n                return (\n                  <ActionDropdown\n                    menuItem={menuItem}\n                  />\n                )\n              }\n            }\n          } */\n          ] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Dealer list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\n\nconst mapDispatchToProps = {\n  getAllAccountApi\n}; // Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dealer));","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/userManagement/Dealer.js"],"names":["React","Component","connect","withRouter","CustomTable","AccountType","START_PAGE","replaceHistory","ComponentHeader","getAllAccountApi","Dealer","constructor","props","handleAddDealer","history","push","onChangeMethod","value","setState","searchValue","conditions","DEALER","key","search","clearSearch","currentPage","console","log","page","location","params","URLSearchParams","get","state","data","parseInt","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","coumnWidth","labelName","dataKey","className","isCell","cell","rowData","name","billing_email","extra_information","state_details","city_details","mapStateToProps","userManagementState","UserManagementState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { AccountType, START_PAGE } from '../../utils/Constant';\nimport { replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\n// import ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllAccountApi } from './Api';\n;\n\n\nclass Dealer extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      data: [],\n      conditions: [{ \"key\": \"SEARCH_BY_TYPE\", \"value\": AccountType.DEALER, \"context\": null }],\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllAccountApi(this)\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllAccountApi(this);\n      } else {\n        this.props.getAllAccountApi(this, page - 1);\n      }\n    }\n  }\n\n  handleAddDealer = () => {\n    this.props.history.push(\"/user-management/dealer/add-dealer\");\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({\n      searchValue: value,\n      conditions: [\n        { \"key\": \"SEARCH_BY_TYPE\", \"value\": AccountType.DEALER, \"context\": null },\n        { key: \"SEARCH_BY_TEXT\", value: value.search }\n      ]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    this.props.getAllAccountApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    console.log('currentPage', currentPage);\n    this.setState({ page: currentPage, searchValue: \"\", conditions: [{ \"key\": \"SEARCH_BY_TYPE\", \"value\": AccountType.DEALER, \"context\": null }] }, () => {\n      if (currentPage === START_PAGE) {\n        this.props.getAllAccountApi(this, START_PAGE);\n      }\n    });\n\n    replaceHistory(this.props.history, START_PAGE + 1)\n  }\n\n  render() {\n    const { data, page, totalPage, } = this.state;\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Dealers\"}\n          title={\"Dealers\"}\n          isFilter={false}\n          isPrimaryBtn={this.handleAddDealer}\n          primaryBtnText={\"+ Add Dealer\"}\n          isSearch={true}\n          placeholder={\"Search Dealer\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={data}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"Company Name\",\n                dataKey: \"companyName\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"companyName\") {\n                    return rowData.name\n                  }\n                }\n              },\n              /* {\n                coumnWidth: 250,\n                labelName: \"Dealer Name\",\n                dataKey: \"dealerName\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"dealerName\") {\n                    return rowData.dealerName\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Contact Number\",\n                dataKey: \"contactNumber\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"contactNumber\") {\n                    return rowData.contactNumber\n                  }\n                }\n              }, */\n              {\n                coumnWidth: 250,\n                labelName: \"Email\",\n                dataKey: \"email\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"email\") {\n                    return rowData.billing_email\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Location\",\n                dataKey: \"location\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"location\") {\n                    return rowData.extra_information.state_details.name + \" - \" + rowData.extra_information.city_details.name\n                  }\n                }\n              },\n              /* {\n                coumnWidth: 250,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [\n                      {\n                        title: \"View Details\",\n                        type: \"link\",\n                        linkUrl: `view-details`\n                      },\n                      {\n                        title: \"Raise Service Request\",\n                        type: \"link\",\n                        linkUrl: `view-details`\n                      },\n                      {\n                        title: \"Allocate Vehicle\",\n                        type: \"link\",\n                        linkUrl: `view-details`\n                      },\n                    ];\n                    return (\n                      <ActionDropdown\n                        menuItem={menuItem}\n                      />\n                    )\n                  }\n                }\n              } */\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"Dealer list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\nconst mapDispatchToProps = {\n  getAllAccountApi\n}\n// Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dealer));"]},"metadata":{},"sourceType":"module"}