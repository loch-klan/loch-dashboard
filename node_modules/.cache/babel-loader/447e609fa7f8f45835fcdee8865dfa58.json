{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/iot/AddEditIot.js\";\nimport React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from \"../../utils/form\";\nimport { ComponentHeader } from \"../common\";\nimport ReactDOM from \"react-dom\";\nimport { addUpdateIotApi, getIotModelApi } from \"./Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditIot extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"model_id\", this.state.modelId);\n      data.append(\"serial_no\", this.state.serialNo);\n      data.append(\"sim_number\", this.state.simNumber);\n      data.append(\"imei_number\", this.state.imeiNo);\n\n      if (this.state.telematicsId) {\n        data.append(\"telematics_id\", this.state.telematicsId);\n      }\n\n      addUpdateIotApi(data, () => this.props.history.goBack());\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    const _data = props.location.state ? props.location.state.data : null;\n\n    this.state = {\n      telematicsId: _data ? _data.id : \"\",\n      isEdit: _data && _data ? true : false,\n      modelId: _data ? _data.modelInfo.id : \"\",\n      serialNo: _data ? _data.serialNo : \"\",\n      iotModalOptions: [],\n      simNumber: _data ? _data.simCardInfo.simcardId : \"\",\n      imeiNo: _data ? _data.imei : \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.getIotModelApi(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.telematicsId ? \"Edit Iot\" : \"Add Iot\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save Iot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onSubmit,\n            ref: el => this.form = el,\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"modelId\"),\n                  label: \"IOT Model\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"IOT model cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Model\",\n                      options: this.state.iotModalOptions,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.modelId);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"serialNo\"),\n                  label: \"IOT Serial Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"IOT serial number cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter IOT Serial Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"simNumber\"),\n                  label: \"Sim Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Sim number cannot be empty\"\n                  }, {\n                    validate: FormValidator.isWithinLength(20, 20),\n                    message: \"Please enter a valid 20 digit SIM number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Sim Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"imeiNo\"),\n                  label: \"IMEI Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"IMEI cannot be empty\"\n                  }, {\n                    validate: FormValidator.isWithinLength(15, 15),\n                    message: \"Please enter a valid 15 digit IMEI number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter IMEI\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  iotState: state.IotState\n});\n\nconst mapDispatchToProps = {\n  getIotModelApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditIot);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/iot/AddEditIot.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomTextControl","Form","FormElement","FormValidator","SelectControl","ComponentHeader","ReactDOM","addUpdateIotApi","getIotModelApi","AddEditIot","constructor","props","onSubmit","data","URLSearchParams","append","state","modelId","serialNo","simNumber","imeiNo","telematicsId","history","goBack","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","location","id","isEdit","modelInfo","iotModalOptions","simCardInfo","simcardId","imei","componentDidMount","render","el","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","isWithinLength","mapStateToProps","iotState","IotState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Col, Row } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport {\n  BaseReactComponent,\n  CustomTextControl,\n  Form,\n  FormElement,\n  FormValidator,\n  SelectControl\n} from \"../../utils/form\"\nimport { ComponentHeader } from \"../common\"\nimport ReactDOM from \"react-dom\"\nimport { addUpdateIotApi, getIotModelApi } from \"./Api\"\n\nclass AddEditIot extends BaseReactComponent {\n  constructor(props) {\n    super(props)\n    const data = props.location.state ? props.location.state.data : null\n    this.state = {\n      telematicsId: data ? data.id : \"\",\n      isEdit: data && data ? true : false,\n      modelId: data ? data.modelInfo.id : \"\",\n      serialNo: data ? data.serialNo : \"\",\n      iotModalOptions: [],\n      simNumber: data ? data.simCardInfo.simcardId : \"\",\n      imeiNo: data ? data.imei : \"\"\n    }\n  }\n  componentDidMount() {\n    this.props.getIotModelApi(this)\n  }\n\n  onSubmit = () => {\n    const data = new URLSearchParams()\n    data.append(\"model_id\", this.state.modelId)\n    data.append(\"serial_no\", this.state.serialNo)\n    data.append(\"sim_number\", this.state.simNumber)\n    data.append(\"imei_number\", this.state.imeiNo)\n    if (this.state.telematicsId) {\n      data.append(\"telematics_id\", this.state.telematicsId)\n    }\n    addUpdateIotApi(data, () => this.props.history.goBack())\n  }\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    )\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.telematicsId ? \"Edit Iot\" : \"Add Iot\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save Iot\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          <div className=\"content\">\n            <Form onValidSubmit={this.onSubmit} ref={(el) => (this.form = el)}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"modelId\")}\n                    label=\"IOT Model\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"IOT model cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Model\",\n                        options: this.state.iotModalOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.modelId)\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"serialNo\")}\n                    label=\"IOT Serial Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"IOT serial number cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter IOT Serial Number\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"simNumber\")}\n                    label=\"Sim Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Sim number cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isWithinLength(20, 20),\n                        message: \"Please enter a valid 20 digit SIM number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Sim Number\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"imeiNo\")}\n                    label=\"IMEI Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"IMEI cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isWithinLength(15, 15),\n                        message: \"Please enter a valid 15 digit IMEI number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter IMEI\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => ({\n  iotState: state.IotState\n})\nconst mapDispatchToProps = {\n  getIotModelApi\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditIot)\n"]},"metadata":{},"sourceType":"module"}