{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/franchise/AddEditFranchise.js\";\nimport React from \"react\";\nimport { Button, Col, Image, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { BaseReactComponent, FileUploadControl, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from \"../../utils/form\";\nimport { ComponentHeader } from \"../common\";\nimport ReactDOM from \"react-dom\";\nimport { getAllRolesApi } from \"../userManagement/Api\";\nimport { AccountType, API_URL, DocType, LocationType } from \"../../utils/Constant\";\nimport { getAllLocationApi } from \"../common/Api\";\nimport { addEditFranchiseApi, getFranchiseByIdApi, updatetFranchiseApi } from \"./Api\";\nimport deleteIcon from \"../../assets/images/delete-icon.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditFranchise extends BaseReactComponent {\n  constructor(props) {\n    super(props); // const editData = props.location.state ? props.location.state.data : null;\n    // console.log(\"editData\", editData);\n\n    this.setFranchiseData = data => {\n      console.log(data, \"data\");\n      let documentDetails = [];\n\n      if (data && data.document_details) {\n        data.document_details.map(item => documentDetails.push({\n          documentName: item.name,\n          document: {\n            imageId: item.attachment_info.id,\n            name: item.attachment_info.name,\n            path: item.attachment_info.url\n          }\n        }));\n      }\n\n      this.setState({\n        id: data.id,\n        accountName: data.legal_name,\n        accountEmail: data.billing_email,\n        accountPhone: data.billing_contact,\n        areaIds: data.extra_information.operational_areas,\n        // revenuePercentage: data.extra_information.revenue_percentage,\n        rentalRevenuePercent: data.extra_information.rental_revenue_percent,\n        cancellationRevenuePercent: data.extra_information.cancellation_revenue_percent,\n        damageRevenuePercent: data.extra_information.damage_revenue_percent,\n        countryId: data.billing_address[0].country_id,\n        stateId: data.billing_address[0].state_id,\n        cityId: data.billing_address[0].city_id,\n        block: data.billing_address[0].block_address,\n        taxRegNumber: data.billing_address[0].tax_reg_number,\n        billingContact: data.billing_address[0].contact_number,\n        billingAddressId: data.billing_address[0].id,\n        // attachment: [\n        //   {\n        //     imageId: data.document_details[0].attachment_info.id,\n        //     path: data.document_details[0].attachment_info.url,\n        //     name: data.document_details[0].attachment_info.name,\n        //   },\n        // ],\n        documentDetails\n      });\n    };\n\n    this.handleSave = () => {\n      const data = new URLSearchParams();\n      data.append(\"account_name\", this.state.accountName);\n      data.append(\"account_email\", this.state.accountEmail);\n      data.append(\"account_contact_number\", this.state.accountPhone);\n\n      if (!this.state.id) {\n        data.append(\"poc_name\", this.state.pocName);\n        data.append(\"poc_number\", this.state.pocNumber);\n        data.append(\"poc_email\", this.state.pocEmail);\n        data.append(\"role_ids\", JSON.stringify(this.state.role));\n      }\n\n      data.append(\"rental_revenue_percent\", this.state.rentalRevenuePercent);\n      data.append(\"cancellation_revenue_percent\", this.state.cancellationRevenuePercent);\n      data.append(\"damage_revenue_percent\", this.state.damageRevenuePercent);\n      data.append(\"operational_areas\", JSON.stringify(this.state.areaIds));\n      data.append(\"billing_address\", JSON.stringify({\n        id: this.state.billingAddressId,\n        country_id: this.state.countryId,\n        state_id: this.state.stateId,\n        city_id: this.state.cityId,\n        block_address: this.state.block,\n        tax_reg_number: this.state.taxRegNumber,\n        contact_name: \"\",\n        contact_number: this.state.billingContact\n      }));\n      let documentDetails = [];\n      this.state.documentDetails.map(doc => {\n        return documentDetails.push({\n          name: doc.documentName,\n          type: DocType.KYC,\n          attachment_id: doc.document.imageId\n        });\n      });\n      data.append(\"document_details\", JSON.stringify(documentDetails));\n\n      if (this.state.id) {\n        data.append(\"franchise_id\", this.state.id);\n        this.props.updatetFranchiseApi(data, () => this.props.history.goBack());\n      } else {\n        this.props.addEditFranchiseApi(data, () => this.props.history.goBack());\n      }\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.handleAddMore = () => {\n      let documentDetails = this.state.documentDetails.map(a => ({ ...a\n      }));\n      documentDetails.push({\n        documentName: \"\",\n        document: \"\"\n      });\n      this.setState({\n        documentDetails\n      });\n    };\n\n    this.handleRemove = i => {\n      let documentDetails = this.state.documentDetails.map(a => ({ ...a\n      }));\n      documentDetails.splice(i, 1);\n      this.setState({\n        documentDetails\n      });\n    };\n\n    let franchiseId = props.match.params.franchiseId ? props.match.params.franchiseId : \"\";\n    this.state = {\n      id: franchiseId,\n      accountName: \"\",\n      accountEmail: \"\",\n      accountPhone: \"\",\n      rentalRevenuePercent: \"\",\n      cancellationRevenuePercent: \"\",\n      damageRevenuePercent: \"\",\n      areaList: [],\n      cityList: [],\n      stateList: [],\n      countryList: [],\n      role: [],\n      roleList: [],\n      areaIds: [],\n      cityId: \"\",\n      stateId: \"\",\n      countryId: \"\",\n      attachment: [],\n      franchiseSet: \"\",\n      billingAddressId: \"\",\n      documentDetails: [{\n        documentName: \"\",\n        document: \"\"\n      }],\n      userAccountType: AccountType.FRANCHISE\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllRolesApi(this);\n    this.props.getAllLocationApi(this, LocationType.COUNTRY);\n    this.props.getAllLocationApi(this, LocationType.STATE);\n    this.props.getAllLocationApi(this, LocationType.CITY);\n    this.props.getAllLocationApi(this, LocationType.AREA); // // IN CASE IF EDIT FRANCHISE\n\n    if (this.state.id) {\n      this.props.getFranchiseByIdApi(this.state.id, this.setFranchiseData);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.id ? \"Edit Franchise\" : \"Add Franchise\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save Franchise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.handleSave,\n            ref: el => this.form = el,\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"accountName\"),\n                  label: \"Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"accountPhone\"),\n                  label: \"Contact Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Number cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPhone,\n                    message: \"Please enter a valid number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Contact Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"accountEmail\"),\n                  label: \"Email\",\n                  disabled: this.state.id ? true : false,\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Email cannot be empty\"\n                  }, {\n                    validate: FormValidator.isEmail,\n                    message: \"Please enter a valid email\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Email\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), !this.state.id && /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"pocName\"),\n                  label: \"POC Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter POC Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"pocNumber\"),\n                  label: \"POC Contact\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Number cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPhone,\n                    message: \"Please enter a valid number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter POC Contact\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"pocEmail\"),\n                  label: \"POC Email\" //disabled={this.state.userId ? true : false}\n                  ,\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Email cannot be empty\"\n                  }, {\n                    validate: FormValidator.isEmail,\n                    message: \"Please enter a valid email\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter POC Email\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"areaIds\"),\n                  label: \"Area\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Area cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Area\",\n                      options: this.state.areaList,\n                      multiple: true,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.areaIds);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 17\n              }, this), !this.state.id && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"role\"),\n                  label: \"Role\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Role cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Role\",\n                      options: this.state.rolesOption,\n                      multiple: true,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.role);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"rentalRevenuePercent\"),\n                  label: \"Rental Revenue Percentage\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Rental revenue percentage cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Rental Revenue Percentage\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"cancellationRevenuePercent\"),\n                  label: \"Cancellation Revenue Percentage\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Cancellation revenue percentage cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Cancellation Revenue Percentage\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"damageRevenuePercent\"),\n                  label: \"Damage Revenue Percentage\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Damage revenue percentage cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Damage Revenue Percentage\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Billing address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"countryId\"),\n                  label: \"Country\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Country cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Country\",\n                      options: this.state.countryList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        this.setState({\n                          stateId: \"\",\n                          cityId: \"\",\n                          countryId: this.state.countryId\n                        }, () => {\n                          this.props.getAllLocationApi(this, LocationType.STATE);\n                        }); // onBlur(this.state.countryId);\n                        // this.props.getAllLocationApi(this, LocationType.STATE);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"stateId\"),\n                  label: \"State\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"State cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select State\",\n                      options: this.state.stateList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        this.setState({\n                          cityId: \"\",\n                          stateId: this.state.stateId\n                        }, () => {\n                          this.props.getAllLocationApi(this, LocationType.CITY);\n                        });\n                        onBlur(this.state.stateId); //this.props.getAllLocationApi(this, LocationType.CITY);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"cityId\"),\n                  label: \"City\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"City cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select City\",\n                      options: this.state.cityList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.cityId);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"block\"),\n                  label: \"Block Address\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Block\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 596,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"taxRegNumber\"),\n                  label: \"Tax Reg Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Tax Rgister Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"billingContact\"),\n                  label: \"Contact Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Number cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPhone,\n                    message: \"Please enter a valid number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Contact Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 635,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Document Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 15\n            }, this), this.state.documentDetails.map((document, i) => {\n              return /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, `documentDetails.${i}.documentName`),\n                    label: \"Document Name\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Document name cannot be empty\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Document Name\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 670,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 669,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, `documentDetails.${i}.document`),\n                    label: \"Upload file\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"File is required\"\n                    }],\n                    control: {\n                      type: FileUploadControl,\n                      settings: {\n                        moduleName: \"organization\",\n                        subModule: \"account\",\n                        fileType: \"IMAGE\",\n                        extensions: [\"image/*\"],\n                        maxFiles: 1,\n                        maxFileSize: 100000000,\n                        onSelect: (file, callback) => {\n                          // You will need to generate signedURL by calling API and then call callback\n                          const fileInfo = {\n                            id: file.lastModified,\n                            name: file.name,\n                            size: file.size,\n                            mimeType: file.type,\n                            // path: \"single.jpg\",\n                            path: \"multi\" + (this.state.documentDetails.length + 1) + \".jpg\"\n                          };\n                          callback(fileInfo, API_URL);\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 692,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 2,\n                  children: /*#__PURE__*/_jsxDEV(Image, {\n                    className: \"delete-icon\",\n                    src: deleteIcon,\n                    onClick: () => this.handleRemove(i)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 734,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 733,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 19\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                className: \"add-more-section\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"btn black-btn\",\n                  onClick: this.handleAddMore,\n                  children: \"+ Add More Document\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 745,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\n\nconst mapDispatchToProps = {\n  getAllRolesApi,\n  getAllLocationApi,\n  addEditFranchiseApi,\n  getFranchiseByIdApi,\n  updatetFranchiseApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditFranchise);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/franchise/AddEditFranchise.js"],"names":["React","Button","Col","Image","Row","connect","BaseReactComponent","FileUploadControl","CustomTextControl","Form","FormElement","FormValidator","SelectControl","ComponentHeader","ReactDOM","getAllRolesApi","AccountType","API_URL","DocType","LocationType","getAllLocationApi","addEditFranchiseApi","getFranchiseByIdApi","updatetFranchiseApi","AddEditFranchise","constructor","props","setFranchiseData","data","console","log","documentDetails","document_details","map","item","push","documentName","name","document","imageId","attachment_info","id","path","url","setState","accountName","legal_name","accountEmail","billing_email","accountPhone","billing_contact","areaIds","extra_information","operational_areas","rentalRevenuePercent","rental_revenue_percent","cancellationRevenuePercent","cancellation_revenue_percent","damageRevenuePercent","damage_revenue_percent","countryId","billing_address","country_id","stateId","state_id","cityId","city_id","block","block_address","taxRegNumber","tax_reg_number","billingContact","contact_number","billingAddressId","handleSave","URLSearchParams","append","state","pocName","pocNumber","pocEmail","JSON","stringify","role","contact_name","doc","type","KYC","attachment_id","history","goBack","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","handleAddMore","a","handleRemove","i","splice","franchiseId","match","params","areaList","cityList","stateList","countryList","roleList","attachment","franchiseSet","userAccountType","FRANCHISE","componentDidMount","COUNTRY","STATE","CITY","AREA","render","el","linkState","validate","isRequired","message","settings","placeholder","isPhone","isEmail","options","multiple","searchable","onChangeCallback","onBlur","rolesOption","isPositiveInt","moduleName","subModule","fileType","extensions","maxFiles","maxFileSize","onSelect","file","callback","fileInfo","lastModified","size","mimeType","length","deleteIcon","mapStateToProps","userManagementState","UserManagementState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Button, Col, Image, Row } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport {\n  BaseReactComponent,\n  FileUploadControl,\n  CustomTextControl,\n  Form,\n  FormElement,\n  FormValidator,\n  SelectControl\n} from \"../../utils/form\"\nimport { ComponentHeader } from \"../common\"\nimport ReactDOM from \"react-dom\"\nimport { getAllRolesApi } from \"../userManagement/Api\"\nimport {\n  AccountType,\n  API_URL,\n  DocType,\n  LocationType\n} from \"../../utils/Constant\"\nimport { getAllLocationApi } from \"../common/Api\"\nimport {\n  addEditFranchiseApi,\n  getFranchiseByIdApi,\n  updatetFranchiseApi\n} from \"./Api\"\nimport deleteIcon from \"../../assets/images/delete-icon.svg\"\n\nclass AddEditFranchise extends BaseReactComponent {\n  constructor(props) {\n    super(props)\n    // const editData = props.location.state ? props.location.state.data : null;\n    // console.log(\"editData\", editData);\n\n    let franchiseId = props.match.params.franchiseId\n      ? props.match.params.franchiseId\n      : \"\"\n\n    this.state = {\n      id: franchiseId,\n      accountName: \"\",\n      accountEmail: \"\",\n      accountPhone: \"\",\n\n      rentalRevenuePercent: \"\",\n      cancellationRevenuePercent: \"\",\n      damageRevenuePercent: \"\",\n\n      areaList: [],\n      cityList: [],\n      stateList: [],\n      countryList: [],\n      role: [],\n      roleList: [],\n      areaIds: [],\n      cityId: \"\",\n      stateId: \"\",\n      countryId: \"\",\n      attachment: [],\n      franchiseSet: \"\",\n      billingAddressId: \"\",\n      documentDetails: [\n        {\n          documentName: \"\",\n          document: \"\"\n        }\n      ],\n      userAccountType: AccountType.FRANCHISE\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllRolesApi(this)\n    this.props.getAllLocationApi(this, LocationType.COUNTRY)\n    this.props.getAllLocationApi(this, LocationType.STATE)\n    this.props.getAllLocationApi(this, LocationType.CITY)\n    this.props.getAllLocationApi(this, LocationType.AREA)\n\n    // // IN CASE IF EDIT FRANCHISE\n    if (this.state.id) {\n      this.props.getFranchiseByIdApi(this.state.id, this.setFranchiseData)\n    }\n  }\n\n  setFranchiseData = (data) => {\n    console.log(data, \"data\")\n    let documentDetails = []\n    if (data && data.document_details) {\n      data.document_details.map((item) =>\n        documentDetails.push({\n          documentName: item.name,\n          document: {\n            imageId: item.attachment_info.id,\n            name: item.attachment_info.name,\n            path: item.attachment_info.url\n          }\n        })\n      )\n    }\n    this.setState({\n      id: data.id,\n      accountName: data.legal_name,\n      accountEmail: data.billing_email,\n      accountPhone: data.billing_contact,\n      areaIds: data.extra_information.operational_areas,\n      // revenuePercentage: data.extra_information.revenue_percentage,\n      rentalRevenuePercent: data.extra_information.rental_revenue_percent,\n      cancellationRevenuePercent:\n        data.extra_information.cancellation_revenue_percent,\n      damageRevenuePercent: data.extra_information.damage_revenue_percent,\n\n      countryId: data.billing_address[0].country_id,\n      stateId: data.billing_address[0].state_id,\n      cityId: data.billing_address[0].city_id,\n      block: data.billing_address[0].block_address,\n      taxRegNumber: data.billing_address[0].tax_reg_number,\n      billingContact: data.billing_address[0].contact_number,\n      billingAddressId: data.billing_address[0].id,\n      // attachment: [\n      //   {\n      //     imageId: data.document_details[0].attachment_info.id,\n      //     path: data.document_details[0].attachment_info.url,\n      //     name: data.document_details[0].attachment_info.name,\n      //   },\n      // ],\n      documentDetails\n    })\n  }\n\n  handleSave = () => {\n    const data = new URLSearchParams()\n    data.append(\"account_name\", this.state.accountName)\n    data.append(\"account_email\", this.state.accountEmail)\n    data.append(\"account_contact_number\", this.state.accountPhone)\n\n    if (!this.state.id) {\n      data.append(\"poc_name\", this.state.pocName)\n      data.append(\"poc_number\", this.state.pocNumber)\n      data.append(\"poc_email\", this.state.pocEmail)\n      data.append(\"role_ids\", JSON.stringify(this.state.role))\n    }\n\n    data.append(\"rental_revenue_percent\", this.state.rentalRevenuePercent)\n    data.append(\n      \"cancellation_revenue_percent\",\n      this.state.cancellationRevenuePercent\n    )\n    data.append(\"damage_revenue_percent\", this.state.damageRevenuePercent)\n\n    data.append(\"operational_areas\", JSON.stringify(this.state.areaIds))\n\n    data.append(\n      \"billing_address\",\n      JSON.stringify({\n        id: this.state.billingAddressId,\n        country_id: this.state.countryId,\n        state_id: this.state.stateId,\n        city_id: this.state.cityId,\n        block_address: this.state.block,\n        tax_reg_number: this.state.taxRegNumber,\n        contact_name: \"\",\n        contact_number: this.state.billingContact\n      })\n    )\n\n    let documentDetails = []\n    this.state.documentDetails.map((doc) => {\n      return documentDetails.push({\n        name: doc.documentName,\n        type: DocType.KYC,\n        attachment_id: doc.document.imageId\n      })\n    })\n    data.append(\"document_details\", JSON.stringify(documentDetails))\n    if (this.state.id) {\n      data.append(\"franchise_id\", this.state.id)\n      this.props.updatetFranchiseApi(data, () => this.props.history.goBack())\n    } else {\n      this.props.addEditFranchiseApi(data, () => this.props.history.goBack())\n    }\n  }\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    )\n  }\n\n  handleAddMore = () => {\n    let documentDetails = this.state.documentDetails.map((a) => ({ ...a }))\n    documentDetails.push({\n      documentName: \"\",\n      document: \"\"\n    })\n    this.setState({ documentDetails })\n  }\n\n  handleRemove = (i) => {\n    let documentDetails = this.state.documentDetails.map((a) => ({ ...a }))\n    documentDetails.splice(i, 1)\n    this.setState({ documentDetails })\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.id ? \"Edit Franchise\" : \"Add Franchise\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save Franchise\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form\n              onValidSubmit={this.handleSave}\n              ref={(el) => (this.form = el)}\n            >\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"accountName\")}\n                    label=\"Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Name cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Name\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"accountPhone\")}\n                    label=\"Contact Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Number cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPhone,\n                        message: \"Please enter a valid number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Contact Number\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"accountEmail\")}\n                    label=\"Email\"\n                    disabled={this.state.id ? true : false}\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Email cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isEmail,\n                        message: \"Please enter a valid email\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Email\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              {!this.state.id && (\n                <Row>\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"pocName\")}\n                      label=\"POC Name\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Name cannot be empty\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter POC Name\"\n                        }\n                      }}\n                    />\n                  </Col>\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"pocNumber\")}\n                      label=\"POC Contact\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Number cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isPhone,\n                          message: \"Please enter a valid number\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter POC Contact\"\n                        }\n                      }}\n                    />\n                  </Col>\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"pocEmail\")}\n                      label=\"POC Email\"\n                      //disabled={this.state.userId ? true : false}\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Email cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isEmail,\n                          message: \"Please enter a valid email\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter POC Email\"\n                        }\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )}\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"areaIds\")}\n                    label=\"Area\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Area cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Area\",\n                        options: this.state.areaList,\n                        multiple: true,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.areaIds)\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                {!this.state.id && (\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"role\")}\n                      label=\"Role\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Role cannot be empty\"\n                        }\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Role\",\n                          options: this.state.rolesOption,\n                          multiple: true,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.role)\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                )}\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"rentalRevenuePercent\")}\n                    label=\"Rental Revenue Percentage\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Rental revenue percentage cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Rental Revenue Percentage\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(\n                      this,\n                      \"cancellationRevenuePercent\"\n                    )}\n                    label=\"Cancellation Revenue Percentage\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message:\n                          \"Cancellation revenue percentage cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Cancellation Revenue Percentage\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"damageRevenuePercent\")}\n                    label=\"Damage Revenue Percentage\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Damage revenue percentage cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Damage Revenue Percentage\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <hr />\n              <br />\n              <h4>Billing address</h4>\n              <br />\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"countryId\")}\n                    label=\"Country\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Country cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Country\",\n                        options: this.state.countryList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          this.setState(\n                            {\n                              stateId: \"\",\n                              cityId: \"\",\n                              countryId: this.state.countryId\n                            },\n                            () => {\n                              this.props.getAllLocationApi(\n                                this,\n                                LocationType.STATE\n                              )\n                            }\n                          )\n                          // onBlur(this.state.countryId);\n                          // this.props.getAllLocationApi(this, LocationType.STATE);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"stateId\")}\n                    label=\"State\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"State cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select State\",\n                        options: this.state.stateList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          this.setState(\n                            {\n                              cityId: \"\",\n                              stateId: this.state.stateId\n                            },\n                            () => {\n                              this.props.getAllLocationApi(\n                                this,\n                                LocationType.CITY\n                              )\n                            }\n                          )\n                          onBlur(this.state.stateId)\n                          //this.props.getAllLocationApi(this, LocationType.CITY);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"cityId\")}\n                    label=\"City\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"City cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select City\",\n                        options: this.state.cityList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.cityId)\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"block\")}\n                    label=\"Block Address\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Name cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Block\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"taxRegNumber\")}\n                    label=\"Tax Reg Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Name cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Tax Rgister Number\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"billingContact\")}\n                    label=\"Contact Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Number cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPhone,\n                        message: \"Please enter a valid number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Contact Number\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <hr />\n              <br />\n              <Row>\n                <Col sm={12}>\n                  <h4>Document Details</h4>\n                </Col>\n              </Row>\n              <br />\n              {this.state.documentDetails.map((document, i) => {\n                return (\n                  <Row>\n                    <Col md={4}>\n                      <FormElement\n                        valueLink={this.linkState(\n                          this,\n                          `documentDetails.${i}.documentName`\n                        )}\n                        label=\"Document Name\"\n                        required\n                        validations={[\n                          {\n                            validate: FormValidator.isRequired,\n                            message: \"Document name cannot be empty\"\n                          }\n                        ]}\n                        control={{\n                          type: CustomTextControl,\n                          settings: {\n                            placeholder: \"Enter Document Name\"\n                          }\n                        }}\n                      />\n                    </Col>\n                    <Col md={4}>\n                      <FormElement\n                        valueLink={this.linkState(\n                          this,\n                          `documentDetails.${i}.document`\n                        )}\n                        label=\"Upload file\"\n                        required\n                        validations={[\n                          {\n                            validate: FormValidator.isRequired,\n                            message: \"File is required\"\n                          }\n                        ]}\n                        control={{\n                          type: FileUploadControl,\n                          settings: {\n                            moduleName: \"organization\",\n                            subModule: \"account\",\n                            fileType: \"IMAGE\",\n                            extensions: [\"image/*\"],\n                            maxFiles: 1,\n                            maxFileSize: 100000000,\n                            onSelect: (file, callback) => {\n                              // You will need to generate signedURL by calling API and then call callback\n                              const fileInfo = {\n                                id: file.lastModified,\n                                name: file.name,\n                                size: file.size,\n                                mimeType: file.type,\n                                // path: \"single.jpg\",\n                                path:\n                                  \"multi\" +\n                                  (this.state.documentDetails.length + 1) +\n                                  \".jpg\"\n                              }\n                              callback(fileInfo, API_URL)\n                            }\n                          }\n                        }}\n                      />\n                    </Col>\n                    <Col sm={2}>\n                      <Image\n                        className=\"delete-icon\"\n                        src={deleteIcon}\n                        onClick={() => this.handleRemove(i)}\n                      />\n                    </Col>\n                  </Row>\n                )\n              })}\n              <Row>\n                <Col sm={12} className=\"add-more-section\">\n                  <Button\n                    className=\"btn black-btn\"\n                    onClick={this.handleAddMore}\n                  >\n                    + Add More Document\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => ({\n  userManagementState: state.UserManagementState\n})\nconst mapDispatchToProps = {\n  getAllRolesApi,\n  getAllLocationApi,\n  addEditFranchiseApi,\n  getFranchiseByIdApi,\n  updatetFranchiseApi\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditFranchise)\n"]},"metadata":{},"sourceType":"module"}