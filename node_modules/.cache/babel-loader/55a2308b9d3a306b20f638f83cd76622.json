{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/common/InformationModal.js\";\nimport React from \"react\";\nimport { Modal, Button, Image } from \"react-bootstrap\";\nimport alertIcon from \"../../assets/images/icons/alert-icon.svg\";\nimport successIcon from \"../../assets/images/icons/success-icon.svg\"; // import closeIcon from \"../../assets/images/close.png\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InformationModal = _ref => {\n  let {\n    infoUpdateStatus,\n    type,\n    text,\n    show,\n    handleClose,\n    handleArchive,\n    errorText,\n    actionText\n  } = _ref;\n  const typeMap = {\n    success: 1,\n    warning: 2\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    dialogClassName: \"info-modal\",\n    children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-modal-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: typeMap[type] === 1 ? successIcon : alertIcon,\n            alt: \"warning\",\n            responsive: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [infoUpdateStatus ? \"You’ve successfully updated\" : typeMap[type] === 1 ? \"You’ve successfully added \" : `Are you sure you want to ${actionText}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dark-card-title-l\",\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this), errorText && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: errorText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-wrap\",\n        children: [typeMap[type] === 2 && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleArchive,\n          className: \"btn black-btn\",\n          children: \"YES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          className: \"btn secondary-btn\",\n          children: typeMap[type] === 1 ? \"OK\" : \"NO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = InformationModal;\nexport default InformationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"InformationModal\");","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/common/InformationModal.js"],"names":["React","Modal","Button","Image","InformationModal","infoUpdateStatus","type","text","show","handleClose","handleArchive","errorText","actionText","typeMap","success","warning","successIcon","alertIcon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,QAAqC,iBAArC;;sEAGA;;;;AAEA,MAAMC,gBAAgB,GAAG,QASnB;AAAA,MAToB;AACxBC,IAAAA,gBADwB;AAExBC,IAAAA,IAFwB;AAGxBC,IAAAA,IAHwB;AAIxBC,IAAAA,IAJwB;AAKxBC,IAAAA,WALwB;AAMxBC,IAAAA,aANwB;AAOxBC,IAAAA,SAPwB;AAQxBC,IAAAA;AARwB,GASpB;AACJ,QAAMC,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAE,CADK;AAEdC,IAAAA,OAAO,EAAE;AAFK,GAAhB;AAIA,sBACE,QAAC,KAAD;AAAO,IAAA,IAAI,EAAEP,IAAb;AAAmB,IAAA,MAAM,EAAEC,WAA3B;AAAwC,IAAA,eAAe,EAAC,YAAxD;AAAA,2BACE,QAAC,KAAD,CAAO,IAAP;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,GAAG,EAAEI,OAAO,CAACP,IAAD,CAAP,KAAkB,CAAlB,GAAsBU,WAAtB,GAAoCC,SAD3C;AAEE,YAAA,GAAG,EAAC,SAFN;AAGE,YAAA,UAAU;AAHZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,qBACGZ,gBAAgB,GACb,6BADa,GAEbQ,OAAO,CAACP,IAAD,CAAP,KAAkB,CAAlB,GACA,4BADA,GAEC,4BAA2BM,UAAW,EAL7C,eAME;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAM,YAAA,SAAS,EAAC,mBAAhB;AAAA,sBAAqCL;AAArC;AAAA;AAAA;AAAA;AAAA,kBAPF,EAQGI,SAAS,iBAAI;AAAG,YAAA,SAAS,EAAC,YAAb;AAAA,sBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,kBARhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,mBACGE,OAAO,CAACP,IAAD,CAAP,KAAkB,CAAlB,iBACC,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEI,aAAjB;AAAgC,UAAA,SAAS,EAAC,eAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAME,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAED,WAAjB;AAA8B,UAAA,SAAS,EAAC,mBAAxC;AAAA,oBACGI,OAAO,CAACP,IAAD,CAAP,KAAkB,CAAlB,GAAsB,IAAtB,GAA6B;AADhC;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CApDD;;KAAMF,gB;AAsDN,eAAeA,gBAAf","sourcesContent":["import React from \"react\";\nimport { Modal, Button, Image } from \"react-bootstrap\";\nimport alertIcon from \"../../assets/images/icons/alert-icon.svg\";\nimport successIcon from \"../../assets/images/icons/success-icon.svg\";\n// import closeIcon from \"../../assets/images/close.png\";\n\nconst InformationModal = ({\n  infoUpdateStatus,\n  type,\n  text,\n  show,\n  handleClose,\n  handleArchive,\n  errorText,\n  actionText,\n}) => {\n  const typeMap = {\n    success: 1,\n    warning: 2,\n  };\n  return (\n    <Modal show={show} onHide={handleClose} dialogClassName=\"info-modal\">\n      <Modal.Body>\n        <div className=\"info-modal-wrap\">\n          <div className=\"icon\">\n            <Image\n              src={typeMap[type] === 1 ? successIcon : alertIcon}\n              alt=\"warning\"\n              responsive\n            />\n          </div>\n          <div className=\"content\">\n            {infoUpdateStatus\n              ? \"You’ve successfully updated\"\n              : typeMap[type] === 1\n              ? \"You’ve successfully added \"\n              : `Are you sure you want to ${actionText}`}\n            <br />\n            <span className=\"dark-card-title-l\">{text}</span>\n            {errorText && <p className=\"error-text\">{errorText}</p>}\n          </div>\n          {/* <div className=\"close\" onClick={handleClose}>\n            <Image src={closeIcon} className=\"close-icon\" />\n          </div> */}\n        </div>\n        <div className=\"btn-wrap\">\n          {typeMap[type] === 2 && (\n            <Button onClick={handleArchive} className=\"btn black-btn\">\n              YES\n            </Button>\n          )}\n          <Button onClick={handleClose} className=\"btn secondary-btn\">\n            {typeMap[type] === 1 ? \"OK\" : \"NO\"}\n          </Button>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default InformationModal;\n"]},"metadata":{},"sourceType":"module"}