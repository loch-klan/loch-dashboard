{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/franchise/AddEditFranchiseLocation.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi } from '../common/Api';\nimport ReactDOM from 'react-dom';\nimport { AccountType, GOOGLE_API_KEY, LocationType } from '../../utils/Constant';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { getAllFranchiseApi, addUpdateFranchiseLocationApi } from './Api';\nimport { Autocomplete, GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditFranchiseLocation extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onLoad = autocomplete => {\n      // console.log('autocomplete: ', autocomplete)\n      this.autocomplete = autocomplete;\n    };\n\n    this.onPlaceChanged = () => {\n      // console.log('this.autocomplete',this.autocomplete);\n      if (this.autocomplete !== null) {\n        // console.log(\"placessssss\",this.autocomplete.getPlace())\n        this.place = this.autocomplete.getPlace();\n        let lat = this.place.geometry.location.lat();\n        let lng = this.place.geometry.location.lng();\n        this.setState({\n          formattedAddress: this.place.formatted_address,\n          geoLocation: {\n            formatted_address: this.place.formatted_address,\n            geometry: {\n              location: {\n                lat: lat,\n                lng: lng\n              }\n            }\n          }\n        });\n      } else {\n        console.log('Autocomplete is not loaded yet!');\n      }\n    };\n\n    this.onSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"area_id\", this.state.areaId);\n      data.append(\"franchise_id\", this.state.userAccountType === AccountType.COMPANY ? this.state.franchiseId : JSON.parse(localStorage.getItem('userDetails')).id);\n      data.append(\"geo_location\", JSON.stringify(this.state.geoLocation));\n\n      if (this.state.locationId) {\n        data.append(\"franchise_location_id\", this.state.locationId);\n      }\n\n      addUpdateFranchiseLocationApi(data, () => this.props.history.goBack());\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.autocomplete = null; // this.autocompleteInput = React.createRef();\n\n    const userAccountType = getUserAccountType();\n\n    const _data = props.location.state ? props.location.state.data : null;\n\n    this.state = {\n      data: _data,\n      locationId: _data ? _data.id : \"\",\n      userAccountType,\n      areaId: _data ? _data.area_id : \"\",\n      areaList: [],\n      franchiseId: _data ? _data.franchise_account_id : \"\",\n      geoLocation: _data ? _data.location_details : \"\",\n      formattedAddress: _data ? _data.location_details.formatted_address : \"\"\n    };\n  }\n\n  componentDidMount() {\n    // const google = window.google\n    // this.service = new google.maps.DistanceMatrixService();\n    this.state.userAccountType === AccountType.COMPANY && this.props.getAllFranchiseApi(this, -1);\n    this.props.getAllLocationApi(this, LocationType.AREA);\n  }\n\n  render() {\n    const {\n      areaList,\n      userAccountType,\n      franchiseOptionsList\n    } = this.state;\n    let newAreaList = areaList.filter(row => row.is_operational === true);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.areaId ? \"Edit Franchise Location\" : \"Add Franchise Location\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save Franchise Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onSubmit,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [userAccountType === AccountType.COMPANY && /*#__PURE__*/_jsxDEV(Col, {\n                sm: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"franchiseId\"),\n                  label: \"Select Franchise\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Franchise cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Franchise\",\n                      options: franchiseOptionsList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.franchiseId);\n                        console.log('Hello world!');\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"areaId\"),\n                  label: \"Select Area\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Area cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Area\",\n                      options: newAreaList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        // let areaName = newAreaList.filter((item) => item.id === this.state.areaId);\n                        this.setState({\n                          formattedAddress: \"\",\n                          geoLocation: \"\"\n                        });\n                        onBlur(this.state.areaId);\n                        console.log('Hello world!');\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 4,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Search Franchise Location \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        color: \"red\"\n                      },\n                      children: \"*\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 199,\n                      columnNumber: 54\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n                    libraries: [\"places\"],\n                    id: \"script-loader\",\n                    googleMapsApiKey: GOOGLE_API_KEY,\n                    language: \"en\",\n                    region: \"us\",\n                    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                      fields: [\"formatted_address\", \"geometry\"],\n                      onLoad: this.onLoad,\n                      onPlaceChanged: this.onPlaceChanged,\n                      children: /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"text\",\n                        placeholder: \"Search location\",\n                        className: \"form-control\",\n                        value: this.state.formattedAddress,\n                        onChange: e => this.setState({\n                          formattedAddress: e.target.value\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 218,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 213,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  getAllFranchiseApi,\n  addUpdateFranchiseLocationApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditFranchiseLocation);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/franchise/AddEditFranchiseLocation.js"],"names":["React","Col","Row","connect","BaseReactComponent","Form","FormElement","FormValidator","SelectControl","ComponentHeader","getAllLocationApi","ReactDOM","AccountType","GOOGLE_API_KEY","LocationType","getUserAccountType","getAllFranchiseApi","addUpdateFranchiseLocationApi","Autocomplete","GoogleMap","LoadScript","AddEditFranchiseLocation","constructor","props","onLoad","autocomplete","onPlaceChanged","place","getPlace","lat","geometry","location","lng","setState","formattedAddress","formatted_address","geoLocation","console","log","onSubmit","data","URLSearchParams","append","state","areaId","userAccountType","COMPANY","franchiseId","JSON","parse","localStorage","getItem","id","stringify","locationId","history","goBack","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","area_id","areaList","franchise_account_id","location_details","componentDidMount","AREA","render","franchiseOptionsList","newAreaList","filter","row","is_operational","el","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","color","e","target","value","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi } from '../common/Api';\nimport ReactDOM from 'react-dom';\nimport { AccountType, GOOGLE_API_KEY, LocationType } from '../../utils/Constant';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { getAllFranchiseApi, addUpdateFranchiseLocationApi } from './Api';\nimport { Autocomplete, GoogleMap, LoadScript } from '@react-google-maps/api';\n\nclass AddEditFranchiseLocation extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.autocomplete = null;\n    // this.autocompleteInput = React.createRef();\n    const userAccountType = getUserAccountType();\n    const data = props.location.state ? props.location.state.data : null;\n    this.state = {\n      data,\n      locationId: data ? data.id : \"\",\n      userAccountType,\n      areaId: data ? data.area_id : \"\",\n      areaList: [],\n      franchiseId: data ? data.franchise_account_id : \"\",\n      geoLocation: data ? data.location_details : \"\",\n      formattedAddress: data ? data.location_details.formatted_address : \"\",\n    }\n  }\n  componentDidMount() {\n    // const google = window.google\n    // this.service = new google.maps.DistanceMatrixService();\n    this.state.userAccountType === AccountType.COMPANY &&\n      this.props.getAllFranchiseApi(this, -1);\n    this.props.getAllLocationApi(this, LocationType.AREA);\n  }\n\n  onLoad = (autocomplete) => {\n    // console.log('autocomplete: ', autocomplete)\n\n    this.autocomplete = autocomplete\n  }\n\n  onPlaceChanged = () => {\n    // console.log('this.autocomplete',this.autocomplete);\n    if (this.autocomplete !== null) {\n      // console.log(\"placessssss\",this.autocomplete.getPlace())\n      this.place = this.autocomplete.getPlace();\n      let lat = this.place.geometry.location.lat();\n      let lng = this.place.geometry.location.lng();\n      this.setState({\n        formattedAddress: this.place.formatted_address,\n        geoLocation: {\n          formatted_address: this.place.formatted_address,\n          geometry: {\n            location: {\n              lat: lat,\n              lng: lng,\n            }\n          }\n        }\n      })\n    } else {\n      console.log('Autocomplete is not loaded yet!')\n    }\n  }\n\n\n  // onRefChange = (ref) => {\n  //   if (ref) {\n  //     this.autocompleteInput = ref;\n  //     this.autoComplete = new window.google.maps.places.Autocomplete(ref);\n  //     this.refCompleted = true;\n  //     this.autoComplete.setFields([\"formatted_address\", \"geometry\"]);\n  //     this.autoComplete.addListener('place_changed', this.autoCompletePlaceSelected);\n  //   }\n  // }\n\n  // clearAutoComplete = () => {\n  //   // this.setState({ isData: false, notServicable: false, outGeoFence: false });\n  //   this.autocompleteInput.value = \"\";\n  // }\n\n  // autoCompletePlaceSelected = () => {\n  //   // Call place details to get address components\n  //   this.place = this.autoComplete.getPlace();\n  //   let lat = this.place.geometry.location.lat();\n  //   let lng = this.place.geometry.location.lng();\n  //   this.setState({\n  //     geoLocation: {\n  //       formatted_address: this.place.formatted_address,\n  //       geometry: {\n  //         location: {\n  //           lat: lat,\n  //           lng: lng,\n  //         }\n  //       }\n  //     }\n  //   })\n  // }\n\n  onSubmit = () => {\n    const data = new URLSearchParams();\n    data.append(\"area_id\", this.state.areaId);\n    data.append(\"franchise_id\", this.state.userAccountType === AccountType.COMPANY ? this.state.franchiseId : JSON.parse(localStorage.getItem('userDetails')).id);\n    data.append(\"geo_location\", JSON.stringify(this.state.geoLocation));\n    if (this.state.locationId) {\n      data.append(\"franchise_location_id\", this.state.locationId);\n    }\n    addUpdateFranchiseLocationApi(data, () => this.props.history.goBack());\n  }\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  render() {\n    const { areaList, userAccountType, franchiseOptionsList } = this.state;\n    let newAreaList = areaList.filter(row => row.is_operational === true);\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.areaId ? \"Edit Franchise Location\" : \"Add Franchise Location\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save Franchise Location\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onSubmit} ref={el => this.form = el}>\n              <Row>\n                {\n                  userAccountType === AccountType.COMPANY &&\n                  <Col sm={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"franchiseId\")}\n                      label=\"Select Franchise\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Franchise cannot be empty\"\n                        },\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Franchise\",\n                          options: franchiseOptionsList,\n                          multiple: false,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.franchiseId);\n                            console.log('Hello world!');\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                }\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"areaId\")}\n                    label=\"Select Area\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Area cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Area\",\n                        options: newAreaList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          // let areaName = newAreaList.filter((item) => item.id === this.state.areaId);\n                          this.setState({\n                            formattedAddress: \"\",\n                            geoLocation: \"\",\n                          })\n                          onBlur(this.state.areaId);\n                          console.log('Hello world!');\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <div className=\"form-group\">\n                    <label>Search Franchise Location <span style={{ color: \"red\" }}>*</span> </label>\n                    {/* <input autoFocus autoComplete=\"off\"\n            ref={this.onRefChange}\n            value={this.state.formattedAddress}\n            onChange={(e)=>this.setState({formattedAddress: e.target.value})}\n            placeholder={\"Search location\"}\n            type=\"text\" className=\"form-control\" /> */}\n                    <LoadScript\n                      libraries={[\"places\"]}\n                      id=\"script-loader\"\n                      googleMapsApiKey={GOOGLE_API_KEY}\n                      language=\"en\"\n                      region=\"us\"\n                    >\n                      <Autocomplete\n                        fields={[\"formatted_address\", \"geometry\"]}\n                        onLoad={this.onLoad}\n                        onPlaceChanged={this.onPlaceChanged}\n                      >\n                        <input\n                          type=\"text\"\n                          placeholder={\"Search location\"}\n                          className=\"form-control\"\n                          value={this.state.formattedAddress}\n                          onChange={(e) => this.setState({ formattedAddress: e.target.value })}\n                        />\n                      </Autocomplete>\n                    </LoadScript>\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n\n});\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  getAllFranchiseApi,\n  addUpdateFranchiseLocationApi,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditFranchiseLocation);"]},"metadata":{},"sourceType":"module"}