{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/locationMaster/City.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { LocationType, START_PAGE } from '../../utils/Constant';\nimport { BaseReactComponent, Form, FormElement, SelectControl } from '../../utils/form'; // import { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\n\nimport { ComponentHeader } from '../common'; // import ActionDropdown from '../common/_utils/ActionDropdown';\n\nimport { getAllLocationApi, updateLocationApi } from '../common/Api';\nimport Switch from '../common/_utils/Switch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass City extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleToggle = rowData => {\n      console.log('rowData', rowData);\n      const {\n        id,\n        is_operational,\n        code,\n        name,\n        type,\n        parent_id\n      } = rowData;\n      let data = new URLSearchParams();\n      data.append(\"location_id\", id);\n      data.append(\"location_type\", type);\n      data.append(\"name\", name);\n      data.append(\"code\", code);\n      data.append(\"parent_id\", parent_id);\n      data.append(\"is_operational\", !is_operational);\n      this.props.updateLocationApi(data, this);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      cityList: [],\n      // showFilter: false,\n      conditions: [],\n      stateId: \"\",\n      stateList: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.STATE);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {// this.props.getAllIotApi(this);\n      } else {// this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  // handleFilter = () => {\n  //   this.setState({\n  //     showFilter: !this.state.showFilter\n  //   })\n  // }\n  // handleAddCountry = (rowData = \"\") => {\n  //   if (rowData) {\n  //     this.props.history.push({\n  //       pathname: `/location-master/city/edit-city/${rowData.id}`,\n  //       state: { data: rowData }\n  //     });\n  //   } else {\n  //     this.props.history.push(\"/location-master/city/add-city\");\n  //   }\n  // }\n  // onChangeMethod = (value) => {\n  //   this.setState({\n  //     searchValue: value,\n  //     conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n  //   });\n  //   replaceHistory(this.props.history, START_PAGE, value.search)\n  //   // this.props.getAllIotApi(this, START_PAGE);\n  // }\n  // clearSearch = (currentPage) => {\n  //   this.setState({ searchValue: \"\", conditions: [] });\n  //   if (currentPage === START_PAGE) {\n  //     // this.props.getAllIotApi(this, START_PAGE);\n  //   }\n  //   replaceHistory(this.props.history, START_PAGE)\n  // }\n  render() {\n    const {\n      page,\n      totalPage,\n      cityList\n    } = this.state; // const permissionList = getAssignedPermission();\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        breadcrumb: true,\n        currentPage: \"City\",\n        title: \"City\" // isFilter={false}\n        // isPrimaryBtn={() => this.handleAddCountry()}\n        // primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY) ? \"+ Add City\" : \"\"}\n        // isSearch={true}\n        // placeholder={\"Search City\"}\n        // onChangeMethod={this.onChangeMethod}\n        // clearSearch={() => this.clearSearch(page || START_PAGE)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onValidSubmit: this.onValidSubmit,\n          ref: el => this.form = el,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"stateId\"),\n                label: \"Select State\",\n                control: {\n                  type: SelectControl,\n                  settings: {\n                    placeholder: \"Select State\",\n                    options: this.state.stateList,\n                    multiple: false,\n                    searchable: true,\n                    onChangeCallback: onBlur => {\n                      this.props.getAllLocationApi(this, LocationType.CITY);\n                      onBlur(this.state.searchableSingleRegion);\n                      console.log('Hello world!');\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: cityList,\n          columnList: [{\n            coumnWidth: 200,\n            labelName: \"City Name\",\n            dataKey: \"name\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"name\") {\n                return rowData.name;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Code\",\n            dataKey: \"code\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"code\") {\n                return rowData.code;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Operation Status\",\n            dataKey: \"is_operational\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"is_operational\") {\n                return /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: rowData.is_operational,\n                  handleClick: () => this.handleToggle(rowData)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"City list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  locationMasterState: state.LocationMasterState\n});\n\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  updateLocationApi\n};\nCity.propTypes = {// getPosts: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(City);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/locationMaster/City.js"],"names":["React","Col","Row","connect","CustomTable","LocationType","START_PAGE","BaseReactComponent","Form","FormElement","SelectControl","ComponentHeader","getAllLocationApi","updateLocationApi","Switch","City","constructor","props","handleToggle","rowData","console","log","id","is_operational","code","name","type","parent_id","data","URLSearchParams","append","search","location","params","page","get","state","parseInt","cityList","conditions","stateId","stateList","componentDidMount","STATE","history","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","onValidSubmit","el","form","linkState","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","CITY","searchableSingleRegion","coumnWidth","labelName","dataKey","className","isCell","cell","mapStateToProps","locationMasterState","LocationMasterState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { LocationType, START_PAGE } from '../../utils/Constant';\nimport { BaseReactComponent, Form, FormElement, SelectControl } from '../../utils/form';\n// import { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\n// import ActionDropdown from '../common/_utils/ActionDropdown';\nimport {getAllLocationApi, updateLocationApi} from '../common/Api';\nimport Switch from '../common/_utils/Switch';\n\nclass City extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      cityList: [],\n      // showFilter: false,\n      conditions: [],\n      stateId: \"\",\n      stateList: [],\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.STATE)\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        // this.props.getAllIotApi(this);\n      } else {\n        // this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  handleToggle = (rowData) => {\n    console.log('rowData',rowData);\n    const { id, is_operational, code, name, type, parent_id } = rowData;\n    let data = new URLSearchParams();\n    data.append(\"location_id\", id);\n    data.append(\"location_type\", type);\n    data.append(\"name\", name);\n    data.append(\"code\", code);\n    data.append(\"parent_id\", parent_id);\n    data.append(\"is_operational\", !is_operational);\n    this.props.updateLocationApi(data, this);\n  };\n\n  // handleFilter = () => {\n  //   this.setState({\n  //     showFilter: !this.state.showFilter\n  //   })\n  // }\n\n  // handleAddCountry = (rowData = \"\") => {\n  //   if (rowData) {\n  //     this.props.history.push({\n  //       pathname: `/location-master/city/edit-city/${rowData.id}`,\n  //       state: { data: rowData }\n  //     });\n  //   } else {\n  //     this.props.history.push(\"/location-master/city/add-city\");\n  //   }\n  // }\n\n  // onChangeMethod = (value) => {\n  //   this.setState({\n  //     searchValue: value,\n  //     conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n  //   });\n  //   replaceHistory(this.props.history, START_PAGE, value.search)\n  //   // this.props.getAllIotApi(this, START_PAGE);\n  // }\n\n  // clearSearch = (currentPage) => {\n  //   this.setState({ searchValue: \"\", conditions: [] });\n  //   if (currentPage === START_PAGE) {\n  //     // this.props.getAllIotApi(this, START_PAGE);\n  //   }\n  //   replaceHistory(this.props.history, START_PAGE)\n  // }\n  render() {\n    const { page, totalPage, cityList } = this.state;\n    // const permissionList = getAssignedPermission();\n    return (\n      <>\n        <ComponentHeader\n          breadcrumb={true}\n          currentPage={\"City\"}\n          title={\"City\"}\n          // isFilter={false}\n          // isPrimaryBtn={() => this.handleAddCountry()}\n          // primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY) ? \"+ Add City\" : \"\"}\n          // isSearch={true}\n          // placeholder={\"Search City\"}\n          // onChangeMethod={this.onChangeMethod}\n          // clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='state-wrapper'>\n        <Form onValidSubmit={this.onValidSubmit} ref={el => this.form = el}>\n          <Row>\n            <Col sm={6}>\n        <FormElement\n                  valueLink={this.linkState(this, \"stateId\")}\n                  label=\"Select State\"\n                  control={{\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select State\",\n                      options: this.state.stateList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: (onBlur) => {\n                        this.props.getAllLocationApi(this, LocationType.CITY);\n                        onBlur(this.state.searchableSingleRegion);\n                        console.log('Hello world!');\n                      }\n                    }\n                  }}\n                />\n                </Col>\n          </Row>\n                </Form>\n        </div>\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={cityList}\n            columnList={[\n              {\n                coumnWidth: 200,\n                labelName: \"City Name\",\n                dataKey: \"name\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"name\") {\n                    return rowData.name\n                  }\n                }\n              },\n              {\n                coumnWidth: 350,\n                labelName: \"Code\",\n                dataKey: \"code\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"code\") {\n                    return rowData.code\n                  }\n                }\n              },\n              {\n                coumnWidth: 350,\n                labelName: \"Operation Status\",\n                dataKey: \"is_operational\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"is_operational\") {\n                    return (\n                      <Switch\n                      checked={rowData.is_operational}\n                      handleClick={() => this.handleToggle(rowData)}\n                    />\n                    )\n                  }\n                }\n              },\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"City list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  locationMasterState: state.LocationMasterState\n});\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  updateLocationApi\n}\nCity.propTypes = {\n  // getPosts: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(City);"]},"metadata":{},"sourceType":"module"}