{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/iot/Iot.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { formatDate, getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllIotApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Iot extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleFilter = () => {\n      this.setState({\n        showFilter: !this.state.showFilter\n      });\n    };\n\n    this.handleAddIot = function () {\n      let rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      // console.log('rowData', rowData);\n      // this.props.history.push(\"/add-iot\");\n      if (rowData) {\n        _this.props.history.push({\n          pathname: `/edit-iot/${rowData.id}`,\n          state: {\n            data: rowData\n          }\n        });\n      } else {\n        _this.props.history.push(\"/add-iot\");\n      }\n    };\n\n    this.onChangeMethod = value => {\n      // console.log('Value', value);\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search); // this.props.getAllVendorsApi(START_PAGE, value);\n\n      this.props.getAllIotApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      // console.log('Hey', currentPage);\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      }, () => {\n        if (currentPage === START_PAGE) {\n          this.props.getAllIotApi(this, START_PAGE);\n        }\n\n        replaceHistory(this.props.history, START_PAGE);\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      iotList: [],\n      showFilter: false,\n      conditions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllIotApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        this.props.getAllIotApi(this);\n      } else {\n        this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      page,\n      totalPage,\n      iotList\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        breadcrumb: true,\n        currentPage: \"IOT\",\n        title: \"IOT\",\n        isFilter: false,\n        isPrimaryBtn: () => this.handleAddIot(),\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY) ? \"+ Add IOT\" : \"\",\n        isSearch: true,\n        placeholder: \"Search IOT\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: iotList,\n          columnList: [{\n            coumnWidth: 200,\n            labelName: \"IOT model\",\n            dataKey: \"model\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"model\") {\n                return rowData.modelInfo.modelName;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"IOT Serial Number\",\n            dataKey: \"serialNo\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"serialNo\") {\n                return rowData.serialNo;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Sim Number\",\n            dataKey: \"simCardId\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"simCardId\") {\n                return rowData.simCardInfo.simcardId;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"IMEI Number\",\n            dataKey: \"imei\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"imei\") {\n                return rowData.imei;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Purchase Date\",\n            dataKey: \"createdOn\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"createdOn\") {\n                return formatDate(rowData.createdOn);\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [];\n                menuItem.push({\n                  title: \"Edit\",\n                  type: \"event\",\n                  handleClick: () => this.handleAddIot(rowData)\n                });\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY)) {\n                  return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                    menuItem: menuItem\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 25\n                  }, this);\n                }\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"IOT list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  iotState: state.IotState\n});\n\nconst mapDispatchToProps = {\n  getAllIotApi\n}; // Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Iot);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/iot/Iot.js"],"names":["React","Component","connect","CustomTable","PermissionList","START_PAGE","formatDate","getAssignedPermission","replaceHistory","ComponentHeader","ActionDropdown","getAllIotApi","Iot","constructor","props","handleFilter","setState","showFilter","state","handleAddIot","rowData","history","push","pathname","id","data","onChangeMethod","value","searchValue","conditions","key","search","clearSearch","currentPage","location","params","URLSearchParams","page","get","parseInt","iotList","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","permissionList","includes","ADD_UPDATE_TELEMATICS_INVENTORY","coumnWidth","labelName","dataKey","className","isCell","cell","modelInfo","modelName","serialNo","simCardInfo","simcardId","imei","createdOn","menuItem","title","type","handleClick","mapStateToProps","iotState","IotState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { formatDate, getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllIotApi } from './Api';\n\nclass Iot extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      iotList: [],\n      showFilter: false,\n      conditions: []\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllIotApi(this);\n\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        this.props.getAllIotApi(this);\n      } else {\n        this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  handleFilter = () => {\n    this.setState({\n      showFilter: !this.state.showFilter\n    })\n  }\n\n  handleAddIot = (rowData = \"\") => {\n    // console.log('rowData', rowData);\n    // this.props.history.push(\"/add-iot\");\n    if (rowData) {\n      this.props.history.push({\n        pathname: `/edit-iot/${rowData.id}`,\n        state: { data: rowData }\n      });\n    } else {\n      this.props.history.push(\"/add-iot\");\n    }\n  }\n\n  onChangeMethod = (value) => {\n    // console.log('Value', value);\n    this.setState({\n      searchValue: value,\n      conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    // this.props.getAllVendorsApi(START_PAGE, value);\n    this.props.getAllIotApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    // console.log('Hey', currentPage);\n    this.setState({ searchValue: \"\", conditions: [] },()=>{\n      if (currentPage === START_PAGE) {\n        this.props.getAllIotApi(this, START_PAGE);\n      }\n      replaceHistory(this.props.history, START_PAGE)\n    });\n\n  }\n\n  render() {\n    const { page, totalPage, iotList } = this.state;\n    const permissionList = getAssignedPermission();\n    return (\n      <>\n        <ComponentHeader\n          breadcrumb={true}\n          currentPage={\"IOT\"}\n          title={\"IOT\"}\n          isFilter={false}\n          isPrimaryBtn={() => this.handleAddIot()}\n          primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY) ? \"+ Add IOT\" : \"\"}\n          isSearch={true}\n          placeholder={\"Search IOT\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={iotList}\n            columnList={[\n              {\n                coumnWidth: 200,\n                labelName: \"IOT model\",\n                dataKey: \"model\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"model\") {\n                    return rowData.modelInfo.modelName\n                  }\n                }\n              },\n              {\n                coumnWidth: 350,\n                labelName: \"IOT Serial Number\",\n                dataKey: \"serialNo\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"serialNo\") {\n                    return rowData.serialNo\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Sim Number\",\n                dataKey: \"simCardId\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"simCardId\") {\n                    return rowData.simCardInfo.simcardId\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"IMEI Number\",\n                dataKey: \"imei\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"imei\") {\n                    return rowData.imei\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Purchase Date\",\n                dataKey: \"createdOn\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"createdOn\") {\n                    return formatDate(rowData.createdOn)\n                  }\n                }\n              },\n              {\n                coumnWidth: 50,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [];\n\n                    menuItem.push({\n                      title: \"Edit\",\n                      type: \"event\",\n                      handleClick: () => this.handleAddIot(rowData),\n                    })\n                    if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY)) {\n                      return (\n                        <ActionDropdown\n                          menuItem={menuItem}\n                        />\n                      )\n                    }\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"IOT list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  iotState: state.IotState\n});\nconst mapDispatchToProps = {\n  getAllIotApi,\n}\n// Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Iot);"]},"metadata":{},"sourceType":"module"}