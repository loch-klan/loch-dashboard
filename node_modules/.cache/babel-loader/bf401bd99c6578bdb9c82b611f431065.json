{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/customers/AddCreditsModal.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { BaseReactComponent, Form, FormElement, FormSubmitButton, CustomTextControl, FormValidator, SelectControl } from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport { Col, Row, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { addRewardsApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddCreditsModal extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"customer_id\", this.props.creditUserId);\n      data.append(\"reward_amount\", this.state.credits);\n      data.append(\"reward_message\", this.state.creditsMessage);\n      addRewardsApi(data, this.props.handleClose);\n    };\n\n    this.state = {\n      credits: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CustomModal, {\n      show: this.props.show,\n      onHide: () => this.props.handleClose(),\n      title: \"Add Rewards\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onValidSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: [/*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"credits\"),\n              label: \"Credits (in rupees)\",\n              required: true,\n              validations: [{\n                validate: FormValidator.isRequired,\n                message: \"Credits cannot be empty\"\n              }, {\n                validate: FormValidator.isPositiveInt,\n                message: \"Credits cannot be negative\"\n              }],\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Credits\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"creditsMessage\"),\n              label: \"Message\",\n              required: true,\n              validations: [{\n                validate: FormValidator.isRequired,\n                message: \"Credits cannot be empty\"\n              }],\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Credits\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit-wrapper\",\n          style: {\n            justifyContent: 'right'\n          },\n          children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n            customClass: `btn black-btn ${!this.state.credits && \"inactive-btn\"}`,\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({ ...state\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCreditsModal);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/customers/AddCreditsModal.js"],"names":["React","PropTypes","BaseReactComponent","Form","FormElement","FormSubmitButton","CustomTextControl","FormValidator","SelectControl","CustomModal","Col","Row","Button","connect","addRewardsApi","AddCreditsModal","constructor","props","onSubmit","data","URLSearchParams","append","creditUserId","state","credits","creditsMessage","handleClose","componentDidMount","render","show","linkState","validate","isRequired","message","isPositiveInt","type","settings","placeholder","justifyContent","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    BaseReactComponent, Form, FormElement, FormSubmitButton, CustomTextControl, FormValidator, SelectControl\n} from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport { Col, Row, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { addRewardsApi } from './Api';\n\nclass AddCreditsModal extends BaseReactComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            credits: \"\"\n        }\n    }\n\n    componentDidMount() { }\n\n    onSubmit = () => {\n        const data = new URLSearchParams();\n        data.append(\"customer_id\", this.props.creditUserId);\n        data.append(\"reward_amount\", this.state.credits);\n        data.append(\"reward_message\", this.state.creditsMessage);\n\n        addRewardsApi(data, this.props.handleClose);\n    }\n\n    render() {\n        return (\n            <CustomModal\n                show={this.props.show}\n                onHide={() => this.props.handleClose()}\n                title={\"Add Rewards\"}\n            >\n                <Form onValidSubmit={this.onSubmit}>\n                    <div className='modal-wrapper'>\n                        <Col md={12}>\n                            <FormElement\n                                valueLink={this.linkState(this, \"credits\")}\n                                label=\"Credits (in rupees)\"\n                                required\n                                validations={[\n                                    {\n                                        validate: FormValidator.isRequired,\n                                        message: \"Credits cannot be empty\"\n                                    },\n                                    {\n                                        validate: FormValidator.isPositiveInt,\n                                        message: \"Credits cannot be negative\"\n                                    },\n                                ]}\n                                control={{\n                                    type: CustomTextControl,\n                                    settings: {\n                                        placeholder: \"Enter Credits\",\n                                    }\n                                }}\n                            />\n                            <FormElement\n                                valueLink={this.linkState(this, \"creditsMessage\")}\n                                label=\"Message\"\n                                required\n                                validations={[\n                                    {\n                                        validate: FormValidator.isRequired,\n                                        message: \"Credits cannot be empty\"\n                                    },\n                                ]}\n                                control={{\n                                    type: CustomTextControl,\n                                    settings: {\n                                        placeholder: \"Enter Credits\",\n                                    }\n                                }}\n                            />\n                        </Col>\n                    </div>\n                    <div className=\"submit-wrapper\" style={{ justifyContent: 'right' }}>\n                        <FormSubmitButton customClass={`btn black-btn ${!this.state.credits && \"inactive-btn\"}`}>Done</FormSubmitButton>\n                    </div>\n                </Form>\n            </CustomModal>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = {\n    // getPosts: fetchPosts\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCreditsModal);"]},"metadata":{},"sourceType":"module"}