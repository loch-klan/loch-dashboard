{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/batteryModel/AddBatteryModel.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { addUpdateBatteryModelApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditBatteryModel extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onValidSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"model_name\", this.state.modelName);\n      data.append(\"model_company\", this.state.modelCompany);\n      data.append(\"battery_type\", this.state.batteryType);\n      data.append(\"optimal_voltage_range\", JSON.stringify({\n        \"min\": parseInt(this.state.minVoltage),\n        \"max\": parseInt(this.state.maxVoltage)\n      }));\n      data.append(\"charging_time\", JSON.stringify({\n        \"min\": parseInt(this.state.minCharging),\n        \"max\": parseInt(this.state.maxCharging)\n      }));\n      data.append(\"peak_power\", JSON.stringify({\n        \"min\": parseInt(this.state.minPeak),\n        \"max\": parseInt(this.state.maxPeak)\n      }));\n\n      if (this.state.editId) {\n        data.append(\"model_id\", this.state.editId);\n      }\n\n      addUpdateBatteryModelApi(data, () => {\n        this.props.history.push('/master/battery-models');\n      });\n    };\n\n    const editData = props.location.state ? props.location.state.editData : null;\n    this.state = {\n      editId: editData ? editData.id : \"\",\n      modelName: editData ? editData.modelName : \"\",\n      modelCompany: editData ? editData.modelCompany : \"\",\n      batteryType: editData ? editData.batteryInformation.type : \"\",\n      minVoltage: editData ? editData.batteryInformation.optimalVoltageRange.min : \"\",\n      maxVoltage: editData ? editData.batteryInformation.optimalVoltageRange.max : \"\",\n      minCharging: editData ? editData.batteryInformation.chargingTime.min : \"\",\n      maxCharging: editData ? editData.batteryInformation.chargingTime.max : \"\",\n      minPeak: editData ? editData.batteryInformation.peakPower.min : \"\",\n      maxPeak: editData ? editData.batteryInformation.peakPower.max : \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: `${this.state.editId ? \"Edit\" : \"Add\"} Battery Model`,\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.handleSave,\n        primaryBtnText: \"Save Battery Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onValidSubmit,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"modelName\"),\n                  label: \"Model Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Model name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Model Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"modelCompany\"),\n                  label: \"Model Company\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Model company cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Model Company\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"batteryType\"),\n                  label: \"Battery Type\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Battery type cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Battery Type\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minVoltage\"),\n                    label: \"Optimal Voltage Range\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum voltage cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Voltage\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxVoltage\"),\n                    label: \"\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Maximum voltage cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Voltage\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minCharging\"),\n                    label: \"Charging Time\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum charging time cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Charging Time\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxCharging\"),\n                    label: \"\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Maximum charging time cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Charging Time\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 202,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minPeak\"),\n                    label: \"Peak Power\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum peak power cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Peak Power\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxPeak\"),\n                    label: \"\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Maximum peak power cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Peak Power\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({ ...state\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBatteryModel);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/batteryModel/AddBatteryModel.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomTextControl","Form","FormElement","FormValidator","ComponentHeader","ReactDOM","addUpdateBatteryModelApi","AddEditBatteryModel","constructor","props","handleSave","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onValidSubmit","data","URLSearchParams","append","state","modelName","modelCompany","batteryType","JSON","stringify","parseInt","minVoltage","maxVoltage","minCharging","maxCharging","minPeak","maxPeak","editId","history","push","editData","location","id","batteryInformation","type","optimalVoltageRange","min","max","chargingTime","peakPower","componentDidMount","render","goBack","el","linkState","validate","isRequired","message","settings","placeholder","isNum","isInt","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { addUpdateBatteryModelApi } from './Api';\n\nclass AddEditBatteryModel extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const editData = props.location.state ? props.location.state.editData : null;\n    this.state = {\n      editId: editData ? editData.id : \"\",\n      modelName: editData ? editData.modelName : \"\",\n      modelCompany: editData ? editData.modelCompany : \"\",\n      batteryType: editData ? editData.batteryInformation.type : \"\",\n      minVoltage: editData ? editData.batteryInformation.optimalVoltageRange.min : \"\",\n      maxVoltage: editData ? editData.batteryInformation.optimalVoltageRange.max : \"\",\n      minCharging: editData ? editData.batteryInformation.chargingTime.min : \"\",\n      maxCharging: editData ? editData.batteryInformation.chargingTime.max : \"\",\n      minPeak: editData ? editData.batteryInformation.peakPower.min : \"\",\n      maxPeak: editData ? editData.batteryInformation.peakPower.max : \"\",\n    }\n  }\n  componentDidMount() { }\n  handleSave = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  onValidSubmit = () => {\n    const data = new URLSearchParams();\n    data.append(\"model_name\", this.state.modelName);\n    data.append(\"model_company\", this.state.modelCompany);\n    data.append(\"battery_type\", this.state.batteryType);\n    data.append(\"optimal_voltage_range\", JSON.stringify({ \"min\": parseInt(this.state.minVoltage), \"max\": parseInt(this.state.maxVoltage) }));\n    data.append(\"charging_time\", JSON.stringify({ \"min\": parseInt(this.state.minCharging), \"max\": parseInt(this.state.maxCharging) }));\n    data.append(\"peak_power\", JSON.stringify({ \"min\": parseInt(this.state.minPeak), \"max\": parseInt(this.state.maxPeak) }));\n    if (this.state.editId) {\n      data.append(\"model_id\", this.state.editId);\n    }\n    addUpdateBatteryModelApi(data, () => {\n      this.props.history.push('/master/battery-models');\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={`${this.state.editId ? \"Edit\" : \"Add\"} Battery Model`}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.handleSave}\n          primaryBtnText={\"Save Battery Model\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onValidSubmit} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"modelName\")}\n                    label=\"Model Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Model name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Model Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"modelCompany\")}\n                    label=\"Model Company\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Model company cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Model Company\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"batteryType\")}\n                    label=\"Battery Type\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Battery type cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Battery Type\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minVoltage\")}\n                      label=\"Optimal Voltage Range\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Minimum voltage cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Voltage\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxVoltage\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Maximum voltage cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Voltage\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minCharging\")}\n                      label=\"Charging Time\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Minimum charging time cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Charging Time\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxCharging\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Maximum charging time cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Charging Time\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minPeak\")}\n                      label=\"Peak Power\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Minimum peak power cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Peak Power\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxPeak\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Maximum peak power cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        },\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Peak Power\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  ...state\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBatteryModel);"]},"metadata":{},"sourceType":"module"}