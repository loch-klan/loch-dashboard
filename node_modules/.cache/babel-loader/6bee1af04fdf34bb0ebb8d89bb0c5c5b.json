{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/bookingManagement/AddPenalty.js\";\nimport React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { API_URL } from \"../../utils/Constant\";\nimport { BaseReactComponent, CustomTextControl, CustomRadio, Form, FormElement, FormSubmitButton, FormValidator, FileUploadControl } from \"../../utils/form\"; // import { cancelBookingApi } from '../Api';\n\nimport { CustomModal } from \"../common\";\nimport { addPenaltyApi } from \"./Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddPenalty extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"order_id\", this.props.bookingId);\n      if (this.state.penaltyAmount) data.append(\"damage_amount\", this.state.penaltyAmount);\n      if (this.state.note) data.append(\"damage_details\", this.state.note);\n      if (this.state.extraKm) data.append(\"extra_kms\", this.state.extraKm);\n\n      if (this.state.damageImages) {\n        let images = [];\n        this.state.damageImages.map(item => images.push(item.imageId));\n        console.log(\"images\", images);\n        data.append(\"damage_attachment_ids\", JSON.stringify(images));\n      }\n\n      addPenaltyApi(data, this.props.getBookingDetails, this.props.handleClose);\n    };\n\n    this.state = {\n      extraKm: \"\",\n      penaltyAmount: \"\",\n      damageImages: []\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CustomModal, {\n      show: this.props.show,\n      onHide: this.props.handleClose,\n      title: \"Add Penalty\",\n      modalClass: \"change-password\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onValidSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: [/*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"penaltyAmount\"),\n              label: \"Damage Penalty Amount (in rupees)\",\n              validations: [// {\n              //     validate: FormValidator.isRequired,\n              //     message: \"Penalty Amount cannot be empty\"\n              // },\n              {\n                validate: FormValidator.isPositiveInt,\n                message: \"Damage Penalty Amount cannot be negative\"\n              }],\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Damage Penalty Amount\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"note\"),\n              label: \"Damage Details\" // required\n              // validations={[\n              //     {\n              //         validate: FormValidator.isRequired,\n              //         message: \"Notes cannot be empty\"\n              //     },\n              // ]}\n              ,\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Damage Details\",\n                  as: \"textarea\",\n                  rows: 2\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"damageImages\"),\n              label: \"Damage Images\" // required\n              // validations={[\n              //   {\n              //     validate: FormValidator.isRequired,\n              //     message: \"File is required\",\n              //   },\n              // ]}\n              ,\n              control: {\n                type: FileUploadControl,\n                settings: {\n                  moduleName: \"offering\",\n                  subModule: \"vehicle\",\n                  fileType: \"IMAGE\",\n                  extensions: [\"image/*\"],\n                  maxFiles: 5,\n                  maxFileSize: 100000000,\n                  onSelect: (file, callback) => {\n                    // You will need to generate signedURL by calling API and then call callback\n                    const fileInfo = {\n                      id: file.lastModified,\n                      name: file.name,\n                      size: file.size,\n                      mimeType: file.type,\n                      path: \"multi\" + (this.state.damageImages.length + 1) + \".jpg\"\n                    };\n                    callback(fileInfo, API_URL);\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"extraKm\"),\n              label: \"Extra Kilometers\",\n              validations: [// {\n              //     validate: FormValidator.isRequired,\n              //     message: \"Penalty Amount cannot be empty\"\n              // },\n              {\n                validate: FormValidator.isPositiveInt,\n                message: \"Penalty Amount cannot be negative\"\n              }],\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Extra Kilometers\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit-wrapper\",\n          style: {\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n            customClass: `btn black-btn`,\n            children: \"Confirm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({ ...state\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPenalty);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/bookingManagement/AddPenalty.js"],"names":["React","Col","connect","API_URL","BaseReactComponent","CustomTextControl","CustomRadio","Form","FormElement","FormSubmitButton","FormValidator","FileUploadControl","CustomModal","addPenaltyApi","AddPenalty","constructor","props","onSubmit","data","URLSearchParams","append","bookingId","state","penaltyAmount","note","extraKm","damageImages","images","map","item","push","imageId","console","log","JSON","stringify","getBookingDetails","handleClose","componentDidMount","render","show","linkState","validate","isPositiveInt","message","type","settings","placeholder","as","rows","moduleName","subModule","fileType","extensions","maxFiles","maxFileSize","onSelect","file","callback","fileInfo","id","lastModified","name","size","mimeType","path","length","justifyContent","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { API_URL } from \"../../utils/Constant\";\nimport {\n  BaseReactComponent,\n  CustomTextControl,\n  CustomRadio,\n  Form,\n  FormElement,\n  FormSubmitButton,\n  FormValidator,\n  FileUploadControl,\n} from \"../../utils/form\";\n// import { cancelBookingApi } from '../Api';\nimport { CustomModal } from \"../common\";\nimport { addPenaltyApi } from \"./Api\";\n\nclass AddPenalty extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      extraKm: \"\",\n      penaltyAmount: \"\",\n      damageImages: [],\n    };\n  }\n\n  componentDidMount() {}\n\n  onSubmit = () => {\n    const data = new URLSearchParams();\n    data.append(\"order_id\", this.props.bookingId);\n    if (this.state.penaltyAmount)\n      data.append(\"damage_amount\", this.state.penaltyAmount);\n    if (this.state.note) data.append(\"damage_details\", this.state.note);\n    if (this.state.extraKm) data.append(\"extra_kms\", this.state.extraKm);\n    if (this.state.damageImages) {\n      let images = [];\n      this.state.damageImages.map((item) => images.push(item.imageId));\n      console.log(\"images\", images);\n      data.append(\"damage_attachment_ids\", JSON.stringify(images));\n    }\n\n    addPenaltyApi(data, this.props.getBookingDetails, this.props.handleClose);\n  };\n\n  render() {\n    return (\n      <CustomModal\n        show={this.props.show}\n        onHide={this.props.handleClose}\n        title=\"Add Penalty\"\n        modalClass={\"change-password\"}\n      >\n        <Form onValidSubmit={this.onSubmit}>\n          <div className=\"\">\n            <Col md={12}>\n              <FormElement\n                valueLink={this.linkState(this, \"penaltyAmount\")}\n                label=\"Damage Penalty Amount (in rupees)\"\n                validations={[\n                  // {\n                  //     validate: FormValidator.isRequired,\n                  //     message: \"Penalty Amount cannot be empty\"\n                  // },\n                  {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Damage Penalty Amount cannot be negative\",\n                  },\n                ]}\n                control={{\n                  type: CustomTextControl,\n                  settings: {\n                    placeholder: \"Enter Damage Penalty Amount\",\n                  },\n                }}\n              />\n              <FormElement\n                valueLink={this.linkState(this, \"note\")}\n                label=\"Damage Details\"\n                // required\n                // validations={[\n                //     {\n                //         validate: FormValidator.isRequired,\n                //         message: \"Notes cannot be empty\"\n                //     },\n                // ]}\n                control={{\n                  type: CustomTextControl,\n                  settings: {\n                    placeholder: \"Enter Damage Details\",\n                    as: \"textarea\",\n                    rows: 2,\n                  },\n                }}\n              />\n              <FormElement\n                valueLink={this.linkState(this, \"damageImages\")}\n                label=\"Damage Images\"\n                // required\n                // validations={[\n                //   {\n                //     validate: FormValidator.isRequired,\n                //     message: \"File is required\",\n                //   },\n                // ]}\n                control={{\n                  type: FileUploadControl,\n                  settings: {\n                    moduleName: \"offering\",\n                    subModule: \"vehicle\",\n                    fileType: \"IMAGE\",\n                    extensions: [\"image/*\"],\n                    maxFiles: 5,\n                    maxFileSize: 100000000,\n                    onSelect: (file, callback) => {\n                      // You will need to generate signedURL by calling API and then call callback\n                      const fileInfo = {\n                        id: file.lastModified,\n                        name: file.name,\n                        size: file.size,\n                        mimeType: file.type,\n                        path:\n                          \"multi\" +\n                          (this.state.damageImages.length + 1) +\n                          \".jpg\",\n                      };\n                      callback(fileInfo, API_URL);\n                    },\n                  },\n                }}\n              />\n              <FormElement\n                valueLink={this.linkState(this, \"extraKm\")}\n                label=\"Extra Kilometers\"\n                validations={[\n                  // {\n                  //     validate: FormValidator.isRequired,\n                  //     message: \"Penalty Amount cannot be empty\"\n                  // },\n                  {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Penalty Amount cannot be negative\",\n                  },\n                ]}\n                control={{\n                  type: CustomTextControl,\n                  settings: {\n                    placeholder: \"Enter Extra Kilometers\",\n                  },\n                }}\n              />\n            </Col>\n          </div>\n          <div className=\"submit-wrapper\" style={{ justifyContent: \"center\" }}>\n            <FormSubmitButton customClass={`btn black-btn`}>\n              Confirm\n            </FormSubmitButton>\n          </div>\n        </Form>\n      </CustomModal>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  ...state,\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPenalty);\n"]},"metadata":{},"sourceType":"module"}