{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/locationMaster/_utils/MyGoogleMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from \"react\";\nimport { LoadScript, GoogleMap, DrawingManager, Polygon } from \"@react-google-maps/api\";\nimport { GOOGLE_API_KEY } from \"../../../utils/Constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyGoogleMap(props) {\n  _s();\n\n  // Store Polygon path in state\n  const [pathNew, setNewPath] = useState([]);\n\n  const onLoad = drawingManager => {// console.log(\"drawingManager\",drawingManager)\n  };\n\n  const onPolygonComplete = polygon => {\n    let polygonBounds = polygon.getPath();\n    let bounds = [];\n\n    for (let i = 0; i < polygonBounds.length; i++) {\n      let point = {\n        lat: polygonBounds.getAt(i).lat(),\n        lng: polygonBounds.getAt(i).lng()\n      };\n      bounds.push(point);\n    }\n\n    setNewPath(bounds);\n    props.setPath(bounds);\n  }; // const onClick = (poly) =>{\n  //   // console.log('Poly',poly);\n  // }\n\n\n  let coordinates = props.polygon && props.polygon.geo_fencing.coordinates[0].map(item => {\n    return {\n      lat: item[0],\n      lng: item[1]\n    };\n  }); // Store Polygon path in state\n\n  const [pathOld, setOldPath] = useState(coordinates ? coordinates : pathNew); // Define refs for Polygon instance and listeners\n\n  const polygonRef = useRef(null);\n  const listenersRef = useRef([]); // Call setOldPath with new edited path\n\n  const onEdit = useCallback(() => {\n    if (polygonRef.current) {\n      const nextPath = polygonRef.current.getPath().getArray().map(latLng => {\n        return {\n          lat: latLng.lat(),\n          lng: latLng.lng()\n        };\n      });\n      setOldPath(nextPath); // coordinates = nextPath;\n\n      props.setPath(nextPath);\n    }\n  }, [setOldPath]); // Bind refs to current Polygon and listeners\n\n  const onLoadPolygon = useCallback(polygon => {\n    polygonRef.current = polygon;\n    const path = polygon.getPath();\n    listenersRef.current.push(path.addListener(\"set_at\", onEdit), path.addListener(\"insert_at\", onEdit), path.addListener(\"remove_at\", onEdit));\n  }, [onEdit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: [\"drawing\"],\n      id: \"script-loader\",\n      googleMapsApiKey: GOOGLE_API_KEY,\n      language: \"en\",\n      region: \"us\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerClassName: \"area-map\",\n        center: {\n          lat: 19.216847,\n          lng: 72.864683\n        },\n        zoom: 8,\n        version: \"weekly\",\n        on: true,\n        children: // props.polygon && props.polygon.geo_fencing.coordinates[0].length > 0\n        pathOld.length > 0 || pathNew.length > 0 ? /*#__PURE__*/_jsxDEV(Polygon, {\n          path: pathOld.length > 0 ? pathOld : pathNew.length > 0 ? pathNew : null,\n          editable: true,\n          draggable: true,\n          options: {\n            fillColor: \"yellow\",\n            fillOpacity: 0.4,\n            strokeColor: \"#d35400\",\n            strokeOpacity: 0.8,\n            strokeWeight: 3\n          } // Event used when manipulating and adding points\n          ,\n          onMouseUp: onEdit // Event used when dragging the whole Polygon\n          ,\n          onDragEnd: onEdit,\n          onLoad: onLoadPolygon // onUnmount={onUnmount}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(DrawingManager, {\n          drawingMode: \"polygon\",\n          onLoad: onLoad,\n          onPolygonComplete: onPolygonComplete // options={}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyGoogleMap, \"qQLUN2OwzwRGt9farhmpZnmWF4w=\");\n\n_c = MyGoogleMap;\nexport default MyGoogleMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/locationMaster/_utils/MyGoogleMap.js"],"names":["React","useState","useRef","useCallback","LoadScript","GoogleMap","DrawingManager","Polygon","GOOGLE_API_KEY","MyGoogleMap","props","pathNew","setNewPath","onLoad","drawingManager","onPolygonComplete","polygon","polygonBounds","getPath","bounds","i","length","point","lat","getAt","lng","push","setPath","coordinates","geo_fencing","map","item","pathOld","setOldPath","polygonRef","listenersRef","onEdit","current","nextPath","getArray","latLng","onLoadPolygon","path","addListener","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from \"react\";\nimport { LoadScript, GoogleMap, DrawingManager, Polygon } from \"@react-google-maps/api\";\nimport { GOOGLE_API_KEY } from \"../../../utils/Constant\";\n\nfunction MyGoogleMap(props) {\n\n  // Store Polygon path in state\n  const [pathNew, setNewPath] = useState([]);\n\n  const onLoad = drawingManager => {\n    // console.log(\"drawingManager\",drawingManager)\n  }\n\n  const onPolygonComplete = polygon => {\n    let polygonBounds = polygon.getPath();\n    let bounds = [];\n    for (let i = 0; i < polygonBounds.length; i++) {\n      let point = {\n        lat: polygonBounds.getAt(i).lat(),\n        lng: polygonBounds.getAt(i).lng()\n      };\n      bounds.push(point);\n    }\n    setNewPath(bounds);\n    props.setPath(bounds);\n  }\n\n  // const onClick = (poly) =>{\n  //   // console.log('Poly',poly);\n  // }\n  let coordinates = props.polygon && props.polygon.geo_fencing.coordinates[0].map((item)=>{\n    return(\n      {\n        lat: item[0],\n        lng: item[1],\n      }\n    )\n  })\n\n  // Store Polygon path in state\n  const [pathOld, setOldPath] = useState(coordinates ? coordinates : pathNew);\n  // Define refs for Polygon instance and listeners\n  const polygonRef = useRef(null);\n  const listenersRef = useRef([]);\n  // Call setOldPath with new edited path\n  const onEdit = useCallback(() => {\n    if (polygonRef.current) {\n      const nextPath = polygonRef.current\n        .getPath()\n        .getArray()\n        .map(latLng => {\n          return { lat: latLng.lat(), lng: latLng.lng() };\n        });\n      setOldPath(nextPath);\n      // coordinates = nextPath;\n      props.setPath(nextPath)\n    }\n  }, [setOldPath]);\n\n  // Bind refs to current Polygon and listeners\n  const onLoadPolygon = useCallback(\n    polygon => {\n      polygonRef.current = polygon;\n      const path = polygon.getPath();\n      listenersRef.current.push(\n        path.addListener(\"set_at\", onEdit),\n        path.addListener(\"insert_at\", onEdit),\n        path.addListener(\"remove_at\", onEdit)\n      );\n    },\n    [onEdit]\n  );\n  return (\n    <div className=\"map-wrapper\">\n      <LoadScript\n        libraries={[\"drawing\"]}\n        id=\"script-loader\"\n        googleMapsApiKey={GOOGLE_API_KEY}\n        language=\"en\"\n        region=\"us\"\n      >\n        <GoogleMap\n          mapContainerClassName=\"area-map\"\n          center={{ lat: 19.216847, lng: 72.864683 }}\n          zoom={8}\n          version=\"weekly\"\n          on\n        >\n          {\n            // props.polygon && props.polygon.geo_fencing.coordinates[0].length > 0\n            (pathOld.length>0 || pathNew.length>0)\n            ?\n            <Polygon\n              path={pathOld.length>0 ? pathOld : pathNew.length>0 ? pathNew : null}\n              editable\n              draggable\n              options={{\n                  fillColor: \"yellow\",\n                  fillOpacity: 0.4,\n                  strokeColor: \"#d35400\",\n                  strokeOpacity: 0.8,\n                  strokeWeight: 3\n              }}\n              // Event used when manipulating and adding points\n              onMouseUp={onEdit}\n              // Event used when dragging the whole Polygon\n              onDragEnd={onEdit}\n              onLoad={onLoadPolygon}\n              // onUnmount={onUnmount}\n            />\n            :\n            <DrawingManager\n              drawingMode=\"polygon\"\n              onLoad={onLoad}\n              onPolygonComplete={onPolygonComplete}\n              // options={}\n              />\n          }\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n}\n\nexport default MyGoogleMap;\n\n\n"]},"metadata":{},"sourceType":"module"}