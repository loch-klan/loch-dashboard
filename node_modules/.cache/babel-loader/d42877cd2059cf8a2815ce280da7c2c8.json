{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/settlement/Report.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ComponentHeader } from \"../common\";\nimport { Grid, Image, Row, Col, Button, Tab, Tabs } from \"react-bootstrap\";\nimport CustomTable from \"../../utils/commonComponent/CustomTable\";\nimport { AccountType, API_LIMIT, OrderStatus, START_PAGE } from \"../../utils/Constant\";\nimport { getOrderRevenueReportApi, getReportsFranchiseWiseApi } from \"./Api\";\nimport moment from \"moment\";\nimport { getUserAccountType } from \"../../utils/ManageToken\";\nimport { getOrdersApi } from \"../bookingManagement/Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Report extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setKey = k => {\n      this.setState({\n        selectedTab: k,\n        page: 1,\n        conditions: [{\n          key: \"SEARCH_BY_STATUS_IN\",\n          value: k === \"default\" ? [30] : [40]\n        }]\n      }, () => {\n        getOrdersApi(this);\n      });\n      this.props.history.replace({\n        search: `?tab=${k}&p=1`\n      });\n    };\n\n    this.handleOnChange = details => {\n      if (getUserAccountType() === AccountType.FRANCHISE) {\n        this.setState({\n          conditions: [...this.state.conditions, {\n            key: \"SEARCH_BY_DATE_BETWEEN\",\n            value: [moment(details.fromDate).unix(), moment(details.toDate).unix()]\n          }]\n        }, () => {\n          // getOrdersApi(this);\n          const data2 = new URLSearchParams();\n          data2.append(\"start_date\", moment(details.fromDate).format(\"DD-MM-YYYY\"));\n          data2.append(\"end_date\", moment(details.toDate).format(\"DD-MM-YYYY\"));\n          getOrderRevenueReportApi(data2, this);\n        });\n      } else {\n        console.log(\"data\", details);\n        const data = new URLSearchParams();\n        data.append(\"start_date\", moment(details.fromDate).format(\"DD-MM-YYYY\"));\n        data.append(\"end_date\", moment(details.toDate).format(\"DD-MM-YYYY\"));\n        data.append(\"start\", START_PAGE);\n        data.append(\"limit\", API_LIMIT);\n        getReportsFranchiseWiseApi(data, this);\n        const data2 = new URLSearchParams();\n        data2.append(\"start_date\", moment(details.fromDate).format(\"DD-MM-YYYY\"));\n        data2.append(\"end_date\", moment(details.toDate).format(\"DD-MM-YYYY\"));\n        getOrderRevenueReportApi(data2, this);\n      }\n    };\n\n    this.showOrders = bookingsList => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: bookingsList,\n          columnList: [{\n            coumnWidth: 120,\n            labelName: \"Order Id\",\n            dataKey: \"code\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"code\") {\n                return rowData.code;\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"Customer Email\",\n            dataKey: \"customer\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"customer\") {\n                var _rowData$customer;\n\n                return (_rowData$customer = rowData.customer) === null || _rowData$customer === void 0 ? void 0 : _rowData$customer.email;\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"Start Time\",\n            dataKey: \"start_datetime\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"start_datetime\") {\n                return moment(rowData.start_datetime).format(\"LLL\");\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"End Time\",\n            dataKey: \"end_datetime\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"end_datetime\") {\n                return moment(rowData.end_datetime).format(\"LLL\");\n              }\n            }\n          }, {\n            coumnWidth: 120,\n            labelName: \"Total Fare (â‚¹)\",\n            dataKey: \"total_amount\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"total_amount\") {\n                return rowData.total_amount;\n              }\n            }\n          }, {\n            coumnWidth: 120,\n            labelName: \"Status\",\n            dataKey: \"status\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"status\") {\n                return OrderStatus.getText(rowData.status);\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: this.state.totalPage,\n          currentPage: this.state.page,\n          message: \"List is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = {\n      conditions: [{\n        key: \"SEARCH_BY_STATUS_IN\",\n        value: [30]\n      }],\n      orderRevenueReport: \"\",\n      isDetail: true,\n      selectedTab: \"default\",\n      franchiseData: [{\n        name: \"F1\",\n        totalBooking: 23,\n        totalVehicle: 20,\n        deployed: 32,\n        undeployed: 22,\n        revenue: 2345\n      }, {\n        name: \"F2\",\n        totalBooking: 23,\n        totalVehicle: 20,\n        deployed: 32,\n        undeployed: 22,\n        revenue: 2345\n      }]\n    };\n  }\n\n  componentDidMount() {\n    getOrdersApi(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get(\"p\"), 10) || 1;\n    const search = params.get(\"search\") || \"\";\n\n    if (prevPage !== page) {\n      if (this.state.key === \"default\") {// getOrdersApi(this);\n      } else {\n        getOrdersApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      franchiseData,\n      reportData,\n      orderRevenueReport,\n      bookingsList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        breadcrumb: true,\n        currentPage: \"Company Report\",\n        title: \"Report\",\n        isFilter: false,\n        isSearch: false,\n        isSettleSearch: false,\n        isReport: true,\n        onChangeMethod: data => this.handleOnChange(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"report-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"report-data\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"report-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Total Hours\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                  children: orderRevenueReport ? parseFloat(orderRevenueReport.total_booked_hours).toFixed(2) : \"NA\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"report-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Total Bookings\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                  children: orderRevenueReport.total_orders || \"NA\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"report-box\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"left\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"Total Revenue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                    children: orderRevenueReport ? parseFloat(orderRevenueReport.total_platform_amount + orderRevenueReport.total_platform_amount).toFixed(2) : \"NA\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analytic-data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"red-hat-display-bold f-s-20 lh-26\",\n              children: \"Franchise wise data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"red-hat-display-bold f-s-24 lh-32\",\n              children: orderRevenueReport.total_franchise || \"NA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"red-hat-display-medium lh-16\",\n              children: \"Franchise\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"red-hat-display-bold f-s-24 lh-32\",\n              children: orderRevenueReport.total_vehicles || \"NA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"red-hat-display-medium lh-16\",\n              children: \"Total vehicle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"red-hat-display-bold f-s-24 lh-32\",\n              children: orderRevenueReport ? parseFloat(orderRevenueReport.avg_booked_hours).toFixed(2) : \"NA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"red-hat-display-medium lh-16\",\n              children: \"Average Booking Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"red-hat-display-bold f-s-24 lh-32\",\n              children: orderRevenueReport ? parseFloat(orderRevenueReport.total_booked_hours).toFixed(2) : \"NA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"red-hat-display-medium lh-16\",\n              children: \"Total Booked Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), getUserAccountType() === AccountType.FRANCHISE ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabular-data\",\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            id: \"controlled-tab-example\",\n            activeKey: this.state.selectedTab,\n            onSelect: k => this.setKey(k),\n            className: \"pricing-tabs\",\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              eventKey: \"default\",\n              title: \"Upcoming\",\n              children: this.showOrders(bookingsList)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              eventKey: \"30\",\n              title: \"Return\",\n              children: this.showOrders(bookingsList)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabular-data\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"custom-table-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(CustomTable, {\n              tableData: reportData,\n              columnList: [{\n                coumnWidth: 280,\n                labelName: \"Franchise Name\",\n                dataKey: \"franchise_name\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"franchise_name\") {\n                    return rowData.franchise_name;\n                  }\n                }\n              }, {\n                coumnWidth: 250,\n                labelName: \"Total Bookings\",\n                dataKey: \"total_orders\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"total_orders\") {\n                    return rowData.total_orders;\n                  }\n                }\n              }, {\n                coumnWidth: 300,\n                labelName: \"Total Vehicle\",\n                dataKey: \"total_vehicles\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"total_vehicles\") {\n                    return rowData.total_vehicles;\n                  }\n                }\n              }, {\n                coumnWidth: 350,\n                labelName: \"Average Booked Hours\",\n                dataKey: \"avg_booked_hours\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"avg_booked_hours\") {\n                    return parseFloat(rowData.avg_booked_hours).toFixed(2);\n                  }\n                }\n              }, {\n                coumnWidth: 350,\n                labelName: \"Total Booked Hours\",\n                dataKey: \"total_booked_hours\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"total_booked_hours\") {\n                    return parseFloat(rowData.total_booked_hours).toFixed(2);\n                  }\n                }\n              }, {\n                coumnWidth: 350,\n                labelName: \"Revenue\",\n                dataKey: \"total_platform_amount\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"total_platform_amount\") {\n                    return parseFloat(rowData.total_platform_amount + rowData.total_franchise_amount).toFixed(2);\n                  }\n                }\n              }] // For Pagination\n              ,\n              history: this.props.history,\n              location: this.props.location,\n              totalPages: this.state.totalPage,\n              currentPage: this.state.page,\n              message: \"List is empty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  settlementState: state.SettlementState\n});\n\nconst mapDispatchToProps = {\n  getReportsFranchiseWiseApi,\n  getOrderRevenueReportApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Report);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/settlement/Report.js"],"names":["React","Component","connect","ComponentHeader","Grid","Image","Row","Col","Button","Tab","Tabs","CustomTable","AccountType","API_LIMIT","OrderStatus","START_PAGE","getOrderRevenueReportApi","getReportsFranchiseWiseApi","moment","getUserAccountType","getOrdersApi","Report","constructor","props","setKey","k","setState","selectedTab","page","conditions","key","value","history","replace","search","handleOnChange","details","FRANCHISE","state","fromDate","unix","toDate","data2","URLSearchParams","append","format","console","log","data","showOrders","bookingsList","coumnWidth","labelName","dataKey","className","isCell","cell","rowData","code","customer","email","start_datetime","end_datetime","total_amount","getText","status","location","totalPage","orderRevenueReport","isDetail","franchiseData","name","totalBooking","totalVehicle","deployed","undeployed","revenue","componentDidMount","componentDidUpdate","prevProps","prevState","prevParams","prevPage","parseInt","get","params","render","reportData","parseFloat","total_booked_hours","toFixed","total_orders","total_platform_amount","total_franchise","total_vehicles","avg_booked_hours","franchise_name","total_franchise_amount","mapStateToProps","settlementState","SettlementState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ComponentHeader } from \"../common\";\nimport { Grid, Image, Row, Col, Button, Tab, Tabs } from \"react-bootstrap\";\nimport CustomTable from \"../../utils/commonComponent/CustomTable\";\nimport {\n  AccountType,\n  API_LIMIT,\n  OrderStatus,\n  START_PAGE,\n} from \"../../utils/Constant\";\nimport { getOrderRevenueReportApi, getReportsFranchiseWiseApi } from \"./Api\";\nimport moment from \"moment\";\nimport { getUserAccountType } from \"../../utils/ManageToken\";\nimport { getOrdersApi } from \"../bookingManagement/Api\";\n\nclass Report extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      conditions: [{ key: \"SEARCH_BY_STATUS_IN\", value: [30] }],\n      orderRevenueReport: \"\",\n      isDetail: true,\n      selectedTab: \"default\",\n      franchiseData: [\n        {\n          name: \"F1\",\n          totalBooking: 23,\n          totalVehicle: 20,\n          deployed: 32,\n          undeployed: 22,\n          revenue: 2345,\n        },\n        {\n          name: \"F2\",\n          totalBooking: 23,\n          totalVehicle: 20,\n          deployed: 32,\n          undeployed: 22,\n          revenue: 2345,\n        },\n      ],\n    };\n  }\n\n  componentDidMount() {\n    getOrdersApi(this);\n  }\n\n  setKey = (k) => {\n    this.setState(\n      {\n        selectedTab: k,\n        page: 1,\n        conditions: [\n          {\n            key: \"SEARCH_BY_STATUS_IN\",\n            value: k === \"default\" ? [30] : [40],\n          },\n        ],\n      },\n      () => {\n        getOrdersApi(this);\n      }\n    );\n    this.props.history.replace({\n      search: `?tab=${k}&p=1`,\n    });\n  };\n\n  handleOnChange = (details) => {\n    if (getUserAccountType() === AccountType.FRANCHISE) {\n      this.setState(\n        {\n          conditions: [\n            ...this.state.conditions,\n            {\n              key: \"SEARCH_BY_DATE_BETWEEN\",\n              value: [\n                moment(details.fromDate).unix(),\n                moment(details.toDate).unix(),\n              ],\n            },\n          ],\n        },\n        () => {\n          // getOrdersApi(this);\n          const data2 = new URLSearchParams();\n          data2.append(\n            \"start_date\",\n            moment(details.fromDate).format(\"DD-MM-YYYY\")\n          );\n          data2.append(\"end_date\", moment(details.toDate).format(\"DD-MM-YYYY\"));\n          getOrderRevenueReportApi(data2, this);\n        }\n      );\n    } else {\n      console.log(\"data\", details);\n      const data = new URLSearchParams();\n      data.append(\"start_date\", moment(details.fromDate).format(\"DD-MM-YYYY\"));\n      data.append(\"end_date\", moment(details.toDate).format(\"DD-MM-YYYY\"));\n      data.append(\"start\", START_PAGE);\n      data.append(\"limit\", API_LIMIT);\n      getReportsFranchiseWiseApi(data, this);\n      const data2 = new URLSearchParams();\n      data2.append(\"start_date\", moment(details.fromDate).format(\"DD-MM-YYYY\"));\n      data2.append(\"end_date\", moment(details.toDate).format(\"DD-MM-YYYY\"));\n      getOrderRevenueReportApi(data2, this);\n    }\n  };\n\n  showOrders = (bookingsList) => {\n    return (\n      <div className=\"custom-table-wrapper\">\n        <CustomTable\n          tableData={bookingsList}\n          columnList={[\n            {\n              coumnWidth: 120,\n              labelName: \"Order Id\",\n              dataKey: \"code\",\n              className: \"red-hat-display-bold\",\n              isCell: true,\n              cell: (rowData, dataKey) => {\n                if (dataKey === \"code\") {\n                  return rowData.code;\n                }\n              },\n            },\n            {\n              coumnWidth: 230,\n              labelName: \"Customer Email\",\n              dataKey: \"customer\",\n              className: \"\",\n              isCell: true,\n              cell: (rowData, dataKey) => {\n                if (dataKey === \"customer\") {\n                  return rowData.customer?.email;\n                }\n              },\n            },\n            {\n              coumnWidth: 230,\n              labelName: \"Start Time\",\n              dataKey: \"start_datetime\",\n              className: \"\",\n              isCell: true,\n              cell: (rowData, dataKey) => {\n                if (dataKey === \"start_datetime\") {\n                  return moment(rowData.start_datetime).format(\"LLL\");\n                }\n              },\n            },\n            {\n              coumnWidth: 230,\n              labelName: \"End Time\",\n              dataKey: \"end_datetime\",\n              className: \"\",\n              isCell: true,\n              cell: (rowData, dataKey) => {\n                if (dataKey === \"end_datetime\") {\n                  return moment(rowData.end_datetime).format(\"LLL\");\n                }\n              },\n            },\n            {\n              coumnWidth: 120,\n              labelName: \"Total Fare (â‚¹)\",\n              dataKey: \"total_amount\",\n              className: \"red-hat-display-bold\",\n              isCell: true,\n              cell: (rowData, dataKey) => {\n                if (dataKey === \"total_amount\") {\n                  return rowData.total_amount;\n                }\n              },\n            },\n            {\n              coumnWidth: 120,\n              labelName: \"Status\",\n              dataKey: \"status\",\n              className: \"\",\n              isCell: true,\n              cell: (rowData, dataKey) => {\n                if (dataKey === \"status\") {\n                  return OrderStatus.getText(rowData.status);\n                }\n              },\n            },\n          ]}\n          // For Pagination\n          history={this.props.history}\n          location={this.props.location}\n          totalPages={this.state.totalPage}\n          currentPage={this.state.page}\n          message={\"List is empty\"}\n        />\n      </div>\n    );\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get(\"p\"), 10) || 1;\n    const search = params.get(\"search\") || \"\";\n\n    if (prevPage !== page) {\n      if (this.state.key === \"default\") {\n        // getOrdersApi(this);\n      } else {\n        getOrdersApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const { franchiseData, reportData, orderRevenueReport, bookingsList } =\n      this.state;\n    return (\n      <div>\n        <ComponentHeader\n          breadcrumb={true}\n          currentPage={\"Company Report\"}\n          title={\"Report\"}\n          isFilter={false}\n          isSearch={false}\n          isSettleSearch={false}\n          isReport={true}\n          onChangeMethod={(data) => this.handleOnChange(data)}\n        />\n        <div className=\"report-section\">\n          <div className=\"report-data\">\n            <Row>\n              <Col sm={3}>\n                <div className=\"report-box\">\n                  <h4>Total Hours</h4>\n                  <h6>\n                    {orderRevenueReport\n                      ? parseFloat(\n                          orderRevenueReport.total_booked_hours\n                        ).toFixed(2)\n                      : \"NA\"}\n                  </h6>\n                </div>\n              </Col>\n              <Col sm={3}>\n                <div className=\"report-box\">\n                  <h4>Total Bookings</h4>\n                  <h6>{orderRevenueReport.total_orders || \"NA\"}</h6>\n                </div>\n              </Col>\n              <Col sm={6}>\n                <div className=\"report-box\">\n                  <div className=\"left\">\n                    <h4>Total Revenue</h4>\n                    <h6>\n                      {orderRevenueReport\n                        ? parseFloat(\n                            orderRevenueReport.total_platform_amount +\n                              orderRevenueReport.total_platform_amount\n                          ).toFixed(2)\n                        : \"NA\"}\n                    </h6>\n                  </div>\n                </div>\n              </Col>\n            </Row>\n          </div>\n          <div className=\"analytic-data\">\n            <div className=\"data\">\n              <h3 className=\"red-hat-display-bold f-s-20 lh-26\">\n                Franchise wise data\n              </h3>\n            </div>\n            <div className=\"data\">\n              <h3 className=\"red-hat-display-bold f-s-24 lh-32\">\n                {orderRevenueReport.total_franchise || \"NA\"}\n              </h3>\n              <h5 className=\"red-hat-display-medium lh-16\">Franchise</h5>\n            </div>\n            <div className=\"data\">\n              <h3 className=\"red-hat-display-bold f-s-24 lh-32\">\n                {orderRevenueReport.total_vehicles || \"NA\"}\n              </h3>\n              <h5 className=\"red-hat-display-medium lh-16\">Total vehicle</h5>\n            </div>\n            <div className=\"data\">\n              <h3 className=\"red-hat-display-bold f-s-24 lh-32\">\n                {orderRevenueReport\n                  ? parseFloat(orderRevenueReport.avg_booked_hours).toFixed(2)\n                  : \"NA\"}\n              </h3>\n              <h5 className=\"red-hat-display-medium lh-16\">\n                Average Booking Hours\n              </h5>\n            </div>\n            <div className=\"data\">\n              <h3 className=\"red-hat-display-bold f-s-24 lh-32\">\n                {orderRevenueReport\n                  ? parseFloat(orderRevenueReport.total_booked_hours).toFixed(2)\n                  : \"NA\"}\n              </h3>\n              <h5 className=\"red-hat-display-medium lh-16\">\n                Total Booked Hours\n              </h5>\n            </div>\n          </div>\n          {getUserAccountType() === AccountType.FRANCHISE ? (\n            <div className=\"tabular-data\">\n              <Tabs\n                id=\"controlled-tab-example\"\n                activeKey={this.state.selectedTab}\n                onSelect={(k) => this.setKey(k)}\n                className=\"pricing-tabs\"\n              >\n                <Tab eventKey=\"default\" title=\"Upcoming\">\n                  {this.showOrders(bookingsList)}\n                </Tab>\n\n                <Tab eventKey=\"30\" title=\"Return\">\n                  {this.showOrders(bookingsList)}\n                </Tab>\n              </Tabs>\n            </div>\n          ) : (\n            <div className=\"tabular-data\">\n              <div className=\"custom-table-wrapper\">\n                <CustomTable\n                  tableData={reportData}\n                  columnList={[\n                    {\n                      coumnWidth: 280,\n                      labelName: \"Franchise Name\",\n                      dataKey: \"franchise_name\",\n                      className: \"red-hat-display-bold\",\n                      isCell: true,\n                      cell: (rowData, dataKey) => {\n                        if (dataKey === \"franchise_name\") {\n                          return rowData.franchise_name;\n                        }\n                      },\n                    },\n                    {\n                      coumnWidth: 250,\n                      labelName: \"Total Bookings\",\n                      dataKey: \"total_orders\",\n                      className: \"\",\n                      isCell: true,\n                      cell: (rowData, dataKey) => {\n                        if (dataKey === \"total_orders\") {\n                          return rowData.total_orders;\n                        }\n                      },\n                    },\n\n                    {\n                      coumnWidth: 300,\n                      labelName: \"Total Vehicle\",\n                      dataKey: \"total_vehicles\",\n                      className: \"\",\n                      isCell: true,\n                      cell: (rowData, dataKey) => {\n                        if (dataKey === \"total_vehicles\") {\n                          return rowData.total_vehicles;\n                        }\n                      },\n                    },\n                    {\n                      coumnWidth: 350,\n                      labelName: \"Average Booked Hours\",\n                      dataKey: \"avg_booked_hours\",\n                      className: \"\",\n                      isCell: true,\n                      cell: (rowData, dataKey) => {\n                        if (dataKey === \"avg_booked_hours\") {\n                          return parseFloat(rowData.avg_booked_hours).toFixed(\n                            2\n                          );\n                        }\n                      },\n                    },\n                    {\n                      coumnWidth: 350,\n                      labelName: \"Total Booked Hours\",\n                      dataKey: \"total_booked_hours\",\n                      className: \"\",\n                      isCell: true,\n                      cell: (rowData, dataKey) => {\n                        if (dataKey === \"total_booked_hours\") {\n                          return parseFloat(rowData.total_booked_hours).toFixed(\n                            2\n                          );\n                        }\n                      },\n                    },\n                    {\n                      coumnWidth: 350,\n                      labelName: \"Revenue\",\n                      dataKey: \"total_platform_amount\",\n                      className: \"\",\n                      isCell: true,\n                      cell: (rowData, dataKey) => {\n                        if (dataKey === \"total_platform_amount\") {\n                          return parseFloat(\n                            rowData.total_platform_amount +\n                              rowData.total_franchise_amount\n                          ).toFixed(2);\n                        }\n                      },\n                    },\n                  ]}\n                  // For Pagination\n                  history={this.props.history}\n                  location={this.props.location}\n                  totalPages={this.state.totalPage}\n                  currentPage={this.state.page}\n                  message={\"List is empty\"}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  settlementState: state.SettlementState,\n});\nconst mapDispatchToProps = {\n  getReportsFranchiseWiseApi,\n  getOrderRevenueReportApi,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Report);\n"]},"metadata":{},"sourceType":"module"}