{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/common/ChangePasswordModal.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator } from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport eyeIcon from \"../../assets/images/icons/eye-icon.svg\";\nimport eyeVisible from \"../../assets/images/icons/eye-visible.svg\";\nimport { Image } from 'react-bootstrap';\nimport { toast } from \"react-toastify\";\nimport { changePasswordApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChangePasswordModal extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      if (this.state.newPassword !== this.state.confirmPassword) {\n        toast.error(\"New password and Confirm password don't match\");\n        return;\n      }\n\n      const data = new URLSearchParams();\n      data.append(\"old_password\", this.state.oldPassword);\n      data.append(\"new_password\", this.state.newPassword);\n      changePasswordApi(this, data);\n    };\n\n    this.handleEye = type => {\n      this.setState({\n        [type]: !this.state[type]\n      });\n    };\n\n    this.state = {\n      errorMessage: \"\",\n      inProgress: false,\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      showOldPassword: false,\n      showPassword: false,\n      showConfirmPassword: false\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CustomModal, {\n      show: this.props.show,\n      onHide: this.props.handleClose,\n      title: \"Change Password\",\n      modalClass: \"change-password\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onValidSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormElement, {\n          valueLink: this.linkState(this, \"oldPassword\"),\n          label: \"Current Password\",\n          required: true,\n          validations: [{\n            validate: FormValidator.isRequired,\n            message: \"Field cannot be empty\"\n          }],\n          control: {\n            type: CustomTextControl,\n            settings: {\n              placeholder: \"Enter Current Password\",\n              type: this.state.showOldPassword ? \"text\" : \"password\",\n              suffix: /*#__PURE__*/_jsxDEV(Image, {\n                src: this.state.showOldPassword ? eyeVisible : eyeIcon,\n                onClick: () => this.handleEye(\"showOldPassword\"),\n                className: \"eye-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 25\n              }, this)\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n          valueLink: this.linkState(this, \"newPassword\"),\n          label: \"New Password\",\n          required: true,\n          validations: [{\n            validate: FormValidator.isRequired,\n            message: \"Field cannot be empty\"\n          }],\n          control: {\n            type: CustomTextControl,\n            settings: {\n              placeholder: \"Enter New Password\",\n              type: this.state.showPassword ? \"text\" : \"password\",\n              suffix: /*#__PURE__*/_jsxDEV(Image, {\n                src: this.state.showPassword ? eyeVisible : eyeIcon,\n                onClick: () => this.handleEye(\"showPassword\"),\n                className: \"eye-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 25\n              }, this)\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n          valueLink: this.linkState(this, \"confirmPassword\"),\n          label: \"Re-Enter New Password\",\n          required: true,\n          validations: [{\n            validate: FormValidator.isRequired,\n            message: \"Field cannot be empty\"\n          }],\n          control: {\n            type: CustomTextControl,\n            settings: {\n              placeholder: \"Enter Password\",\n              type: this.state.showConfirmPassword ? \"text\" : \"password\",\n              suffix: /*#__PURE__*/_jsxDEV(Image, {\n                src: this.state.showConfirmPassword ? eyeVisible : eyeIcon,\n                onClick: () => this.handleEye(\"showConfirmPassword\"),\n                className: \"eye-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 25\n              }, this)\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n            customClass: \"btn black-btn\",\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nChangePasswordModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired\n};\nexport default ChangePasswordModal;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/common/ChangePasswordModal.js"],"names":["React","PropTypes","BaseReactComponent","CustomTextControl","Form","FormElement","FormSubmitButton","FormValidator","CustomModal","Image","toast","changePasswordApi","ChangePasswordModal","constructor","props","onSubmit","state","newPassword","confirmPassword","error","data","URLSearchParams","append","oldPassword","handleEye","type","setState","errorMessage","inProgress","showOldPassword","showPassword","showConfirmPassword","componentDidMount","render","show","handleClose","linkState","validate","isRequired","message","settings","placeholder","suffix","eyeVisible","eyeIcon","propTypes","bool","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,kBADF,EACsBC,iBADtB,EACyCC,IADzC,EAC+CC,WAD/C,EAC4DC,gBAD5D,EAC8EC,aAD9E,QAEO,kBAFP;AAGA,SAASC,WAAT,QAA4B,WAA5B;;;AAGA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,iBAAT,QAAkC,OAAlC;;;AAEA,MAAMC,mBAAN,SAAkCV,kBAAlC,CAAqD;AACnDW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAenBC,QAfmB,GAeR,MAAM;AACf,UAAI,KAAKC,KAAL,CAAWC,WAAX,KAA2B,KAAKD,KAAL,CAAWE,eAA1C,EAA2D;AACzDR,QAAAA,KAAK,CAACS,KAAN,CAAY,+CAAZ;AACA;AACD;;AACD,YAAMC,IAAI,GAAG,IAAIC,eAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,cAAZ,EAA4B,KAAKN,KAAL,CAAWO,WAAvC;AACAH,MAAAA,IAAI,CAACE,MAAL,CAAY,cAAZ,EAA4B,KAAKN,KAAL,CAAWC,WAAvC;AACAN,MAAAA,iBAAiB,CAAC,IAAD,EAAOS,IAAP,CAAjB;AACD,KAxBkB;;AAAA,SA0BnBI,SA1BmB,GA0BNC,IAAD,IAAU;AACpB,WAAKC,QAAL,CAAc;AACZ,SAACD,IAAD,GAAQ,CAAC,KAAKT,KAAL,CAAWS,IAAX;AADG,OAAd;AAGD,KA9BkB;;AAEjB,SAAKT,KAAL,GAAa;AACXW,MAAAA,YAAY,EAAE,EADH;AAEXC,MAAAA,UAAU,EAAE,KAFD;AAGXL,MAAAA,WAAW,EAAE,EAHF;AAIXN,MAAAA,WAAW,EAAE,EAJF;AAKXC,MAAAA,eAAe,EAAE,EALN;AAMXW,MAAAA,eAAe,EAAE,KANN;AAOXC,MAAAA,YAAY,EAAE,KAPH;AAQXC,MAAAA,mBAAmB,EAAE;AARV,KAAb;AAUD;;AACDC,EAAAA,iBAAiB,GAAG,CAAG;;AAmBvBC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,WAAD;AACE,MAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWoB,IADnB;AAEE,MAAA,MAAM,EAAE,KAAKpB,KAAL,CAAWqB,WAFrB;AAGE,MAAA,KAAK,EAAE,iBAHT;AAIE,MAAA,UAAU,EAAE,iBAJd;AAAA,6BAME,QAAC,IAAD;AAAM,QAAA,aAAa,EAAE,KAAKpB,QAA1B;AAAA,gCACE,QAAC,WAAD;AACE,UAAA,SAAS,EAAE,KAAKqB,SAAL,CAAe,IAAf,EAAqB,aAArB,CADb;AAEE,UAAA,KAAK,EAAC,kBAFR;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,WAAW,EAAE,CACX;AACEC,YAAAA,QAAQ,EAAE9B,aAAa,CAAC+B,UAD1B;AAEEC,YAAAA,OAAO,EAAE;AAFX,WADW,CAJf;AAUE,UAAA,OAAO,EAAE;AACPd,YAAAA,IAAI,EAAEtB,iBADC;AAEPqC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,WAAW,EAAE,wBADL;AAERhB,cAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWa,eAAX,GAA6B,MAA7B,GAAsC,UAFpC;AAGRa,cAAAA,MAAM,eAAE,QAAC,KAAD;AAAO,gBAAA,GAAG,EAAE,KAAK1B,KAAL,CAAWa,eAAX,GAA6Bc,UAA7B,GAA0CC,OAAtD;AAA+D,gBAAA,OAAO,EAAE,MAAM,KAAKpB,SAAL,CAAe,iBAAf,CAA9E;AAAiH,gBAAA,SAAS,EAAC;AAA3H;AAAA;AAAA;AAAA;AAAA;AAHA;AAFH;AAVX;AAAA;AAAA;AAAA;AAAA,gBADF,eAqBE,QAAC,WAAD;AACE,UAAA,SAAS,EAAE,KAAKY,SAAL,CAAe,IAAf,EAAqB,aAArB,CADb;AAEE,UAAA,KAAK,EAAC,cAFR;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,WAAW,EAAE,CACX;AACEC,YAAAA,QAAQ,EAAE9B,aAAa,CAAC+B,UAD1B;AAEEC,YAAAA,OAAO,EAAE;AAFX,WADW,CAJf;AAUE,UAAA,OAAO,EAAE;AACPd,YAAAA,IAAI,EAAEtB,iBADC;AAEPqC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,WAAW,EAAE,oBADL;AAERhB,cAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWc,YAAX,GAA0B,MAA1B,GAAmC,UAFjC;AAGRY,cAAAA,MAAM,eAAE,QAAC,KAAD;AAAO,gBAAA,GAAG,EAAE,KAAK1B,KAAL,CAAWc,YAAX,GAA0Ba,UAA1B,GAAuCC,OAAnD;AAA4D,gBAAA,OAAO,EAAE,MAAM,KAAKpB,SAAL,CAAe,cAAf,CAA3E;AAA2G,gBAAA,SAAS,EAAC;AAArH;AAAA;AAAA;AAAA;AAAA;AAHA;AAFH;AAVX;AAAA;AAAA;AAAA;AAAA,gBArBF,eAyCE,QAAC,WAAD;AACE,UAAA,SAAS,EAAE,KAAKY,SAAL,CAAe,IAAf,EAAqB,iBAArB,CADb;AAEE,UAAA,KAAK,EAAC,uBAFR;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,WAAW,EAAE,CACX;AACEC,YAAAA,QAAQ,EAAE9B,aAAa,CAAC+B,UAD1B;AAEEC,YAAAA,OAAO,EAAE;AAFX,WADW,CAJf;AAUE,UAAA,OAAO,EAAE;AACPd,YAAAA,IAAI,EAAEtB,iBADC;AAEPqC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,WAAW,EAAE,gBADL;AAERhB,cAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWe,mBAAX,GAAiC,MAAjC,GAA0C,UAFxC;AAGRW,cAAAA,MAAM,eAAE,QAAC,KAAD;AAAO,gBAAA,GAAG,EAAE,KAAK1B,KAAL,CAAWe,mBAAX,GAAiCY,UAAjC,GAA8CC,OAA1D;AAAmE,gBAAA,OAAO,EAAE,MAAM,KAAKpB,SAAL,CAAe,qBAAf,CAAlF;AAAyH,gBAAA,SAAS,EAAC;AAAnI;AAAA;AAAA;AAAA;AAAA;AAHA;AAFH;AAVX;AAAA;AAAA;AAAA;AAAA,gBAzCF,eA4DE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACE,QAAC,gBAAD;AAAkB,YAAA,WAAW,EAAC,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBA5DF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YADF;AA0ED;;AA5GkD;;AA+GrDZ,mBAAmB,CAACiC,SAApB,GAAgC;AAC9BX,EAAAA,IAAI,EAAEjC,SAAS,CAAC6C,IAAV,CAAeR,UADS;AAE9BH,EAAAA,WAAW,EAAElC,SAAS,CAAC8C,IAAV,CAAeT;AAFE,CAAhC;AAKA,eAAe1B,mBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator\n} from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport eyeIcon from '../../assets/images/icons/eye-icon.svg';\nimport eyeVisible from '../../assets/images/icons/eye-visible.svg';\nimport { Image } from 'react-bootstrap';\nimport { toast } from \"react-toastify\";\nimport { changePasswordApi } from './Api';\n\nclass ChangePasswordModal extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: \"\",\n      inProgress: false,\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      showOldPassword: false,\n      showPassword: false,\n      showConfirmPassword: false,\n    }\n  }\n  componentDidMount() { }\n\n  onSubmit = () => {\n    if (this.state.newPassword !== this.state.confirmPassword) {\n      toast.error(\"New password and Confirm password don't match\");\n      return;\n    }\n    const data = new URLSearchParams();\n    data.append(\"old_password\", this.state.oldPassword);\n    data.append(\"new_password\", this.state.newPassword);\n    changePasswordApi(this, data);\n  }\n\n  handleEye = (type) => {\n    this.setState({\n      [type]: !this.state[type]\n    })\n  }\n\n  render() {\n    return (\n      <CustomModal\n        show={this.props.show}\n        onHide={this.props.handleClose}\n        title={\"Change Password\"}\n        modalClass={\"change-password\"}\n      >\n        <Form onValidSubmit={this.onSubmit}>\n          <FormElement\n            valueLink={this.linkState(this, \"oldPassword\")}\n            label=\"Current Password\"\n            required\n            validations={[\n              {\n                validate: FormValidator.isRequired,\n                message: \"Field cannot be empty\"\n              }\n            ]}\n            control={{\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Current Password\",\n                type: this.state.showOldPassword ? \"text\" : \"password\",\n                suffix: <Image src={this.state.showOldPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showOldPassword\")} className=\"eye-icon\" />\n              }\n            }}\n          />\n\n          <FormElement\n            valueLink={this.linkState(this, \"newPassword\")}\n            label=\"New Password\"\n            required\n            validations={[\n              {\n                validate: FormValidator.isRequired,\n                message: \"Field cannot be empty\"\n              }\n            ]}\n            control={{\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter New Password\",\n                type: this.state.showPassword ? \"text\" : \"password\",\n                suffix: <Image src={this.state.showPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showPassword\")} className=\"eye-icon\" />\n              }\n            }}\n          />\n\n          <FormElement\n            valueLink={this.linkState(this, \"confirmPassword\")}\n            label=\"Re-Enter New Password\"\n            required\n            validations={[\n              {\n                validate: FormValidator.isRequired,\n                message: \"Field cannot be empty\"\n              }\n            ]}\n            control={{\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Password\",\n                type: this.state.showConfirmPassword ? \"text\" : \"password\",\n                suffix: <Image src={this.state.showConfirmPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showConfirmPassword\")} className=\"eye-icon\" />\n              }\n            }}\n          />\n          <div className=\"submit-wrapper\">\n            <FormSubmitButton customClass=\"btn black-btn\">Reset Password</FormSubmitButton>\n          </div>\n        </Form>\n\n      </CustomModal>\n    )\n  }\n}\n\nChangePasswordModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired\n};\n\nexport default ChangePasswordModal;"]},"metadata":{},"sourceType":"module"}