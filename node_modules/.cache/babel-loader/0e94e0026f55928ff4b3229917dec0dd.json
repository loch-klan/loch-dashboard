{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/iotModel/AddEditIotModel.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { addUpdateIotModelApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditIotModel extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onValidSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"model_name\", this.state.modelName);\n      data.append(\"model_company\", this.state.manufacturerName);\n\n      if (this.state.editId) {\n        data.append(\"model_id\", this.state.editId);\n      }\n\n      addUpdateIotModelApi(data, () => {\n        this.props.history.push('/master/Iot-models');\n      });\n    };\n\n    const editData = props.location.state ? props.location.state.editData : {};\n    this.state = {\n      editId: editData.id || \"\",\n      modelName: editData.modelName || \"\",\n      manufacturerName: editData.modelCompany || \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: `${this.state.editId ? \"Edit\" : \"Add\"} Iot Model`,\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.handleSave,\n        primaryBtnText: \"Save Iot Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onValidSubmit,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"modelName\"),\n                  label: \"Model Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Model name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Model Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"manufacturerName\"),\n                  label: \"Manufacturer Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Manufacturer name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Manufacturer Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({ ...state\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditIotModel);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/iotModel/AddEditIotModel.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomTextControl","Form","FormElement","FormValidator","ComponentHeader","ReactDOM","addUpdateIotModelApi","AddEditIotModel","constructor","props","handleSave","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onValidSubmit","data","URLSearchParams","append","state","modelName","manufacturerName","editId","history","push","editData","location","id","modelCompany","componentDidMount","render","goBack","el","linkState","validate","isRequired","message","type","settings","placeholder","mapStateToProps","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,EAAgDC,IAAhD,EAAsDC,WAAtD,EAAmEC,aAAnE,QAAwF,kBAAxF;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,oBAAT,QAAqC,OAArC;;;;AAEA,MAAMC,eAAN,SAA8BR,kBAA9B,CAAiD;AAC/CS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,UAVmB,GAUN,MAAM;AACjBL,MAAAA,QAAQ,CAACM,WAAT,CAAqB,KAAKC,IAA1B,EAAgCC,aAAhC,CAA8C,IAAIC,KAAJ,CAAU,QAAV,EAAoB;AAAEC,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,OAAO,EAAE;AAA7B,OAApB,CAA9C;AACD,KAZkB;;AAAA,SAcnBC,aAdmB,GAcH,MAAM;AACpB,YAAMC,IAAI,GAAG,IAAIC,eAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,YAAZ,EAA0B,KAAKC,KAAL,CAAWC,SAArC;AACAJ,MAAAA,IAAI,CAACE,MAAL,CAAY,eAAZ,EAA6B,KAAKC,KAAL,CAAWE,gBAAxC;;AACA,UAAI,KAAKF,KAAL,CAAWG,MAAf,EAAuB;AACrBN,QAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwB,KAAKC,KAAL,CAAWG,MAAnC;AACD;;AACDlB,MAAAA,oBAAoB,CAACY,IAAD,EAAO,MAAM;AAC/B,aAAKT,KAAL,CAAWgB,OAAX,CAAmBC,IAAnB,CAAwB,oBAAxB;AACD,OAFmB,CAApB;AAGD,KAxBkB;;AAEjB,UAAMC,QAAQ,GAAGlB,KAAK,CAACmB,QAAN,CAAeP,KAAf,GAAuBZ,KAAK,CAACmB,QAAN,CAAeP,KAAf,CAAqBM,QAA5C,GAAuD,EAAxE;AACA,SAAKN,KAAL,GAAa;AACXG,MAAAA,MAAM,EAAEG,QAAQ,CAACE,EAAT,IAAe,EADZ;AAEXP,MAAAA,SAAS,EAAEK,QAAQ,CAACL,SAAT,IAAsB,EAFtB;AAGXC,MAAAA,gBAAgB,EAAEI,QAAQ,CAACG,YAAT,IAAyB;AAHhC,KAAb;AAKD;;AACDC,EAAAA,iBAAiB,GAAG,CAAG;;AAiBvBC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,eAAD;AACE,QAAA,YAAY,EAAE,IADhB;AAEE,QAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWgB,OAFtB;AAGE,QAAA,KAAK,EAAG,GAAE,KAAKJ,KAAL,CAAWG,MAAX,GAAoB,MAApB,GAA6B,KAAM,YAH/C;AAIE,QAAA,gBAAgB,EAAE,QAJpB;AAKE,QAAA,cAAc,EAAE,MAAM,KAAKf,KAAL,CAAWgB,OAAX,CAAmBQ,MAAnB,EALxB;AAME,QAAA,YAAY,EAAE,KAAKvB,UANrB;AAOE,QAAA,cAAc,EAAE;AAPlB;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,+BAEE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,aAAa,EAAE,KAAKO,aAA1B;AAAyC,YAAA,GAAG,EAAEiB,EAAE,IAAI,KAAKtB,IAAL,GAAYsB,EAAhE;AAAA,mCACE,QAAC,GAAD;AAAA,sCACE,QAAC,GAAD;AAAK,gBAAA,EAAE,EAAE,CAAT;AAAA,uCACE,QAAC,WAAD;AACE,kBAAA,SAAS,EAAE,KAAKC,SAAL,CAAe,IAAf,EAAqB,WAArB,CADb;AAEE,kBAAA,KAAK,EAAC,YAFR;AAGE,kBAAA,QAAQ,MAHV;AAIE,kBAAA,WAAW,EAAE,CACX;AACEC,oBAAAA,QAAQ,EAAEjC,aAAa,CAACkC,UAD1B;AAEEC,oBAAAA,OAAO,EAAE;AAFX,mBADW,CAJf;AAUE,kBAAA,OAAO,EAAE;AACPC,oBAAAA,IAAI,EAAEvC,iBADC;AAEPwC,oBAAAA,QAAQ,EAAE;AACRC,sBAAAA,WAAW,EAAE;AADL;AAFH;AAVX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAoBE,QAAC,GAAD;AAAK,gBAAA,EAAE,EAAE,CAAT;AAAA,uCACE,QAAC,WAAD;AACE,kBAAA,SAAS,EAAE,KAAKN,SAAL,CAAe,IAAf,EAAqB,kBAArB,CADb;AAEE,kBAAA,KAAK,EAAC,mBAFR;AAGE,kBAAA,QAAQ,MAHV;AAIE,kBAAA,WAAW,EAAE,CACX;AACEC,oBAAAA,QAAQ,EAAEjC,aAAa,CAACkC,UAD1B;AAEEC,oBAAAA,OAAO,EAAE;AAFX,mBADW,CAJf;AAUE,kBAAA,OAAO,EAAE;AACPC,oBAAAA,IAAI,EAAEvC,iBADC;AAEPwC,oBAAAA,QAAQ,EAAE;AACRC,sBAAAA,WAAW,EAAE;AADL;AAFH;AAVX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA,oBADF;AA6DD;;AAzF8C;;AA2FjD,MAAMC,eAAe,GAAGrB,KAAK,KAAK,EAChC,GAAGA;AAD6B,CAAL,CAA7B;;AAGA,MAAMsB,kBAAkB,GAAG,CACzB;AADyB,CAA3B;AAGA,eAAe7C,OAAO,CAAC4C,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CpC,eAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { addUpdateIotModelApi } from './Api';\n\nclass AddEditIotModel extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const editData = props.location.state ? props.location.state.editData : {};\n    this.state = {\n      editId: editData.id || \"\",\n      modelName: editData.modelName || \"\",\n      manufacturerName: editData.modelCompany || \"\",\n    }\n  }\n  componentDidMount() { }\n  handleSave = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  onValidSubmit = () => {\n    const data = new URLSearchParams();\n    data.append(\"model_name\", this.state.modelName);\n    data.append(\"model_company\", this.state.manufacturerName);\n    if (this.state.editId) {\n      data.append(\"model_id\", this.state.editId);\n    }\n    addUpdateIotModelApi(data, () => {\n      this.props.history.push('/master/Iot-models');\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={`${this.state.editId ? \"Edit\" : \"Add\"} Iot Model`}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.handleSave}\n          primaryBtnText={\"Save Iot Model\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onValidSubmit} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"modelName\")}\n                    label=\"Model Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Model name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Model Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"manufacturerName\")}\n                    label=\"Manufacturer Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Manufacturer name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Manufacturer Name\",\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  ...state\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditIotModel);"]},"metadata":{},"sourceType":"module"}