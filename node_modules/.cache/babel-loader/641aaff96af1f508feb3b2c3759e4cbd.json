{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/bookingManagement/BookingManagement.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getOrdersApi } from './Api';\nimport moment from \"moment\";\nimport { OrderStatus } from \"../../utils/Constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass BookingManagement extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleFilter = () => {\n      this.setState({\n        showFilter: !this.state.showFilter\n      });\n    };\n\n    this.handleAddBookings = function () {\n      let rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      if (rowData) {\n        _this.props.history.push({\n          pathname: `/booking-management/edit-booking/${rowData.id}`,\n          state: {\n            data: rowData\n          }\n        });\n      } else {\n        _this.props.history.push(\"/booking-management/add-booking\");\n      }\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      getOrdersApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      }, () => {\n        if (currentPage === START_PAGE) {\n          getOrdersApi(this, START_PAGE);\n        }\n\n        replaceHistory(this.props.history, START_PAGE + 1);\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      bookingsList: [],\n      showFilter: false,\n      conditions: []\n    };\n  }\n\n  componentDidMount() {\n    getOrdersApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        getOrdersApi(this);\n      } else {\n        getOrdersApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      page,\n      totalPage,\n      bookingsList\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        breadcrumb: true,\n        currentPage: \"Booking Management\",\n        title: \"Booking Management\",\n        isFilter: false,\n        isPrimaryBtn: () => this.handleAddBookings(),\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_ORDER) ? \"+ Add Booking\" : \"\",\n        isSearch: true,\n        placeholder: \"Search Bookings\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: bookingsList,\n          columnList: [{\n            coumnWidth: 120,\n            labelName: \"Order Id\",\n            dataKey: \"code\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"code\") {\n                return rowData.code;\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"Customer Email\",\n            dataKey: \"customer\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"customer\") {\n                var _rowData$customer;\n\n                return (_rowData$customer = rowData.customer) === null || _rowData$customer === void 0 ? void 0 : _rowData$customer.email;\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"Start Time\",\n            dataKey: \"start_datetime\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"start_datetime\") {\n                return moment(rowData.start_datetime).format('LLL');\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"End Time\",\n            dataKey: \"end_datetime\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"end_datetime\") {\n                return moment(rowData.end_datetime).format('LLL');\n              }\n            }\n          }, // {\n          //   coumnWidth: 300,\n          //   labelName: \"Franchisee Name\",\n          //   dataKey: \"end_datetime\",\n          //   className: \"\",\n          //   isCell: true,\n          //   cell: (rowData, dataKey) => {\n          //     if (dataKey === \"end_datetime\") {\n          //       return moment(rowData.end_datetime).format('LLL')\n          //     }\n          //   }\n          // },\n          {\n            coumnWidth: 120,\n            labelName: \"Total Fare (â‚¹)\",\n            dataKey: \"total_amount\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"total_amount\") {\n                return rowData.total_amount;\n              }\n            }\n          }, {\n            coumnWidth: 120,\n            labelName: \"Status\",\n            dataKey: \"status\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"status\") {\n                return OrderStatus.getText(rowData.status);\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = []; // menuItem.push({\n                //   title: \"Edit\",\n                //   type: \"event\",\n                //   handleClick: () => this.handleAddBookings(rowData),\n                // })\n\n                menuItem.push({\n                  title: \"View Details\",\n                  type: \"\",\n                  linkUrl: `booking-management/view-booking/${rowData.id}`\n                });\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY)) {\n                  return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                    menuItem: menuItem\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 25\n                  }, this);\n                }\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Coupons list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  couponsState: state.CouponsState\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingManagement);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/bookingManagement/BookingManagement.js"],"names":["React","Component","connect","CustomTable","PermissionList","START_PAGE","getAssignedPermission","replaceHistory","ComponentHeader","ActionDropdown","getOrdersApi","moment","OrderStatus","BookingManagement","constructor","props","handleFilter","setState","showFilter","state","handleAddBookings","rowData","history","push","pathname","id","data","onChangeMethod","value","searchValue","conditions","key","search","clearSearch","currentPage","location","params","URLSearchParams","page","get","parseInt","bookingsList","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","permissionList","includes","ADD_UPDATE_ORDER","coumnWidth","labelName","dataKey","className","isCell","cell","code","customer","email","start_datetime","format","end_datetime","total_amount","getText","status","menuItem","title","type","linkUrl","ADD_UPDATE_TELEMATICS_INVENTORY","mapStateToProps","couponsState","CouponsState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getOrdersApi } from './Api';\nimport moment from \"moment\";\nimport { OrderStatus } from \"../../utils/Constant\";\n\nclass BookingManagement extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      bookingsList: [],\n      showFilter: false,\n      conditions: [],\n    }\n  }\n\n  componentDidMount() {\n    getOrdersApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        getOrdersApi(this);\n      } else {\n        getOrdersApi(this, page - 1);\n      }\n    }\n  }\n\n  handleFilter = () => {\n    this.setState({\n      showFilter: !this.state.showFilter\n    })\n  }\n\n  handleAddBookings = (rowData = \"\") => {\n    if (rowData) {\n      this.props.history.push({\n        pathname: `/booking-management/edit-booking/${rowData.id}`,\n        state: { data: rowData }\n      });\n    } else {\n      this.props.history.push(\"/booking-management/add-booking\");\n    }\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({\n      searchValue: value,\n      conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    getOrdersApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    this.setState({ searchValue: \"\", conditions: [] }, () => {\n      if (currentPage === START_PAGE) {\n        getOrdersApi(this, START_PAGE);\n      }\n      replaceHistory(this.props.history, START_PAGE + 1)\n    });\n\n  }\n  render() {\n    const { page, totalPage, bookingsList } = this.state;\n    const permissionList = getAssignedPermission();\n    return (\n      <>\n        <ComponentHeader\n          breadcrumb={true}\n          currentPage={\"Booking Management\"}\n          title={\"Booking Management\"}\n          isFilter={false}\n          isPrimaryBtn={() => this.handleAddBookings()}\n          primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_ORDER) ? \"+ Add Booking\" : \"\"}\n          isSearch={true}\n          placeholder={\"Search Bookings\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={bookingsList}\n            columnList={[\n              {\n                coumnWidth: 120,\n                labelName: \"Order Id\",\n                dataKey: \"code\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"code\") {\n                    return rowData.code\n                  }\n                }\n              },\n              {\n                coumnWidth: 230,\n                labelName: \"Customer Email\",\n                dataKey: \"customer\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"customer\") {\n                    return rowData.customer ?.email\n                  }\n                }\n              },\n              {\n                coumnWidth: 230,\n                labelName: \"Start Time\",\n                dataKey: \"start_datetime\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"start_datetime\") {\n                    return moment(rowData.start_datetime).format('LLL')\n                  }\n                }\n              },\n              {\n                coumnWidth: 230,\n                labelName: \"End Time\",\n                dataKey: \"end_datetime\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"end_datetime\") {\n                    return moment(rowData.end_datetime).format('LLL')\n                  }\n                }\n              },\n              // {\n              //   coumnWidth: 300,\n              //   labelName: \"Franchisee Name\",\n              //   dataKey: \"end_datetime\",\n              //   className: \"\",\n              //   isCell: true,\n              //   cell: (rowData, dataKey) => {\n              //     if (dataKey === \"end_datetime\") {\n              //       return moment(rowData.end_datetime).format('LLL')\n              //     }\n              //   }\n              // },\n              {\n                coumnWidth: 120,\n                labelName: \"Total Fare (â‚¹)\",\n                dataKey: \"total_amount\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"total_amount\") {\n                    return rowData.total_amount\n                  }\n                }\n              },\n              {\n                coumnWidth: 120,\n                labelName: \"Status\",\n                dataKey: \"status\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"status\") {\n                    return OrderStatus.getText(rowData.status)\n                  }\n                }\n              },\n              {\n                coumnWidth: 50,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [];\n                    // menuItem.push({\n                    //   title: \"Edit\",\n                    //   type: \"event\",\n                    //   handleClick: () => this.handleAddBookings(rowData),\n                    // })\n                    menuItem.push({\n                      title: \"View Details\",\n                      type: \"\",\n                      linkUrl: `booking-management/view-booking/${rowData.id}`,\n                    })\n                    if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY)) {\n                      return (\n                        <ActionDropdown\n                          menuItem={menuItem}\n                        />\n                      )\n                    }\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"Coupons list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  couponsState: state.CouponsState\n});\nconst mapDispatchToProps = {\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingManagement);"]},"metadata":{},"sourceType":"module"}