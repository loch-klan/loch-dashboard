{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/bookingManagement/AddCustomerModal.js\";\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { CustomModal } from '../common';\n// const AddCustomerModal = props => {\n//     return (\n//       <CustomModal\n//       show={props.show}\n//       onHide={props.handleClose}\n//       title={\"Add New Customer\"}\n//       modalClass={\"change-password\"}\n//     >\n//       <Form onValidSubmit={this.onSubmit}>\n//           <FormElement\n//             valueLink={this.linkState(this, \"oldPassword\")}\n//             label=\"Current Password\"\n//             required\n//             validations={[\n//               {\n//                 validate: FormValidator.isRequired,\n//                 message: \"Field cannot be empty\"\n//               }\n//             ]}\n//             control={{\n//               type: CustomTextControl,\n//               settings: {\n//                 placeholder: \"Enter Current Password\",\n//                 type: this.state.showOldPassword ? \"text\" : \"password\",\n//                 suffix: <Image src={this.state.showOldPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showOldPassword\")} className=\"eye-icon\" />\n//               }\n//             }}\n//           />\n//           <div className=\"submit-wrapper\">\n//             <FormSubmitButton customClass=\"btn black-btn\">Reset Password</FormSubmitButton>\n//           </div>\n//         </Form>\n//       </CustomModal>\n//     );\n// };\n// AddCustomerModal.propTypes = {\n//     // getPosts: PropTypes.func\n// };\n// export default AddCustomerModal;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator } from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport { sendOtpApi, verifyOtpApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddCustomerModal extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"mobile\", this.state.phone);\n\n      if (this.state.showVerifyOtp) {\n        data.append(\"otp_code\", this.state.otp);\n        verifyOtpApi(this, data);\n      } else {\n        sendOtpApi(this, data);\n      }\n    };\n\n    this.state = {\n      showVerifyOtp: false,\n      phone: \"\",\n      otp: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CustomModal, {\n      show: this.props.show,\n      onHide: this.props.handleClose,\n      title: this.state.showVerifyOtp ? \"Verification Code\" : \"Add New Customer\",\n      modalClass: \"change-password\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onValidSubmit: this.onSubmit,\n        children: [this.state.showVerifyOtp ? /*#__PURE__*/_jsxDEV(FormElement, {\n          valueLink: this.linkState(this, \"otp\"),\n          label: \"OTP\",\n          required: true,\n          validations: [{\n            validate: FormValidator.isRequired,\n            message: \"Number cannot be empty\"\n          }],\n          control: {\n            type: CustomTextControl,\n            settings: {\n              placeholder: \"Enter OTP\"\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 1\n        }, this) : /*#__PURE__*/_jsxDEV(FormElement, {\n          valueLink: this.linkState(this, \"phone\"),\n          label: \"Contact Number\",\n          required: true,\n          validations: [{\n            validate: FormValidator.isRequired,\n            message: \"Number cannot be empty\"\n          }, {\n            validate: FormValidator.isPhone,\n            message: \"Please enter a valid number\"\n          }],\n          control: {\n            type: CustomTextControl,\n            settings: {\n              placeholder: \"Enter Number\"\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n            customClass: \"btn black-btn\",\n            children: this.state.showVerifyOtp ? \"Verify & Add Customer\" : \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAddCustomerModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired\n};\nexport default AddCustomerModal;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/bookingManagement/AddCustomerModal.js"],"names":["React","PropTypes","BaseReactComponent","CustomTextControl","Form","FormElement","FormSubmitButton","FormValidator","CustomModal","sendOtpApi","verifyOtpApi","AddCustomerModal","constructor","props","onSubmit","data","URLSearchParams","append","state","phone","showVerifyOtp","otp","componentDidMount","render","show","handleClose","linkState","validate","isRequired","message","type","settings","placeholder","isPhone","propTypes","bool","func"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { CustomModal } from '../common';\n\n// const AddCustomerModal = props => {\n//     return (\n//       <CustomModal\n//       show={props.show}\n//       onHide={props.handleClose}\n//       title={\"Add New Customer\"}\n//       modalClass={\"change-password\"}\n//     >\n//       <Form onValidSubmit={this.onSubmit}>\n//           <FormElement\n//             valueLink={this.linkState(this, \"oldPassword\")}\n//             label=\"Current Password\"\n//             required\n//             validations={[\n//               {\n//                 validate: FormValidator.isRequired,\n//                 message: \"Field cannot be empty\"\n//               }\n//             ]}\n//             control={{\n//               type: CustomTextControl,\n//               settings: {\n//                 placeholder: \"Enter Current Password\",\n//                 type: this.state.showOldPassword ? \"text\" : \"password\",\n//                 suffix: <Image src={this.state.showOldPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showOldPassword\")} className=\"eye-icon\" />\n//               }\n//             }}\n//           />\n//           <div className=\"submit-wrapper\">\n//             <FormSubmitButton customClass=\"btn black-btn\">Reset Password</FormSubmitButton>\n//           </div>\n//         </Form>\n//       </CustomModal>\n//     );\n// };\n// AddCustomerModal.propTypes = {\n//     // getPosts: PropTypes.func\n// };\n// export default AddCustomerModal;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator\n} from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport { sendOtpApi, verifyOtpApi } from './Api';\n\nclass AddCustomerModal extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showVerifyOtp: false,\n      phone: \"\",\n      otp: \"\",\n    }\n  }\n  componentDidMount() { }\n\n  onSubmit = () => {\n    const data = new URLSearchParams();\n    data.append(\"mobile\", this.state.phone);\n    if(this.state.showVerifyOtp){\n      data.append(\"otp_code\", this.state.otp);\n      verifyOtpApi(this, data);\n    } else{\n      sendOtpApi(this, data);\n    }\n\n  }\n\n  render() {\n    return (\n      <CustomModal\n        show={this.props.show}\n        onHide={this.props.handleClose}\n        title={this.state.showVerifyOtp ? \"Verification Code\" : \"Add New Customer\"}\n        modalClass={\"change-password\"}\n      >\n        <Form onValidSubmit={this.onSubmit}>\n                  {\n                    this.state.showVerifyOtp\n                    ?\n<FormElement\n                    valueLink={this.linkState(this, \"otp\")}\n                    label=\"OTP\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Number cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter OTP\",\n                      }\n                    }}\n                  />\n                    :\n<FormElement\n                    valueLink={this.linkState(this, \"phone\")}\n                    label=\"Contact Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Number cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPhone,\n                        message: \"Please enter a valid number\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Number\",\n                      }\n                    }}\n                  />\n                  }\n\n          <div className=\"submit-wrapper\">\n            <FormSubmitButton customClass=\"btn black-btn\">{this.state.showVerifyOtp ? \"Verify & Add Customer\" : \"Next\"}</FormSubmitButton>\n          </div>\n        </Form>\n\n      </CustomModal>\n    )\n  }\n}\n\nAddCustomerModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired\n};\n\nexport default AddCustomerModal;"]},"metadata":{},"sourceType":"module"}