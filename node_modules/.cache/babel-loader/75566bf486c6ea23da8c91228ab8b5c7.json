{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/utils/form/SelectControl.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectControl = props => {\n  // console.log('props', props);\n  const {\n    onBlur,\n    valueLink,\n    options,\n    multiple,\n    searchable,\n    placeholder,\n    closeMenuOnSelect,\n    menuIsOpen,\n    noOptionCustom = () => noOptionAction ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn black-btn\",\n      onClick: noOptionAction,\n      children: \"Add New Customer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 45\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No Options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 126\n    }, this),\n    noOptionAction = null,\n    onChangeCallback = () => {},\n    disabled = false,\n    failedValidation\n  } = props;\n\n  const optionsDict = _.keyBy(options, \"value\");\n\n  const stateValue = valueLink.value;\n  let valueOption = \"\";\n\n  if (multiple && stateValue.length > 0) {\n    valueOption = stateValue.map(value => optionsDict[value]);\n  }\n\n  if (!multiple && stateValue) {\n    valueOption = optionsDict[stateValue];\n  }\n\n  const onChangeInternal = selectedOption => {\n    if (multiple) {\n      valueLink.requestChange(selectedOption.map(option => option.value)); // onBlur(stateValue);\n      // ON BLUR METHOD IS REMOVED AND INSTED PASSED AS CALLBACK METHOD.\n\n      onChangeCallback(onBlur);\n    } else {\n      valueLink.requestChange(selectedOption ? selectedOption.value : \"\"); // onBlur(stateValue);\n      // ON BLUR METHOD IS REMOVED AND INSTED PASSED AS CALLBACK METHOD.\n\n      onChangeCallback(onBlur);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    menuIsOpen: menuIsOpen,\n    closeMenuOnSelect: closeMenuOnSelect,\n    isMulti: multiple,\n    value: valueOption,\n    onChange: onChangeInternal // onBlur={onBlur}\n    ,\n    simpleValue: false,\n    options: options,\n    isClearable: false,\n    isSearchable: searchable,\n    isDisabled: disabled // filterOptions={filterOptions}\n    // filterOptions={customFilterOption}\n    ,\n    placeholder: placeholder,\n    noOptionsMessage: noOptionCustom,\n    classNamePrefix: `custom-select`,\n    className: `${failedValidation && failedValidation.message ? \"has-error\" : \"\"}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SelectControl;\nSelectControl.propTypes = {\n  // classes: PropTypes.object.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  valueLink: PropTypes.object.isRequired,\n  options: PropTypes.array.isRequired,\n  multiple: PropTypes.bool,\n  placeholder: PropTypes.string\n};\nSelectControl.defaultProps = {\n  multiple: false,\n  placeholder: 'Select Values'\n};\nexport default SelectControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectControl\");","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/utils/form/SelectControl.js"],"names":["React","PropTypes","_","Select","SelectControl","props","onBlur","valueLink","options","multiple","searchable","placeholder","closeMenuOnSelect","menuIsOpen","noOptionCustom","noOptionAction","onChangeCallback","disabled","failedValidation","optionsDict","keyBy","stateValue","value","valueOption","length","map","onChangeInternal","selectedOption","requestChange","option","message","propTypes","func","isRequired","object","array","bool","string","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,cAAnB;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7B;AACA,QAAM;AACJC,IAAAA,MADI;AACIC,IAAAA,SADJ;AACeC,IAAAA,OADf;AACwBC,IAAAA,QADxB;AACkCC,IAAAA,UADlC;AAC8CC,IAAAA,WAD9C;AAC2DC,IAAAA,iBAD3D;AAC8EC,IAAAA,UAD9E;AAEJC,IAAAA,cAAc,GAAG,MAAMC,cAAc,gBAAG;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,OAAO,EAAEA,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFrH;AAGJA,IAAAA,cAAc,GAAG,IAHb;AAIJC,IAAAA,gBAAgB,GAAG,MAAM,CAAG,CAJxB;AAKJC,IAAAA,QAAQ,GAAG,KALP;AAMJC,IAAAA;AANI,MAOFb,KAPJ;;AASA,QAAMc,WAAW,GAAGjB,CAAC,CAACkB,KAAF,CAAQZ,OAAR,EAAiB,OAAjB,CAApB;;AACA,QAAMa,UAAU,GAAGd,SAAS,CAACe,KAA7B;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAId,QAAQ,IAAIY,UAAU,CAACG,MAAX,GAAoB,CAApC,EAAuC;AACrCD,IAAAA,WAAW,GAAGF,UAAU,CAACI,GAAX,CAAeH,KAAK,IAAIH,WAAW,CAACG,KAAD,CAAnC,CAAd;AACD;;AACD,MAAI,CAACb,QAAD,IAAaY,UAAjB,EAA6B;AAC3BE,IAAAA,WAAW,GAAGJ,WAAW,CAACE,UAAD,CAAzB;AACD;;AAED,QAAMK,gBAAgB,GAAGC,cAAc,IAAI;AACzC,QAAIlB,QAAJ,EAAc;AACZF,MAAAA,SAAS,CAACqB,aAAV,CAAwBD,cAAc,CAACF,GAAf,CAAmBI,MAAM,IAAIA,MAAM,CAACP,KAApC,CAAxB,EADY,CAEZ;AACA;;AACAN,MAAAA,gBAAgB,CAACV,MAAD,CAAhB;AACD,KALD,MAKO;AACLC,MAAAA,SAAS,CAACqB,aAAV,CAAwBD,cAAc,GAAGA,cAAc,CAACL,KAAlB,GAA0B,EAAhE,EADK,CAEL;AACA;;AACAN,MAAAA,gBAAgB,CAACV,MAAD,CAAhB;AACD;AACF,GAZD;;AAcA,sBACE,QAAC,MAAD;AACE,IAAA,UAAU,EAAEO,UADd;AAEE,IAAA,iBAAiB,EAAED,iBAFrB;AAGE,IAAA,OAAO,EAAEH,QAHX;AAIE,IAAA,KAAK,EAAEc,WAJT;AAKE,IAAA,QAAQ,EAAEG,gBALZ,CAME;AANF;AAOE,IAAA,WAAW,EAAE,KAPf;AAQE,IAAA,OAAO,EAAElB,OARX;AASE,IAAA,WAAW,EAAE,KATf;AAUE,IAAA,YAAY,EAAEE,UAVhB;AAWE,IAAA,UAAU,EAAEO,QAXd,CAYE;AACA;AAbF;AAcE,IAAA,WAAW,EAAEN,WAdf;AAeE,IAAA,gBAAgB,EAAEG,cAfpB;AAgBE,IAAA,eAAe,EAAG,eAhBpB;AAiBE,IAAA,SAAS,EAAG,GAAEI,gBAAgB,IAAIA,gBAAgB,CAACY,OAArC,GAA+C,WAA/C,GAA6D,EAAG;AAjBhF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAxDD;;KAAM1B,a;AA0DNA,aAAa,CAAC2B,SAAd,GAA0B;AACxB;AACAzB,EAAAA,MAAM,EAAEL,SAAS,CAAC+B,IAAV,CAAeC,UAFC;AAGxB1B,EAAAA,SAAS,EAAEN,SAAS,CAACiC,MAAV,CAAiBD,UAHJ;AAIxBzB,EAAAA,OAAO,EAAEP,SAAS,CAACkC,KAAV,CAAgBF,UAJD;AAKxBxB,EAAAA,QAAQ,EAAER,SAAS,CAACmC,IALI;AAMxBzB,EAAAA,WAAW,EAAEV,SAAS,CAACoC;AANC,CAA1B;AASAjC,aAAa,CAACkC,YAAd,GAA6B;AAC3B7B,EAAAA,QAAQ,EAAE,KADiB;AAE3BE,EAAAA,WAAW,EAAE;AAFc,CAA7B;AAKA,eAAeP,aAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport Select from \"react-select\";\n\nconst SelectControl = props => {\n  // console.log('props', props);\n  const {\n    onBlur, valueLink, options, multiple, searchable, placeholder, closeMenuOnSelect, menuIsOpen,\n    noOptionCustom = () => noOptionAction ? <div className=\"btn black-btn\" onClick={noOptionAction}>Add New Customer</div> : <div>No Options</div>,\n    noOptionAction = null,\n    onChangeCallback = () => { },\n    disabled = false,\n    failedValidation,\n  } = props;\n\n  const optionsDict = _.keyBy(options, \"value\");\n  const stateValue = valueLink.value;\n  let valueOption = \"\";\n  if (multiple && stateValue.length > 0) {\n    valueOption = stateValue.map(value => optionsDict[value]);\n  }\n  if (!multiple && stateValue) {\n    valueOption = optionsDict[stateValue];\n  }\n\n  const onChangeInternal = selectedOption => {\n    if (multiple) {\n      valueLink.requestChange(selectedOption.map(option => option.value));\n      // onBlur(stateValue);\n      // ON BLUR METHOD IS REMOVED AND INSTED PASSED AS CALLBACK METHOD.\n      onChangeCallback(onBlur);\n    } else {\n      valueLink.requestChange(selectedOption ? selectedOption.value : \"\");\n      // onBlur(stateValue);\n      // ON BLUR METHOD IS REMOVED AND INSTED PASSED AS CALLBACK METHOD.\n      onChangeCallback(onBlur);\n    }\n  };\n\n  return (\n    <Select\n      menuIsOpen={menuIsOpen}\n      closeMenuOnSelect={closeMenuOnSelect}\n      isMulti={multiple}\n      value={valueOption}\n      onChange={onChangeInternal}\n      // onBlur={onBlur}\n      simpleValue={false}\n      options={options}\n      isClearable={false}\n      isSearchable={searchable}\n      isDisabled={disabled}\n      // filterOptions={filterOptions}\n      // filterOptions={customFilterOption}\n      placeholder={placeholder}\n      noOptionsMessage={noOptionCustom}\n      classNamePrefix={`custom-select`}\n      className={`${failedValidation && failedValidation.message ? \"has-error\" : \"\"}`}\n    />\n  );\n};\n\nSelectControl.propTypes = {\n  // classes: PropTypes.object.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  valueLink: PropTypes.object.isRequired,\n  options: PropTypes.array.isRequired,\n  multiple: PropTypes.bool,\n  placeholder: PropTypes.string\n};\n\nSelectControl.defaultProps = {\n  multiple: false,\n  placeholder: 'Select Values'\n};\n\nexport default SelectControl;\n"]},"metadata":{},"sourceType":"module"}