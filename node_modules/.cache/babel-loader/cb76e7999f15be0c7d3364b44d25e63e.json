{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/settlement/SettlePayment.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, Form, FormElement, FormSubmitButton, CustomTextControl, FormValidator, FileUploadControl, SelectControl } from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport { Col, Row, Button, Image } from 'react-bootstrap';\nimport { API_URL, MEDIA_URL } from \"../../utils/Constant\";\nimport settleIcon from \"../../assets/images/icons/settlement-icon.svg\";\nimport { settleFranchaiseApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SettlePayment extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      let data = new URLSearchParams();\n      data.append('settlement_amount', this.props.paybleAmount);\n      data.append('start_date', '01-04-2022');\n      data.append('end_date', '30-09-2022');\n      data.append('franchise_id', \"626b7471ed1ea0b78cf25ea2\");\n      data.append('attachment_id', this.state.attachment.imageId);\n      data.append('reference_id', this.state.transactionId);\n      settleFranchaiseApi(data, this.props.handleClose);\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CustomModal, {\n      show: this.props.show,\n      onHide: () => this.props.handleClose(),\n      title: \"Settle Payment\",\n      modalClass: \"assign-bike\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onValidSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settle-amount-modal\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Image, {\n                src: settleIcon,\n                className: \"settle-pay-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"red-hat-display-bold f-s-26\",\n                children: [\"\\u20B9 \", this.props.paybleAmount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: [/*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"transactionId\"),\n              label: \"Transaction Reference ID\",\n              required: true,\n              validations: [{\n                validate: FormValidator.isRequired,\n                message: \"Transaction Id cannot be empty\"\n              }, {\n                validate: FormValidator.isPositiveInt,\n                message: \" Transaction Id cannot be negative\"\n              }],\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Transaction Id\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, 'attachment'),\n              label: \"Attachment\",\n              required: true,\n              validations: [{\n                validate: FormValidator.isRequired,\n                message: \"File is required\"\n              }],\n              control: {\n                type: FileUploadControl,\n                settings: {\n                  moduleName: \"commerce\",\n                  subModule: \"settlement\",\n                  fileType: \"IMAGE\",\n                  extensions: [\"image/*\"],\n                  maxFiles: 1,\n                  maxFileSize: 100000000,\n                  onSelect: (file, callback) => {\n                    // You will need to generate signedURL by calling API and then call callback\n                    const fileInfo = {\n                      id: file.lastModified,\n                      name: file.name,\n                      size: file.size,\n                      mimeType: file.type,\n                      path: \"single.jpg\"\n                    };\n                    callback(fileInfo, API_URL);\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit-wrapper\",\n          style: {\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n            customClass: `btn black-btn ${!this.state.transactionId && \"inactive-btn\"}`,\n            children: \"Settle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({ ...state\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SettlePayment);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/settlement/SettlePayment.js"],"names":["React","Component","connect","BaseReactComponent","Form","FormElement","FormSubmitButton","CustomTextControl","FormValidator","FileUploadControl","SelectControl","CustomModal","Col","Row","Button","Image","API_URL","MEDIA_URL","settleFranchaiseApi","SettlePayment","constructor","props","onSubmit","data","URLSearchParams","append","paybleAmount","state","attachment","imageId","transactionId","handleClose","componentDidMount","render","show","settleIcon","linkState","validate","isRequired","message","isPositiveInt","type","settings","placeholder","moduleName","subModule","fileType","extensions","maxFiles","maxFileSize","onSelect","file","callback","fileInfo","id","lastModified","name","size","mimeType","path","justifyContent","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    BaseReactComponent, Form, FormElement, FormSubmitButton, CustomTextControl, FormValidator, FileUploadControl, SelectControl\n} from '../../utils/form';\nimport { CustomModal } from \"../common\";\nimport { Col, Row, Button, Image } from 'react-bootstrap';\nimport { API_URL, MEDIA_URL } from \"../../utils/Constant\";\nimport settleIcon from '../../assets/images/icons/settlement-icon.svg'\nimport { settleFranchaiseApi } from './Api';\n\nclass SettlePayment extends BaseReactComponent {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    componentDidMount() { }\n\n    onSubmit = () => {\n        let data = new URLSearchParams();\n        data.append('settlement_amount', this.props.paybleAmount);\n        data.append('start_date', '01-04-2022');\n        data.append('end_date', '30-09-2022');\n        data.append('franchise_id', \"626b7471ed1ea0b78cf25ea2\");\n        data.append('attachment_id', this.state.attachment.imageId);\n        data.append('reference_id', this.state.transactionId);\n        settleFranchaiseApi(data, this.props.handleClose);\n    }\n\n    render() {\n        return (\n            <CustomModal\n                show={this.props.show}\n                onHide={() => this.props.handleClose()}\n                title={\"Settle Payment\"}\n                modalClass={\"assign-bike\"}\n            >\n                <Form onValidSubmit={this.onSubmit}>\n                    <div className='modal-wrapper'>\n                        <div className=\"settle-amount-modal\">\n                            <div>\n                                <Image src={settleIcon} className=\"settle-pay-icon\" />\n                            </div>\n                            <div>\n                                <h3>Amount</h3>\n                                <h4 className=\"red-hat-display-bold f-s-26\">₹ {this.props.paybleAmount}</h4>\n                            </div>\n                        </div>\n                        <Col md={12}>\n                            <FormElement\n                                valueLink={this.linkState(this, \"transactionId\")}\n                                label=\"Transaction Reference ID\"\n                                required\n                                validations={[\n                                    {\n                                        validate: FormValidator.isRequired,\n                                        message: \"Transaction Id cannot be empty\"\n                                    },\n                                    {\n                                        validate: FormValidator.isPositiveInt,\n                                        message: \" Transaction Id cannot be negative\"\n                                    },\n                                ]}\n                                control={{\n                                    type: CustomTextControl,\n                                    settings: {\n                                        placeholder: \"Enter Transaction Id\",\n                                    }\n                                }}\n                            />\n                            <FormElement\n                                valueLink={this.linkState(this, 'attachment')}\n                                label=\"Attachment\"\n                                required\n                                validations={[\n                                    {\n                                        validate: FormValidator.isRequired,\n                                        message: \"File is required\",\n                                    },\n                                ]}\n                                control={{\n                                    type: FileUploadControl,\n                                    settings: {\n                                        moduleName: \"commerce\",\n                                        subModule: \"settlement\",\n                                        fileType: \"IMAGE\",\n                                        extensions: [\"image/*\"],\n                                        maxFiles: 1,\n                                        maxFileSize: 100000000,\n                                        onSelect: (file, callback) => {\n                                            // You will need to generate signedURL by calling API and then call callback\n                                            const fileInfo = {\n                                                id: file.lastModified,\n                                                name: file.name,\n                                                size: file.size,\n                                                mimeType: file.type,\n                                                path: \"single.jpg\",\n                                            };\n                                            callback(fileInfo, API_URL);\n                                        },\n                                    },\n                                }}\n                            />\n                        </Col>\n                    </div>\n                    <div className=\"submit-wrapper\" style={{ justifyContent: 'center' }}>\n                        <FormSubmitButton customClass={`btn black-btn ${!this.state.transactionId && \"inactive-btn\"}`}>Settle</FormSubmitButton>\n                    </div>\n                </Form>\n            </CustomModal >\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    ...state\n});\nconst mapDispatchToProps = {\n    // getPosts: fetchPosts\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SettlePayment);"]},"metadata":{},"sourceType":"module"}