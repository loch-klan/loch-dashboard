{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/battery/Battery.js\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport { ComponentHeader } from '../common';\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllBatteryApi } from './Api';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { formatDate, getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Battery extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleAddBattery = function () {\n      let rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (rowData) {\n        _this.props.history.push({\n          pathname: `/edit-battery/${rowData.id}`,\n          state: {\n            data: rowData\n          }\n        });\n      } else {\n        _this.props.history.push(\"/add-battery\");\n      }\n    };\n\n    this.onChangeMethod = value => {\n      // console.log('Value', value);\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      this.props.getAllBatteryApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      }, () => {\n        if (currentPage === START_PAGE) {\n          this.props.getAllBatteryApi(this, START_PAGE);\n        }\n\n        replaceHistory(this.props.history, START_PAGE);\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      data: [],\n      conditions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllBatteryApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllBatteryApi(this);\n      } else {\n        this.props.getAllBatteryApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      batteryList,\n      page,\n      totalPage\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Battery\",\n        title: \"Battery\",\n        isFilter: false,\n        isPrimaryBtn: () => this.handleAddBattery(),\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_INVENTORY) ? \"+ Add Battery\" : \"\",\n        isSearch: true,\n        placeholder: \"Search Battery\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: batteryList,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Battery Model\",\n            dataKey: \"batteryModel\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"batteryModel\") {\n                return rowData.modelInfo.modelName;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Battery Device ID\",\n            dataKey: \"serialNo\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"serialNo\") {\n                return rowData.serialNo;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Purchase Date\",\n            dataKey: \"purchaseDate\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"purchaseDate\") {\n                return formatDate(rowData.createdOn);\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Iot Status\",\n            dataKey: \"status\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"status\") {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"status\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `circle ${rowData.attachedTelematics ? \"active\" : \"inactive\"}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 46\n                  }, this), \" \", rowData.attachedTelematics ? \"Attached\" : \"Inactive\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [];\n                menuItem.push({\n                  title: \"Edit\",\n                  type: \"event\",\n                  handleClick: () => this.handleAddBattery(rowData)\n                });\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_INVENTORY)) {\n                  return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                    menuItem: menuItem\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 25\n                  }, this);\n                }\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Battery list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  batteryState: state.BatteryState\n});\n\nconst mapDispatchToProps = {\n  getAllBatteryApi\n};\nBattery.propTypes = {// getPosts: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Battery);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/battery/Battery.js"],"names":["React","Component","connect","ComponentHeader","CustomTable","ActionDropdown","getAllBatteryApi","PermissionList","START_PAGE","formatDate","getAssignedPermission","replaceHistory","Battery","constructor","props","handleAddBattery","rowData","history","push","pathname","id","state","data","onChangeMethod","value","setState","searchValue","conditions","key","search","clearSearch","currentPage","location","params","URLSearchParams","page","get","parseInt","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","batteryList","totalPage","permissionList","includes","ADD_UPDATE_BATTERY_INVENTORY","coumnWidth","labelName","dataKey","className","isCell","cell","modelInfo","modelName","serialNo","createdOn","attachedTelematics","menuItem","title","type","handleClick","mapStateToProps","batteryState","BatteryState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { ComponentHeader } from '../common';\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllBatteryApi } from './Api';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { formatDate, getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\n\nclass Battery extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      data: [],\n      conditions: []\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllBatteryApi(this);\n\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllBatteryApi(this);\n      } else {\n        this.props.getAllBatteryApi(this, page - 1);\n      }\n    }\n  }\n  handleAddBattery = (rowData = null) => {\n    if (rowData) {\n      this.props.history.push({\n        pathname: `/edit-battery/${rowData.id}`,\n        state: { data: rowData }\n      });\n    } else {\n      this.props.history.push(\"/add-battery\");\n    }\n\n  }\n\n  onChangeMethod = (value) => {\n    // console.log('Value', value);\n    this.setState({\n      searchValue: value,\n      conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    this.props.getAllBatteryApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    this.setState({ searchValue: \"\", conditions: [] },()=>{\n      if (currentPage === START_PAGE) {\n        this.props.getAllBatteryApi(this, START_PAGE);\n      }\n      replaceHistory(this.props.history, START_PAGE)\n    });\n\n  }\n\n  render() {\n    const { batteryList, page, totalPage, } = this.state;\n    const permissionList = getAssignedPermission();\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Battery\"}\n          title={\"Battery\"}\n          isFilter={false}\n          isPrimaryBtn={() => this.handleAddBattery()}\n          primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_INVENTORY) ? \"+ Add Battery\" : \"\"}\n          isSearch={true}\n          placeholder={\"Search Battery\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={batteryList}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"Battery Model\",\n                dataKey: \"batteryModel\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"batteryModel\") {\n                    return rowData.modelInfo.modelName\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Battery Device ID\",\n                dataKey: \"serialNo\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"serialNo\") {\n                    return rowData.serialNo\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Purchase Date\",\n                dataKey: \"purchaseDate\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"purchaseDate\") {\n                    return formatDate(rowData.createdOn)\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Iot Status\",\n                dataKey: \"status\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"status\") {\n                    return (\n                      <p className='status'> <span className={`circle ${rowData.attachedTelematics ? \"active\" : \"inactive\"}`}></span> {rowData.attachedTelematics ? \"Attached\" : \"Inactive\"}</p>\n                    )\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [];\n\n                    menuItem.push({\n                      title: \"Edit\",\n                      type: \"event\",\n                      handleClick: () => this.handleAddBattery(rowData),\n                    })\n                    if (permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_INVENTORY)) {\n                      return (\n                        <ActionDropdown\n                          menuItem={menuItem}\n                        />\n                      )\n                    }\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"Battery list is empty\"}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  batteryState: state.BatteryState\n});\nconst mapDispatchToProps = {\n  getAllBatteryApi\n}\nBattery.propTypes = {\n  // getPosts: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Battery);"]},"metadata":{},"sourceType":"module"}