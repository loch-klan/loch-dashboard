{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/bikeModel/_utils/AddEditVehiclePricing.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { BaseReactComponent, Form, FormElement, FormSubmitButton, FormValidator, CustomTextControl, SelectControl } from \"../../../utils/form\";\nimport { ComponentHeader, CustomModal } from \"../../common\";\nimport { Col, Row } from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport { LocationType, PricingLevelOptions, PricingTypeOptions, YesNoOptions, PricingType, PricingLevel } from \"../../../utils/Constant\";\nimport { getAllLocationApi } from \"../../common/Api\";\nimport { addUpdateVehiclePricingApi, getAllVehiclePricingApi } from \"../Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditVehiclePricing extends BaseReactComponent {\n  constructor(props) {\n    super(props); // console.log('ctx',props);\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"model_id\", this.state.modelId);\n      data.append(\"pricing_type\", this.state.pricingType);\n      data.append(\"minimum_time_booking\", this.state.minBookingTime);\n      data.append(\"price\", this.state.price);\n      data.append(\"rental_time\", this.state.rentalTime);\n\n      if (this.state.isDefault === \"false\") {\n        data.append(\"pricing_level\", this.state.pricingLevel);\n        data.append(\"location_ids\", JSON.stringify(this.state.selectedLocations));\n      }\n\n      data.append(\"is_default\", this.state.isDefault);\n      data.append(\"per_km_price\", this.state.pricePerKm);\n      data.append(\"penalty_price_per_hour\", this.state.penaltyPrice);\n      data.append(\"allowed_kms\", this.state.allowedKms);\n      data.append(\"deposit\", this.state.deposit);\n\n      if (this.state.id) {\n        data.append(\"model_pricing_id\", this.state.id);\n      }\n\n      const data2 = new URLSearchParams();\n      data2.append(\"model_id\", this.state.modelId);\n      data2.append(\"conditions\", JSON.stringify(this.state.conditions));\n      this.props.addUpdateVehiclePricingApi(data, this, data2);\n    };\n\n    const {\n      state\n    } = props.location;\n\n    const _data = state ? state.data : null; // console.log('pricingData',data);\n\n\n    this.state = {\n      modelId: state ? state.state.modelId : \"\",\n      id: _data ? _data.id : \"\",\n      minBookingTime: _data ? _data.minimum_time_booking : \"\",\n      price: _data ? _data.price : \"\",\n      pricingLevel: _data ? _data.pricing_level : parseInt(state.state.selectedTab) === PricingLevel.CITY ? PricingLevel.CITY : parseInt(state.state.selectedTab) === PricingLevel.AREA ? PricingLevel.AREA : null,\n      pricingType: PricingType.HOURLY,\n      pricePerKm: _data ? _data.per_km_price : \"\",\n      penaltyPrice: _data ? _data.penalty_price_per_hour : \"\",\n      rentalTime: _data ? _data.rental_time : \"\",\n      allowedKms: _data ? _data.allowed_kms : \"\",\n      deposit: _data ? _data.deposit : \"\",\n      cityList: [],\n      areaList: [],\n      selectedLocations: _data ? _data.location_ids : [],\n      isDefault: state && state.state.selectedTab === \"default\" ? \"true\" : \"false\",\n      vehicleData: \"\",\n      stateId: \"\",\n      selectedTab: state ? parseInt(state.state.selectedTab) : \"\"\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.id) {\n      this.props.getAllLocationApi(this, parseInt(this.state.pricingLevel));\n    }\n\n    if ([30, 40].includes(this.state.selectedTab)) {\n      this.props.getAllLocationApi(this, parseInt(this.state.pricingLevel));\n    }\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    // const { cityList, areaList } = this.state;\n    return (\n      /*#__PURE__*/\n      // <CustomModal\n      //   show={this.props.show}\n      //   onHide={this.props.handleClose}\n      //   title={\"Add Vehicle Pricing \"}\n      // >\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n          backArrowBtn: true,\n          history: this.props.history,\n          title: this.state.id ? \"Edit Vehicle Pricing\" : \"Add Vehicle Pricing\",\n          secondaryBtnText: \"Cancel\",\n          isSecondaryBtn: () => this.props.history.goBack(),\n          isPrimaryBtn: this.onNextClick,\n          primaryBtnText: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-edit-customer-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onValidSubmit: this.onSubmit,\n              ref: el => this.form = el,\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"pricingType\"),\n                    label: \"Select Pricing Type\",\n                    required: true,\n                    disabled: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Pricing type cannot be empty\"\n                    }],\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Pricing Type\",\n                        options: PricingTypeOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: onBlur => {\n                          onBlur(this.state.pricingType);\n                          console.log(\"Hello world!\");\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"rentalTime\"),\n                    label: \"Rental Time (hr/hrs)\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Rental time cannot be empty\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Rental Time\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minBookingTime\"),\n                    label: `Minimum Booking Time ( ${PricingType.getFormatedText(this.state.pricingType)} )`,\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum booking time cannot be empty\"\n                    }, {\n                      validate: FormValidator.isPositiveInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Booking Time\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"price\"),\n                    label: \"Price (\\u20B9)\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Price cannot be empty\"\n                    }, {\n                      validate: FormValidator.isPositiveInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Price\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 17\n                }, this), this.state.isDefault === \"false\" && /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"pricingLevel\"),\n                    label: \"Select Pricing Level\",\n                    required: true,\n                    disabled: [30, 40].includes(this.state.selectedTab) ? true : false,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Pricing level cannot be empty\"\n                    }],\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Pricing Level\",\n                        options: PricingLevelOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: onBlur => {\n                          onBlur(this.state.pricingLevel);\n                          console.log(\"Hello world!\");\n                          this.setState({\n                            selectedLocations: [],\n                            areaList: [],\n                            cityList: []\n                          }, () => {\n                            this.props.getAllLocationApi(this, parseInt(this.state.pricingLevel));\n                          });\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 19\n                }, this), this.state.isDefault === \"false\" && /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"selectedLocations\"),\n                    label: \"Select Locations\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Locations cannot be empty\"\n                    }],\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Locations\",\n                        options: parseInt(this.state.pricingLevel) === LocationType.CITY ? this.state.cityList : this.state.areaList,\n                        multiple: true,\n                        searchable: true,\n                        onChangeCallback: onBlur => {\n                          onBlur(this.state.selectedLocations);\n                          console.log(\"Hello world!\");\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"pricePerKm\"),\n                    label: \"Price Per Km (\\u20B9)\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Price cannot be empty\"\n                    }, {\n                      validate: FormValidator.isPositiveInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Price Per Km\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"penaltyPrice\"),\n                    label: \"Penalty Price Per Km (\\u20B9)\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Penalty price per km cannot be empty\"\n                    }, {\n                      validate: FormValidator.isPositiveInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Penalty Price Per Km\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"isDefault\"),\n                    label: \"Is default?\",\n                    required: true,\n                    disabled: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Please select any one option\"\n                    }],\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Default\",\n                        options: YesNoOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: onBlur => {\n                          onBlur(this.state.isDefault);\n                          console.log(\"Hello world!\");\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"allowedKms\"),\n                    label: \"Allowed Kms\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Allowed kms cannot be empty\"\n                    }, {\n                      validate: FormValidator.isPositiveInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Price Kms\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  sm: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"deposit\"),\n                    label: \"Deposit (\\u20B9)\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Deposit cannot be empty\"\n                    }, {\n                      validate: FormValidator.isPositiveInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Deposit\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 408,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true)\n    );\n  }\n\n}\n\nAddEditVehiclePricing.propTypes = {// show: PropTypes.bool.isRequired,\n  // handleClose: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  // ...state,\n  bikeModelState: state.BikeModelState\n});\n\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  addUpdateVehiclePricingApi,\n  getAllVehiclePricingApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditVehiclePricing);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/bikeModel/_utils/AddEditVehiclePricing.js"],"names":["React","PropTypes","connect","BaseReactComponent","Form","FormElement","FormSubmitButton","FormValidator","CustomTextControl","SelectControl","ComponentHeader","CustomModal","Col","Row","ReactDOM","LocationType","PricingLevelOptions","PricingTypeOptions","YesNoOptions","PricingType","PricingLevel","getAllLocationApi","addUpdateVehiclePricingApi","getAllVehiclePricingApi","AddEditVehiclePricing","constructor","props","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onSubmit","data","URLSearchParams","append","state","modelId","pricingType","minBookingTime","price","rentalTime","isDefault","pricingLevel","JSON","stringify","selectedLocations","pricePerKm","penaltyPrice","allowedKms","deposit","id","data2","conditions","location","minimum_time_booking","pricing_level","parseInt","selectedTab","CITY","AREA","HOURLY","per_km_price","penalty_price_per_hour","rental_time","allowed_kms","cityList","areaList","location_ids","vehicleData","stateId","componentDidMount","includes","componentWillUnmount","render","history","goBack","el","linkState","validate","isRequired","message","type","settings","placeholder","options","multiple","searchable","onChangeCallback","onBlur","console","log","getFormatedText","isPositiveInt","setState","propTypes","mapStateToProps","bikeModelState","BikeModelState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport {\n  BaseReactComponent,\n  Form,\n  FormElement,\n  FormSubmitButton,\n  FormValidator,\n  CustomTextControl,\n  SelectControl\n} from \"../../../utils/form\"\nimport { ComponentHeader, CustomModal } from \"../../common\"\nimport { Col, Row } from \"react-bootstrap\"\nimport ReactDOM from \"react-dom\"\nimport {\n  LocationType,\n  PricingLevelOptions,\n  PricingTypeOptions,\n  YesNoOptions,\n  PricingType,\n  PricingLevel\n} from \"../../../utils/Constant\"\nimport { getAllLocationApi } from \"../../common/Api\"\nimport { addUpdateVehiclePricingApi, getAllVehiclePricingApi } from \"../Api\"\n\nclass AddEditVehiclePricing extends BaseReactComponent {\n  constructor(props) {\n    super(props)\n    // console.log('ctx',props);\n    const { state } = props.location\n    const data = state ? state.data : null\n    // console.log('pricingData',data);\n    this.state = {\n      modelId: state ? state.state.modelId : \"\",\n      id: data ? data.id : \"\",\n      minBookingTime: data ? data.minimum_time_booking : \"\",\n      price: data ? data.price : \"\",\n      pricingLevel: data\n        ? data.pricing_level\n        : parseInt(state.state.selectedTab) === PricingLevel.CITY\n        ? PricingLevel.CITY\n        : parseInt(state.state.selectedTab) === PricingLevel.AREA\n        ? PricingLevel.AREA\n        : null,\n      pricingType: PricingType.HOURLY,\n      pricePerKm: data ? data.per_km_price : \"\",\n      penaltyPrice: data ? data.penalty_price_per_hour : \"\",\n      rentalTime: data ? data.rental_time : \"\",\n      allowedKms: data ? data.allowed_kms : \"\",\n      deposit: data ? data.deposit : \"\",\n      cityList: [],\n      areaList: [],\n      selectedLocations: data ? data.location_ids : [],\n      isDefault:\n        state && state.state.selectedTab === \"default\" ? \"true\" : \"false\",\n      vehicleData: \"\",\n      stateId: \"\",\n      selectedTab: state ? parseInt(state.state.selectedTab) : \"\"\n    }\n  }\n  componentDidMount() {\n    if (this.state.id) {\n      this.props.getAllLocationApi(this, parseInt(this.state.pricingLevel))\n    }\n    if ([30, 40].includes(this.state.selectedTab)) {\n      this.props.getAllLocationApi(this, parseInt(this.state.pricingLevel))\n    }\n  }\n\n  componentWillUnmount() {}\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    )\n  }\n\n  onSubmit = () => {\n    const data = new URLSearchParams()\n    data.append(\"model_id\", this.state.modelId)\n    data.append(\"pricing_type\", this.state.pricingType)\n    data.append(\"minimum_time_booking\", this.state.minBookingTime)\n    data.append(\"price\", this.state.price)\n    data.append(\"rental_time\", this.state.rentalTime)\n    if (this.state.isDefault === \"false\") {\n      data.append(\"pricing_level\", this.state.pricingLevel)\n      data.append(\"location_ids\", JSON.stringify(this.state.selectedLocations))\n    }\n    data.append(\"is_default\", this.state.isDefault)\n    data.append(\"per_km_price\", this.state.pricePerKm)\n    data.append(\"penalty_price_per_hour\", this.state.penaltyPrice)\n    data.append(\"allowed_kms\", this.state.allowedKms)\n    data.append(\"deposit\", this.state.deposit)\n    if (this.state.id) {\n      data.append(\"model_pricing_id\", this.state.id)\n    }\n\n    const data2 = new URLSearchParams()\n    data2.append(\"model_id\", this.state.modelId)\n    data2.append(\"conditions\", JSON.stringify(this.state.conditions))\n\n    this.props.addUpdateVehiclePricingApi(data, this, data2)\n  }\n\n  render() {\n    // const { cityList, areaList } = this.state;\n    return (\n      // <CustomModal\n      //   show={this.props.show}\n      //   onHide={this.props.handleClose}\n      //   title={\"Add Vehicle Pricing \"}\n      // >\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.id ? \"Edit Vehicle Pricing\" : \"Add Vehicle Pricing\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onSubmit} ref={(el) => (this.form = el)}>\n              {/* <div\n            className=\"modal-wrapper\"\n            style={{ padding: \"3.9rem 3rem 2.9rem\" }}\n          > */}\n              <Row>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"pricingType\")}\n                    label=\"Select Pricing Type\"\n                    required\n                    disabled\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Pricing type cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Pricing Type\",\n                        options: PricingTypeOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.pricingType)\n                          console.log(\"Hello world!\")\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"rentalTime\")}\n                    label=\"Rental Time (hr/hrs)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Rental time cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Rental Time\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"minBookingTime\")}\n                    label={`Minimum Booking Time ( ${PricingType.getFormatedText(\n                      this.state.pricingType\n                    )} )`}\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Minimum booking time cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter numeric value\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Booking Time\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"price\")}\n                    label=\"Price (₹)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Price cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter numeric value\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Price\"\n                      }\n                    }}\n                  />\n                </Col>\n                {this.state.isDefault === \"false\" && (\n                  <Col sm={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"pricingLevel\")}\n                      label=\"Select Pricing Level\"\n                      required\n                      disabled={\n                        [30, 40].includes(this.state.selectedTab) ? true : false\n                      }\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Pricing level cannot be empty\"\n                        }\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Pricing Level\",\n                          options: PricingLevelOptions,\n                          multiple: false,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.pricingLevel)\n                            console.log(\"Hello world!\")\n                            this.setState(\n                              {\n                                selectedLocations: [],\n                                areaList: [],\n                                cityList: []\n                              },\n                              () => {\n                                this.props.getAllLocationApi(\n                                  this,\n                                  parseInt(this.state.pricingLevel)\n                                )\n                              }\n                            )\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                )}\n\n                {this.state.isDefault === \"false\" && (\n                  <Col sm={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"selectedLocations\")}\n                      label=\"Select Locations\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Locations cannot be empty\"\n                        }\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Locations\",\n                          options:\n                            parseInt(this.state.pricingLevel) ===\n                            LocationType.CITY\n                              ? this.state.cityList\n                              : this.state.areaList,\n                          multiple: true,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.selectedLocations)\n                            console.log(\"Hello world!\")\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                )}\n\n                {/* </Row>\n              <Row> */}\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"pricePerKm\")}\n                    label=\"Price Per Km (₹)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Price cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter numeric value\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Price Per Km\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"penaltyPrice\")}\n                    label=\"Penalty Price Per Km (₹)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Penalty price per km cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter numeric value\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Penalty Price Per Km\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"isDefault\")}\n                    label=\"Is default?\"\n                    required\n                    disabled\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Please select any one option\"\n                      }\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Default\",\n                        options: YesNoOptions,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.isDefault)\n                          console.log(\"Hello world!\")\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                {/* </Row>\n              <Row> */}\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"allowedKms\")}\n                    label=\"Allowed Kms\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Allowed kms cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter numeric value\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Price Kms\"\n                      }\n                    }}\n                  />\n                </Col>\n                <Col sm={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"deposit\")}\n                    label=\"Deposit (₹)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Deposit cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter numeric value\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Deposit\"\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nAddEditVehiclePricing.propTypes = {\n  // show: PropTypes.bool.isRequired,\n  // handleClose: PropTypes.func.isRequired,\n}\nconst mapStateToProps = (state) => ({\n  // ...state,\n  bikeModelState: state.BikeModelState\n})\n\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  addUpdateVehiclePricingApi,\n  getAllVehiclePricingApi\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AddEditVehiclePricing)\n"]},"metadata":{},"sourceType":"module"}