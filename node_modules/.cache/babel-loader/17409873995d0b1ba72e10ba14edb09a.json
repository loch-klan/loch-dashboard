{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/locationMaster/Area.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { LocationType, PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common'; // import ActionDropdown from '../common/_utils/ActionDropdown';\n\nimport { getAllLocationApi, updateLocationApi } from '../common/Api';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport Switch from '../common/_utils/Switch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Area extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleToggle = rowData => {\n      const {\n        id,\n        is_operational,\n        code,\n        name,\n        type,\n        parent_id\n      } = rowData;\n      let data = new URLSearchParams();\n      data.append(\"location_id\", id);\n      data.append(\"location_type\", type);\n      data.append(\"name\", name);\n      data.append(\"code\", code);\n      data.append(\"is_operational\", !is_operational);\n      data.append(\"parent_id\", parent_id);\n      this.props.updateLocationApi(data, this);\n    };\n\n    this.handleFilter = () => {\n      this.setState({\n        showFilter: !this.state.showFilter\n      });\n    };\n\n    this.handleAddCountry = function () {\n      let rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      if (rowData) {\n        _this.props.history.push({\n          pathname: `/location-master/area/edit-area/${rowData.id}`,\n          state: {\n            data: rowData\n          }\n        });\n      } else {\n        _this.props.history.push(\"/location-master/area/add-area\");\n      }\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search); // this.props.getAllIotApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      });\n\n      if (currentPage === START_PAGE) {// this.props.getAllIotApi(this, START_PAGE);\n      }\n\n      replaceHistory(this.props.history, START_PAGE);\n    };\n\n    this.handleEditArea = rowData => {\n      console.log('rowData', rowData);\n      this.props.history.push({\n        pathname: `/location-master/area/edit-area/${rowData.id}`,\n        state: {\n          editData: rowData\n        }\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      areaList: [],\n      showFilter: false,\n      conditions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.AREA);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {// this.props.getAllIotApi(this);\n      } else {// this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      page,\n      totalPage,\n      areaList\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        breadcrumb: true,\n        currentPage: \"Area\",\n        title: \"Area\",\n        isFilter: false,\n        isPrimaryBtn: () => this.handleAddCountry(\"\"),\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY) ? \"+ Add Area\" : \"\" // isSearch={true}\n        // placeholder={\"Search Area\"}\n        // onChangeMethod={this.onChangeMethod}\n        // clearSearch={() => this.clearSearch(page || START_PAGE)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: areaList,\n          columnList: [{\n            coumnWidth: 200,\n            labelName: \"Area Name\",\n            dataKey: \"name\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"name\") {\n                return rowData.name;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Code\",\n            dataKey: \"code\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"code\") {\n                return rowData.code;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Operation Status\",\n            dataKey: \"is_operational\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"is_operational\") {\n                return /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: rowData.is_operational,\n                  handleClick: () => this.handleToggle(rowData)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [{\n                  title: \"Edit\",\n                  type: \"event\",\n                  handleClick: () => this.handleEditArea(rowData)\n                }];\n                return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                  menuItem: menuItem\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Area list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  locationMasterState: state.LocationMasterState\n});\n\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  updateLocationApi\n};\nArea.propTypes = {// getPosts: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Area);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/locationMaster/Area.js"],"names":["React","Component","connect","CustomTable","LocationType","PermissionList","START_PAGE","getAssignedPermission","replaceHistory","ComponentHeader","getAllLocationApi","updateLocationApi","ActionDropdown","Switch","Area","constructor","props","handleToggle","rowData","id","is_operational","code","name","type","parent_id","data","URLSearchParams","append","handleFilter","setState","showFilter","state","handleAddCountry","history","push","pathname","onChangeMethod","value","searchValue","conditions","key","search","clearSearch","currentPage","handleEditArea","console","log","editData","location","params","page","get","parseInt","areaList","componentDidMount","AREA","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","permissionList","includes","ADD_UPDATE_TELEMATICS_INVENTORY","coumnWidth","labelName","dataKey","className","isCell","cell","menuItem","title","handleClick","mapStateToProps","locationMasterState","LocationMasterState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { LocationType, PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\n// import ActionDropdown from '../common/_utils/ActionDropdown';\nimport {getAllLocationApi, updateLocationApi} from '../common/Api';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport Switch from '../common/_utils/Switch';\n\nclass Area extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      areaList: [],\n      showFilter: false,\n      conditions: []\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.AREA);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        // this.props.getAllIotApi(this);\n      } else {\n        // this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  handleToggle = (rowData) => {\n    const { id, is_operational, code, name, type, parent_id } = rowData;\n    let data = new URLSearchParams();\n    data.append(\"location_id\", id);\n    data.append(\"location_type\", type);\n    data.append(\"name\", name);\n    data.append(\"code\", code);\n    data.append(\"is_operational\", !is_operational);\n    data.append(\"parent_id\", parent_id);\n    this.props.updateLocationApi(data, this);\n  };\n\n  handleFilter = () => {\n    this.setState({\n      showFilter: !this.state.showFilter\n    })\n  }\n\n  handleAddCountry = (rowData = \"\") => {\n    if (rowData) {\n      this.props.history.push({\n        pathname: `/location-master/area/edit-area/${rowData.id}`,\n        state: { data: rowData }\n      });\n    } else {\n      this.props.history.push(\"/location-master/area/add-area\");\n    }\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({\n      searchValue: value,\n      conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    // this.props.getAllIotApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    this.setState({ searchValue: \"\", conditions: [] });\n    if (currentPage === START_PAGE) {\n      // this.props.getAllIotApi(this, START_PAGE);\n    }\n    replaceHistory(this.props.history, START_PAGE)\n  }\n\n  handleEditArea = (rowData) =>{\n    console.log('rowData',rowData);\n    this.props.history.push({\n      pathname: `/location-master/area/edit-area/${rowData.id}`,\n      state: { editData: rowData }\n    });\n  }\n  render() {\n    const { page, totalPage, areaList } = this.state;\n    const permissionList = getAssignedPermission();\n    return (\n      <>\n        <ComponentHeader\n          breadcrumb={true}\n          currentPage={\"Area\"}\n          title={\"Area\"}\n          isFilter={false}\n          isPrimaryBtn={() => this.handleAddCountry(\"\")}\n          primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY) ? \"+ Add Area\" : \"\"}\n          // isSearch={true}\n          // placeholder={\"Search Area\"}\n          // onChangeMethod={this.onChangeMethod}\n          // clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={areaList}\n            columnList={[\n              {\n                coumnWidth: 200,\n                labelName: \"Area Name\",\n                dataKey: \"name\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"name\") {\n                    return rowData.name\n                  }\n                }\n              },\n              {\n                coumnWidth: 350,\n                labelName: \"Code\",\n                dataKey: \"code\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"code\") {\n                    return rowData.code\n                  }\n                }\n              },\n              {\n                coumnWidth: 350,\n                labelName: \"Operation Status\",\n                dataKey: \"is_operational\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"is_operational\") {\n                    return (\n                      <Switch\n                      checked={rowData.is_operational}\n                      handleClick={() => this.handleToggle(rowData)}\n                    />\n                    )\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [\n                      {\n                        title: \"Edit\",\n                        type: \"event\",\n                        handleClick: () => this.handleEditArea(rowData),\n                      }\n                    ];\n                    return (\n                      <ActionDropdown\n                        menuItem={menuItem}\n                      />\n                    )\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"Area list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  locationMasterState: state.LocationMasterState\n});\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  updateLocationApi\n}\nArea.propTypes = {\n  // getPosts: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Area);"]},"metadata":{},"sourceType":"module"}