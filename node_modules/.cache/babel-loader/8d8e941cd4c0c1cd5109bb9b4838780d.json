{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/common/ResetPassword.js\";\nimport React from 'react';\nimport { toast } from 'react-toastify';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator } from '../../utils/form';\nimport { resetPasswordApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ResetPassword extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      if (this.state.newPassword !== this.state.confirmPassword) {\n        toast.error(\"New password and Confirm password don't match\");\n        return;\n      }\n\n      const data = new URLSearchParams();\n      data.append('password', this.state.newPassword);\n      data.append('token', this.state.token);\n      resetPasswordApi(this, data);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const token = params.get(\"token\");\n    this.state = {\n      errorMessage: \"\",\n      inProgress: false,\n      token: token ? token : \"\",\n      newPassword: '',\n      confirmPassword: ''\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    console.log(\"props\", this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"red-hat-display-bold f-s-24\",\n          children: \"Set Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onValidSubmit: this.onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormElement, {\n            valueLink: this.linkState(this, \"newPassword\"),\n            label: \"Password\",\n            required: true,\n            validations: [{\n              validate: FormValidator.isRequired,\n              message: \"Field cannot be empty\"\n            }],\n            control: {\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Password\",\n                type: \"password\"\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n            valueLink: this.linkState(this, \"confirmPassword\"),\n            label: \"Confirm Password\",\n            required: true,\n            validations: [{\n              validate: FormValidator.isRequired,\n              message: \"Field cannot be empty\"\n            }],\n            control: {\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Password\",\n                type: \"password\" // suffix: <Image src={this.state.showConfirmPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showConfirmPassword\")} className=\"eye-icon\" />\n\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"submit-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n              customClass: \"btn black-btn\",\n              children: \"Reset Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nResetPassword.propTypes = {};\nexport default ResetPassword;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/common/ResetPassword.js"],"names":["React","toast","BaseReactComponent","CustomTextControl","Form","FormElement","FormSubmitButton","FormValidator","resetPasswordApi","ResetPassword","constructor","props","onSubmit","state","newPassword","confirmPassword","error","data","URLSearchParams","append","token","search","location","params","get","errorMessage","inProgress","componentDidMount","render","console","log","linkState","validate","isRequired","message","type","settings","placeholder","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  BaseReactComponent, CustomTextControl, Form, FormElement, FormSubmitButton, FormValidator\n} from '../../utils/form';\nimport { resetPasswordApi } from './Api';\n\n\nclass ResetPassword extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const token = params.get(\"token\");\n    this.state = {\n      errorMessage: \"\",\n      inProgress: false,\n      token: token ? token : \"\",\n      newPassword: '',\n      confirmPassword: '',\n    }\n  }\n  componentDidMount() { }\n\n  onSubmit = () => {\n    if (this.state.newPassword !== this.state.confirmPassword) {\n      toast.error(\"New password and Confirm password don't match\");\n      return;\n    }\n    const data = new URLSearchParams();\n    data.append('password', this.state.newPassword);\n    data.append('token', this.state.token);\n    resetPasswordApi(this, data);\n  }\n\n  render() {\n    console.log(\"props\",this.props)\n    return (\n      <div className=\"login-wrapper\">\n        <div className=\"login-content\">\n          <h1 className=\"red-hat-display-bold f-s-24\">Set Password</h1>\n          <Form onValidSubmit={this.onSubmit}>\n            <FormElement\n              valueLink={this.linkState(this, \"newPassword\")}\n              label=\"Password\"\n              required\n              validations={[\n                {\n                  validate: FormValidator.isRequired,\n                  message: \"Field cannot be empty\"\n                }\n              ]}\n              control={{\n                type: CustomTextControl,\n                settings: {\n                  placeholder: \"Enter Password\",\n                  type: \"password\",\n                }\n              }}\n            />\n            <FormElement\n            valueLink={this.linkState(this, \"confirmPassword\")}\n            label=\"Confirm Password\"\n            required\n            validations={[\n              {\n                validate: FormValidator.isRequired,\n                message: \"Field cannot be empty\"\n              }\n            ]}\n            control={{\n              type: CustomTextControl,\n              settings: {\n                placeholder: \"Enter Password\",\n                type: \"password\",\n                // suffix: <Image src={this.state.showConfirmPassword ? eyeVisible : eyeIcon} onClick={() => this.handleEye(\"showConfirmPassword\")} className=\"eye-icon\" />\n              }\n            }}\n          />\n            <div className=\"submit-wrapper\">\n              <FormSubmitButton customClass=\"btn black-btn\">Reset Password</FormSubmitButton>\n            </div>\n          </Form>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nResetPassword.propTypes = {\n};\n\nexport default ResetPassword;"]},"metadata":{},"sourceType":"module"}