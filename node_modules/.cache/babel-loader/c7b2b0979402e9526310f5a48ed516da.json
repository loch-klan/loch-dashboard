{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/batteryModel/BatteryModel.js\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllBatteryModelsApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass BatteryModel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFilter = () => {\n      this.setState({\n        showFilter: !this.state.showFilter\n      });\n    };\n\n    this.handleAddBatteryModel = () => {\n      this.props.history.push(\"/master/battery-models/add-battery-model\");\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      getAllBatteryModelsApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      }, () => {\n        if (currentPage === START_PAGE) {\n          getAllBatteryModelsApi(this, START_PAGE);\n        }\n      });\n      replaceHistory(this.props.history, START_PAGE + 1);\n    };\n\n    this.handleEditBatteryModel = rowData => {\n      this.props.history.push({\n        pathname: `/master/battery-models/edit-battery-model/${rowData.id}`,\n        state: {\n          editData: rowData\n        }\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const searchText = params.get(\"search\");\n    this.state = {\n      BatteryModels: [],\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      totalPage: 1,\n      searchText,\n      searchKey: 'SEARCH_BY_TEXT',\n      showFilter: false\n    };\n  }\n\n  componentDidMount() {\n    getAllBatteryModelsApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1; // const prevSearchText = prevParams.get('search');\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1; // const searchText = params.get('search');\n\n    const search = params.get('search') || \"\";\n    /* if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({ page, searchText }, () => {\n        getAllBatteryModelsApi(this);\n      })\n    } */\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        getAllBatteryModelsApi(this);\n      } else {\n        getAllBatteryModelsApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      BatteryModels,\n      page,\n      totalPage\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Battery Models\",\n        title: \"Battery Models\",\n        isFilter: false,\n        isPrimaryBtn: this.handleAddBatteryModel,\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_MODEL) ? \"+ Add Battery Model\" : \"\",\n        isSearch: true,\n        placeholder: \"Search Battery Model\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: BatteryModels,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Model Name\",\n            dataKey: \"modelName\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelName\") {\n                return rowData.modelName;\n              }\n            }\n          }, {\n            coumnWidth: 300,\n            labelName: \"Manufacturer Name\",\n            dataKey: \"modelCompany\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelCompany\") {\n                return rowData.modelCompany;\n              }\n            }\n          }, {\n            coumnWidth: 230,\n            labelName: \"Battery Type\",\n            dataKey: \"batteryInformation\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"batteryInformation\") {\n                return rowData.batteryInformation.type;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Charging Time\",\n            dataKey: \"batteryInformation\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"batteryInformation\") {\n                return rowData.batteryInformation.chargingTime.min + \"/\" + rowData.batteryInformation.chargingTime.max;\n              }\n            }\n          }, {\n            coumnWidth: 300,\n            labelName: \"Optimal Voltage Range\",\n            dataKey: \"modelCompany\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelCompany\") {\n                return rowData.batteryInformation.optimalVoltageRange.min + \"/\" + rowData.batteryInformation.optimalVoltageRange.max;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Peak Power\",\n            dataKey: \"modelCompany\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelCompany\") {\n                return rowData.batteryInformation.peakPower.min + \"/\" + rowData.batteryInformation.peakPower.max;\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [{\n                  title: \"Edit\",\n                  type: \"event\",\n                  handleClick: () => this.handleEditBatteryModel(rowData)\n                }];\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_MODEL)) {\n                  return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                    menuItem: menuItem\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 25\n                  }, this);\n                }\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page // because of 0 based indexing\n          ,\n          message: \"Battery models not found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(BatteryModel);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/batteryModel/BatteryModel.js"],"names":["React","Component","connect","CustomTable","PermissionList","START_PAGE","getAssignedPermission","replaceHistory","ComponentHeader","ActionDropdown","getAllBatteryModelsApi","BatteryModel","constructor","props","handleFilter","setState","showFilter","state","handleAddBatteryModel","history","push","onChangeMethod","value","searchValue","conditions","key","search","clearSearch","currentPage","handleEditBatteryModel","rowData","pathname","id","editData","location","params","URLSearchParams","page","get","searchText","BatteryModels","parseInt","totalPage","searchKey","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","permissionList","includes","ADD_UPDATE_BATTERY_MODEL","coumnWidth","labelName","dataKey","className","isCell","cell","modelName","modelCompany","batteryInformation","type","chargingTime","min","max","optimalVoltageRange","peakPower","menuItem","title","handleClick","mapStateToProps","customersState","CustomersState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllBatteryModelsApi } from './Api';\n\nclass BatteryModel extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const searchText = params.get(\"search\");\n    this.state = {\n      BatteryModels: [],\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      totalPage: 1,\n      searchText,\n      searchKey: 'SEARCH_BY_TEXT',\n      showFilter: false,\n    }\n  }\n\n  componentDidMount() {\n    getAllBatteryModelsApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    // const prevSearchText = prevParams.get('search');\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    // const searchText = params.get('search');\n    const search = params.get('search') || \"\";\n\n\n    /* if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({ page, searchText }, () => {\n        getAllBatteryModelsApi(this);\n      })\n    } */\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        getAllBatteryModelsApi(this);\n      } else {\n        getAllBatteryModelsApi(this, page - 1);\n      }\n    }\n  }\n\n  handleFilter = () => {\n    this.setState({\n      showFilter: !this.state.showFilter\n    })\n  }\n\n  handleAddBatteryModel = () => {\n    this.props.history.push(\"/master/battery-models/add-battery-model\");\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({\n      searchValue: value,\n      conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    getAllBatteryModelsApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    this.setState({ searchValue: \"\", conditions: [] }, () => {\n      if (currentPage === START_PAGE) {\n        getAllBatteryModelsApi(this, START_PAGE);\n      }\n    });\n\n    replaceHistory(this.props.history, START_PAGE + 1)\n  }\n\n  handleEditBatteryModel = (rowData) => {\n    this.props.history.push({\n      pathname: `/master/battery-models/edit-battery-model/${rowData.id}`,\n      state: { editData: rowData }\n    });\n  }\n\n  render() {\n    const { BatteryModels, page, totalPage } = this.state;\n    const permissionList = getAssignedPermission();\n    return (\n      <>\n\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Battery Models\"}\n          title={\"Battery Models\"}\n          isFilter={false}\n          isPrimaryBtn={this.handleAddBatteryModel}\n          primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_MODEL) ? \"+ Add Battery Model\" : \"\"}\n          isSearch={true}\n          placeholder={\"Search Battery Model\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={BatteryModels}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"Model Name\",\n                dataKey: \"modelName\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelName\") {\n                    return rowData.modelName\n                  }\n                }\n              },\n              {\n                coumnWidth: 300,\n                labelName: \"Manufacturer Name\",\n                dataKey: \"modelCompany\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelCompany\") {\n                    return rowData.modelCompany\n                  }\n                }\n              },\n              {\n                coumnWidth: 230,\n                labelName: \"Battery Type\",\n                dataKey: \"batteryInformation\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"batteryInformation\") {\n                    return rowData.batteryInformation.type\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Charging Time\",\n                dataKey: \"batteryInformation\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"batteryInformation\") {\n                    return rowData.batteryInformation.chargingTime.min + \"/\" + rowData.batteryInformation.chargingTime.max\n                  }\n                }\n              },\n              {\n                coumnWidth: 300,\n                labelName: \"Optimal Voltage Range\",\n                dataKey: \"modelCompany\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelCompany\") {\n                    return rowData.batteryInformation.optimalVoltageRange.min + \"/\" + rowData.batteryInformation.optimalVoltageRange.max\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Peak Power\",\n                dataKey: \"modelCompany\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelCompany\") {\n                    return rowData.batteryInformation.peakPower.min + \"/\" + rowData.batteryInformation.peakPower.max\n                  }\n                }\n              },\n              {\n                coumnWidth: 50,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [\n                      {\n                        title: \"Edit\",\n                        type: \"event\",\n                        handleClick: () => this.handleEditBatteryModel(rowData),\n                      },\n                    ];\n                    if (permissionList.includes(PermissionList.ADD_UPDATE_BATTERY_MODEL)) {\n                      return (\n                        <ActionDropdown\n                          menuItem={menuItem}\n                        />\n                      )\n                    }\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page} // because of 0 based indexing\n            message={\"Battery models not found\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BatteryModel);"]},"metadata":{},"sourceType":"module"}