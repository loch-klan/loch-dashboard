{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/vehicles/Vehicles.js\";\nimport React, { Component } from \"react\"; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport { ComponentHeader } from \"../common\";\nimport CustomTable from \"../../utils/commonComponent/CustomTable\";\nimport ActionDropdown from \"../common/_utils/ActionDropdown\";\nimport BulkUploadModal from \"./BulkUploadModal\";\nimport { getAllVehiclesApi } from \"./Api\";\nimport { getAssignedPermission, replaceHistory } from \"../../utils/ReusableFunctions\";\nimport { PermissionList, VehicleStatus } from \"../../utils/Constant\";\nimport Switch from \"../common/_utils/Switch\";\nimport UpdateStatusModal from \"./UpdateStatusModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Vehicles extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleFilter = () => {\n      this.setState({\n        showFilter: !this.state.showFilter\n      });\n    };\n\n    this.clearSearch = () => {\n      this.onChangeMethod({\n        search: \"\"\n      });\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchText: value.search,\n        page: 1\n      }, () => {\n        replaceHistory(this.props.history, 1, value.search);\n      });\n    };\n\n    this.handleEditVehicle = rowData => {\n      this.props.history.push({\n        pathname: `/edit-vehicle/`,\n        state: {\n          editData: rowData\n        }\n      });\n    };\n\n    this.handleAddVehicle = () => {\n      this.props.history.push(\"/add-vehicle\");\n    };\n\n    this.handleUpdateStatus = function () {\n      let rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      _this.setState({\n        showUpdateStatus: !_this.state.showUpdateStatus,\n        vehicleInfo: rowData\n      });\n    };\n\n    this.handleUpdate = () => {\n      this.setState({\n        showUpdateStatus: !this.state.showUpdateStatus,\n        vehicleInfo: \"\"\n      });\n      getAllVehiclesApi(this);\n    };\n\n    this.handleViewLocation = rowData => {\n      this.props.history.push({\n        pathname: `/view-vehicle-location/${rowData.id}`\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const searchText = params.get(\"search\");\n    this.state = {\n      vehiclesList: [],\n      page: page ? parseInt(page, 10) : 1,\n      totalPages: 1,\n      searchText,\n      searchKey: \"SEARCH_BY_TEXT\",\n      showFilter: false,\n      showBulkUploadModal: false,\n      showUpdateStatus: false\n    };\n  }\n\n  componentDidMount() {\n    getAllVehiclesApi(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1;\n    const prevSearchText = prevParams.get(\"search\");\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get(\"p\"), 10) || 1;\n    const searchText = params.get(\"search\");\n\n    if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({\n        page,\n        searchText\n      }, () => {\n        getAllVehiclesApi(this);\n      });\n    }\n  }\n\n  render() {\n    const {\n      vehiclesList\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.showUpdateStatus && /*#__PURE__*/_jsxDEV(UpdateStatusModal, {\n        show: this.state.showUpdateStatus,\n        handleClose: () => this.handleUpdateStatus(),\n        handleUpdate: () => this.handleUpdate(),\n        vehicleInfo: this.state.vehicleInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Vehicles\",\n        title: \"Vehicles\",\n        isFilter: false,\n        isPrimaryBtn2: this.handleAddVehicle,\n        primaryBtnText2: permissionList.includes(PermissionList.ADD_UPDATE_VEHICLE_INVENTORY) ? \"+ Add Vehicle\" : null,\n        isSearch: true,\n        placeholder: \"Search Vehicle\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: this.clearSearch,\n        searchValue: {\n          search: this.state.searchText\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: vehiclesList,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Model Name\",\n            dataKey: \"modelInfo\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelInfo\") {\n                return rowData.modelInfo ? rowData.modelInfo.modelName : \"-\";\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Chassis Number\",\n            dataKey: \"chassisNo\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"chassisNo\") {\n                return rowData.chassisNo;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Registration number\",\n            dataKey: \"registrationNo\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"registrationNo\") {\n                return rowData.registrationNo || \"NA\";\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Battery Status\",\n            dataKey: \"batteryStatus\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"batteryStatus\" && rowData.attachedBatteries.length > 0) {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"status\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `circle ${rowData.attachedBatteries[0].active ? \"active\" : \"inactive\"}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 25\n                  }, this), \" \", rowData.attachedBatteries[0].active ? \"Attached\" : \"Inactive\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Iot Status\",\n            dataKey: \"iotStatus\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"iotStatus\") {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"status\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `circle ${rowData.attachedTelematics.active ? \"active\" : \"inactive\"}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 25\n                  }, this), \" \", rowData.attachedTelematics.active ? \"Attached\" : \"Inactive\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 200,\n            labelName: \"Vehicle Status\",\n            dataKey: \"vehicleStatus\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"vehicleStatus\") {\n                return VehicleStatus.getText(rowData.status);\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [];\n                menuItem.push({\n                  title: \"Edit\",\n                  type: \"event\",\n                  handleClick: () => this.handleEditVehicle(rowData)\n                });\n                menuItem.push({\n                  title: \"Update Status\",\n                  type: \"event\",\n                  handleClick: () => this.handleUpdateStatus(rowData)\n                });\n                menuItem.push({\n                  title: \"View Location\",\n                  type: \"event\",\n                  handleClick: () => this.handleViewLocation(rowData)\n                });\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_VEHICLE_INVENTORY)) {\n                  return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                    menuItem: menuItem\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 30\n                  }, this);\n                }\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: this.state.totalPages,\n          currentPage: this.state.page - 1 // because of 0 based indexing\n          ,\n          message: \"Vehicle list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  vehiclesState: state.VehiclesState\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nVehicles.propTypes = {// getPosts: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Vehicles);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/vehicles/Vehicles.js"],"names":["React","Component","connect","ComponentHeader","CustomTable","ActionDropdown","BulkUploadModal","getAllVehiclesApi","getAssignedPermission","replaceHistory","PermissionList","VehicleStatus","Switch","UpdateStatusModal","Vehicles","constructor","props","handleFilter","setState","showFilter","state","clearSearch","onChangeMethod","search","value","searchText","page","history","handleEditVehicle","rowData","push","pathname","editData","handleAddVehicle","handleUpdateStatus","showUpdateStatus","vehicleInfo","handleUpdate","handleViewLocation","id","location","params","URLSearchParams","get","vehiclesList","parseInt","totalPages","searchKey","showBulkUploadModal","componentDidMount","componentDidUpdate","prevProps","prevState","prevParams","prevPage","prevSearchText","render","permissionList","includes","ADD_UPDATE_VEHICLE_INVENTORY","coumnWidth","labelName","dataKey","className","isCell","cell","modelInfo","modelName","chassisNo","registrationNo","attachedBatteries","length","active","attachedTelematics","getText","status","menuItem","title","type","handleClick","mapStateToProps","vehiclesState","VehiclesState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\"\nimport { ComponentHeader } from \"../common\"\nimport CustomTable from \"../../utils/commonComponent/CustomTable\"\nimport ActionDropdown from \"../common/_utils/ActionDropdown\"\nimport BulkUploadModal from \"./BulkUploadModal\"\nimport { getAllVehiclesApi } from \"./Api\"\nimport {\n  getAssignedPermission,\n  replaceHistory\n} from \"../../utils/ReusableFunctions\"\nimport { PermissionList, VehicleStatus } from \"../../utils/Constant\"\nimport Switch from \"../common/_utils/Switch\"\nimport UpdateStatusModal from \"./UpdateStatusModal\"\n\nclass Vehicles extends Component {\n  constructor(props) {\n    super(props)\n    const search = props.location.search\n    const params = new URLSearchParams(search)\n    const page = params.get(\"p\")\n    const searchText = params.get(\"search\")\n    this.state = {\n      vehiclesList: [],\n      page: page ? parseInt(page, 10) : 1,\n      totalPages: 1,\n      searchText,\n      searchKey: \"SEARCH_BY_TEXT\",\n      showFilter: false,\n      showBulkUploadModal: false,\n      showUpdateStatus: false\n    }\n  }\n\n  componentDidMount() {\n    getAllVehiclesApi(this)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search)\n    const prevPage = parseInt(prevParams.get(\"p\"), 10) || 1\n    const prevSearchText = prevParams.get(\"search\")\n\n    const params = new URLSearchParams(this.props.location.search)\n    const page = parseInt(params.get(\"p\"), 10) || 1\n    const searchText = params.get(\"search\")\n\n    if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({ page, searchText }, () => {\n        getAllVehiclesApi(this)\n      })\n    }\n  }\n\n  handleFilter = () => {\n    this.setState({\n      showFilter: !this.state.showFilter\n    })\n  }\n\n  clearSearch = () => {\n    this.onChangeMethod({ search: \"\" })\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({ searchText: value.search, page: 1 }, () => {\n      replaceHistory(this.props.history, 1, value.search)\n    })\n  }\n\n  handleEditVehicle = (rowData) => {\n    this.props.history.push({\n      pathname: `/edit-vehicle/`,\n      state: { editData: rowData }\n    })\n  }\n\n  handleAddVehicle = () => {\n    this.props.history.push(\"/add-vehicle\")\n  }\n\n  handleUpdateStatus = (rowData = \"\") => {\n    this.setState({\n      showUpdateStatus: !this.state.showUpdateStatus,\n      vehicleInfo: rowData\n    })\n  }\n\n  handleUpdate = () => {\n    this.setState({\n      showUpdateStatus: !this.state.showUpdateStatus,\n      vehicleInfo: \"\"\n    })\n    getAllVehiclesApi(this)\n  }\n\n  handleViewLocation = (rowData) => {\n    this.props.history.push({\n      pathname: `/view-vehicle-location/${rowData.id}`\n    })\n  }\n\n  render() {\n    const { vehiclesList } = this.state\n    const permissionList = getAssignedPermission()\n    return (\n      <>\n        {this.state.showUpdateStatus && (\n          <UpdateStatusModal\n            show={this.state.showUpdateStatus}\n            handleClose={() => this.handleUpdateStatus()}\n            handleUpdate={() => this.handleUpdate()}\n            vehicleInfo={this.state.vehicleInfo}\n          />\n        )}\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Vehicles\"}\n          title={\"Vehicles\"}\n          isFilter={false}\n          isPrimaryBtn2={this.handleAddVehicle}\n          primaryBtnText2={\n            permissionList.includes(PermissionList.ADD_UPDATE_VEHICLE_INVENTORY)\n              ? \"+ Add Vehicle\"\n              : null\n          }\n          isSearch={true}\n          placeholder={\"Search Vehicle\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={this.clearSearch}\n          searchValue={{ search: this.state.searchText }}\n        />\n        <div className=\"custom-table-wrapper\">\n          <CustomTable\n            tableData={vehiclesList}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"Model Name\",\n                dataKey: \"modelInfo\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelInfo\") {\n                    return rowData.modelInfo ? rowData.modelInfo.modelName : \"-\"\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Chassis Number\",\n                dataKey: \"chassisNo\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"chassisNo\") {\n                    return rowData.chassisNo\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Registration number\",\n                dataKey: \"registrationNo\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"registrationNo\") {\n                    return rowData.registrationNo || \"NA\"\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Battery Status\",\n                dataKey: \"batteryStatus\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (\n                    dataKey === \"batteryStatus\" &&\n                    rowData.attachedBatteries.length > 0\n                  ) {\n                    return (\n                      <p className=\"status\">\n                        {\" \"}\n                        <span\n                          className={`circle ${\n                            rowData.attachedBatteries[0].active\n                              ? \"active\"\n                              : \"inactive\"\n                          }`}\n                        ></span>{\" \"}\n                        {rowData.attachedBatteries[0].active\n                          ? \"Attached\"\n                          : \"Inactive\"}\n                      </p>\n                    )\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Iot Status\",\n                dataKey: \"iotStatus\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"iotStatus\") {\n                    return (\n                      <p className=\"status\">\n                        {\" \"}\n                        <span\n                          className={`circle ${\n                            rowData.attachedTelematics.active\n                              ? \"active\"\n                              : \"inactive\"\n                          }`}\n                        ></span>{\" \"}\n                        {rowData.attachedTelematics.active\n                          ? \"Attached\"\n                          : \"Inactive\"}\n                      </p>\n                    )\n                  }\n                }\n              },\n              {\n                coumnWidth: 200,\n                labelName: \"Vehicle Status\",\n                dataKey: \"vehicleStatus\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"vehicleStatus\") {\n                    return VehicleStatus.getText(rowData.status)\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = []\n                    menuItem.push({\n                      title: \"Edit\",\n                      type: \"event\",\n                      handleClick: () => this.handleEditVehicle(rowData)\n                    })\n                    menuItem.push({\n                      title: \"Update Status\",\n                      type: \"event\",\n                      handleClick: () => this.handleUpdateStatus(rowData)\n                    })\n                    menuItem.push({\n                      title: \"View Location\",\n                      type: \"event\",\n                      handleClick: () => this.handleViewLocation(rowData)\n                    })\n                    if (\n                      permissionList.includes(\n                        PermissionList.ADD_UPDATE_VEHICLE_INVENTORY\n                      )\n                    ) {\n                      return <ActionDropdown menuItem={menuItem} />\n                    }\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={this.state.totalPages}\n            currentPage={this.state.page - 1} // because of 0 based indexing\n            message={\"Vehicle list is empty\"}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  vehiclesState: state.VehiclesState\n})\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\nVehicles.propTypes = {\n  // getPosts: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Vehicles)\n"]},"metadata":{},"sourceType":"module"}