{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/userManagement/AddEditUser.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomRadio, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { getAllRolesApi, addUserApi, editUserApi } from './Api';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { AccountType } from \"../../utils/Constant\";\nimport { getAllFranchiseLocationApi } from '../franchise/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditUser extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      const data = new URLSearchParams();\n      data.append(\"first_name\", this.state.firstName);\n      data.append(\"last_name\", this.state.lastName);\n      data.append(\"role_ids\", JSON.stringify(this.state.roleList));\n      data.append(\"franchise_location_scope_all\", this.state.isAllLocation);\n      data.append(\"city_scope_all\", true);\n      data.append(\"franchise_location_scope\", JSON.stringify(this.state.franchiseLocation));\n\n      if (this.state.userId) {\n        data.append(\"user_id\", this.state.userId);\n        editUserApi(data, () => this.props.history.goBack());\n      } else {\n        data.append(\"email\", this.state.email);\n        addUserApi(data, () => this.props.history.goBack());\n      }\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    const editData = props.location.state ? props.location.state.data : null; //console.log(editData, \"as\");\n\n    const userDetails = JSON.parse(localStorage.getItem('userDetails'));\n    this.state = {\n      userId: editData ? editData.id : \"\",\n      firstName: editData ? editData.first_name : \"\",\n      lastName: editData ? editData.last_name : \"\",\n      email: editData ? editData.email : \"\",\n      rolesOption: [],\n      roleList: editData ? editData.user_account_roles[0].role_ids : [],\n      isAllLocation: editData ? editData.user_account_roles[0].franchise_location_scope == \"1\" ? \"true\" : \"false\" : \"true\",\n      isAllCity: \"true\",\n      franchiseLocationOption: [],\n      franchiseLocation: editData ? editData.user_account_roles[0].franchise_location_scope != \"1\" ? editData.user_account_roles[0].franchise_location_scope : [] : [],\n      userDetails\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllRolesApi(this);\n\n    if (this.state.userDetails.user_account_type !== AccountType.COMPANY) {\n      this.props.getAllFranchiseLocationApi(this, 0, true);\n    } else {//console.log(getUserAccountType() === AccountType.FRANCHISE)\n    }\n  } //   componentDidUpdate( prevProps, prevState ){\n  // console.log(\"Hey\", prevState, this.state)\n  //   }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.userId ? \"Edit User\" : \"Add User\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.handleSave,\n            ref: el => this.form = el,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"firstName\"),\n                  label: \"First Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"First name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter First Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"lastName\"),\n                  label: \"Last Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Last Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Last Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"email\"),\n                  label: \"Email\",\n                  disabled: this.state.userId ? true : false,\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Email cannot be empty\"\n                  }, {\n                    validate: FormValidator.isEmail,\n                    message: \"Please enter a valid email\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Email\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"roleList\"),\n                  label: \"Role\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Role cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Roles\",\n                      options: this.state.rolesOption,\n                      multiple: true,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.roleList);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"isAllLocation\"),\n                  label: \"Do you want to give access to all locations\",\n                  required: true,\n                  disabled: getUserAccountType() === AccountType.FRANCHISE ? false : true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Field cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomRadio,\n                    settings: {\n                      radioId: \"allLocations\",\n                      radioName: \"allLocations\",\n                      options: [{\n                        key: \"true\",\n                        label: \"Yes\"\n                      }, {\n                        key: \"false\",\n                        label: \"No\"\n                      }],\n                      isInline: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this), getUserAccountType() === AccountType.FRANCHISE && this.state.isAllLocation === \"false\" && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"franchiseLocation\"),\n                  label: \"Franchise Location List\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Franchise location list cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Franchise Location\",\n                      options: this.state.franchiseLocationOption,\n                      multiple: true,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.franchiseLocation);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 19\n              }, this), getUserAccountType() === AccountType.COMPANY && /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"isAllCity\"),\n                  label: \"Do you want to give access to all cities\",\n                  required: true,\n                  disabled: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Field cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomRadio,\n                    settings: {\n                      radioId: \"allCity\",\n                      radioName: \"allCity\",\n                      options: [{\n                        key: \"true\",\n                        label: \"Yes\"\n                      }, {\n                        key: \"false\",\n                        label: \"No\"\n                      }],\n                      isInline: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\n\nconst mapDispatchToProps = {\n  getAllRolesApi,\n  getAllFranchiseLocationApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditUser);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/userManagement/AddEditUser.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomRadio","CustomTextControl","Form","FormElement","FormValidator","SelectControl","ComponentHeader","ReactDOM","getAllRolesApi","addUserApi","editUserApi","getUserAccountType","AccountType","getAllFranchiseLocationApi","AddEditUser","constructor","props","handleSave","data","URLSearchParams","append","state","firstName","lastName","JSON","stringify","roleList","isAllLocation","franchiseLocation","userId","history","goBack","email","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","editData","location","userDetails","parse","localStorage","getItem","id","first_name","last_name","rolesOption","user_account_roles","role_ids","franchise_location_scope","isAllCity","franchiseLocationOption","componentDidMount","user_account_type","COMPANY","render","el","linkState","validate","isRequired","message","type","settings","placeholder","isEmail","options","multiple","searchable","onChangeCallback","onBlur","FRANCHISE","radioId","radioName","key","label","isInline","mapStateToProps","userManagementState","UserManagementState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomRadio, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { getAllRolesApi, addUserApi, editUserApi } from './Api';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { AccountType } from \"../../utils/Constant\";\nimport { getAllFranchiseLocationApi } from '../franchise/Api';\n\nclass AddEditUser extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const editData = props.location.state ? props.location.state.data : null;\n    //console.log(editData, \"as\");\n    const userDetails = JSON.parse(localStorage.getItem('userDetails'));\n    this.state = {\n      userId: editData ? editData.id : \"\",\n      firstName: editData ? editData.first_name : \"\",\n      lastName: editData ? editData.last_name : \"\",\n      email: editData ? editData.email : \"\",\n      rolesOption: [],\n      roleList: editData ? editData.user_account_roles[0].role_ids : [],\n      isAllLocation: editData ? editData.user_account_roles[0].franchise_location_scope == \"1\" ? \"true\" : \"false\" : \"true\",\n      isAllCity: \"true\",\n      franchiseLocationOption: [],\n      franchiseLocation: editData ? editData.user_account_roles[0].franchise_location_scope != \"1\" ? editData.user_account_roles[0].franchise_location_scope : [] : [],\n      userDetails\n    }\n  }\n  componentDidMount() {\n    this.props.getAllRolesApi(this);\n    if (this.state.userDetails.user_account_type !== AccountType.COMPANY) {\n      this.props.getAllFranchiseLocationApi(this, 0, true);\n    } else {\n      //console.log(getUserAccountType() === AccountType.FRANCHISE)\n    }\n  }\n\n  //   componentDidUpdate( prevProps, prevState ){\n  // console.log(\"Hey\", prevState, this.state)\n  //   }\n\n  handleSave = () => {\n    const data = new URLSearchParams();\n    data.append(\"first_name\", this.state.firstName);\n    data.append(\"last_name\", this.state.lastName);\n    data.append(\"role_ids\", JSON.stringify(this.state.roleList));\n    data.append(\"franchise_location_scope_all\", this.state.isAllLocation);\n    data.append(\"city_scope_all\", true);\n    data.append(\"franchise_location_scope\", JSON.stringify(this.state.franchiseLocation))\n    if (this.state.userId) {\n      data.append(\"user_id\", this.state.userId);\n      editUserApi(data, () => this.props.history.goBack());\n    } else {\n      data.append(\"email\", this.state.email);\n      addUserApi(data, () => this.props.history.goBack());\n    }\n  }\n  // do you want to give access to all location - yes / no\n  //  if no show franchise location dropdown\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.userId ? \"Edit User\" : \"Add User\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save User\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.handleSave} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"firstName\")}\n                    label=\"First Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"First name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter First Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"lastName\")}\n                    label=\"Last Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Last Name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Last Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"email\")}\n                    label=\"Email\"\n                    disabled={this.state.userId ? true : false}\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Email cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isEmail,\n                        message: \"Please enter a valid email\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Email\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"roleList\")}\n                    label=\"Role\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Role cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Roles\",\n                        options: this.state.rolesOption,\n                        multiple: true,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.roleList);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"isAllLocation\")}\n                    label=\"Do you want to give access to all locations\"\n                    required\n                    disabled={getUserAccountType() === AccountType.FRANCHISE ? false : true}\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Field cannot be empty\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomRadio,\n                      settings: {\n                        radioId: \"allLocations\",\n                        radioName: \"allLocations\",\n                        options: [\n                          {\n                            key: \"true\",\n                            label: \"Yes\"\n                          },\n                          {\n                            key: \"false\",\n                            label: \"No\"\n                          }\n                        ],\n                        isInline: true,\n                      }\n                    }}\n                  />\n                </Col>\n                {\n                  (getUserAccountType() === AccountType.FRANCHISE && this.state.isAllLocation === \"false\") &&\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"franchiseLocation\")}\n                      label=\"Franchise Location List\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Franchise location list cannot be empty\"\n                        },\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Franchise Location\",\n                          options: this.state.franchiseLocationOption,\n                          multiple: true,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.franchiseLocation);\n                          }\n                        }\n                      }}\n                    />\n                  </Col>\n                }\n                {\n                  getUserAccountType() === AccountType.COMPANY &&\n                  <Col md={4}>\n                    <FormElement\n                      valueLink={this.linkState(this, \"isAllCity\")}\n                      label=\"Do you want to give access to all cities\"\n                      required\n                      disabled\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Field cannot be empty\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomRadio,\n                        settings: {\n                          radioId: \"allCity\",\n                          radioName: \"allCity\",\n                          options: [\n                            {\n                              key: \"true\",\n                              label: \"Yes\"\n                            },\n                            {\n                              key: \"false\",\n                              label: \"No\"\n                            }\n                          ],\n                          isInline: true,\n                        }\n                      }}\n                    />\n                  </Col>\n                }\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\nconst mapDispatchToProps = {\n  getAllRolesApi,\n  getAllFranchiseLocationApi\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditUser);"]},"metadata":{},"sourceType":"module"}