{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/common/ComponentHeader.js\";\nimport React from \"react\";\nimport { Button, Image, Breadcrumb, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { BaseReactComponent, FormSubmitButton, CustomTextControl, Form, FormElement, FormValidator, SelectControl, DatePickerControl } from \"../../utils/form\";\nimport backIcon from \"../../assets/images/icons/back-arrow-icon.svg\";\nimport settingsIcon from \"../../assets/images/icons/settings-icon.svg\";\nimport searchIcon from \"../../assets/images/icons/search-icon.svg\";\nimport closeIcon from \"../../assets/images/icons/close-icon.svg\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ComponentHeader extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChangeMethod = value => {\n      clearTimeout(this.delayTimer);\n      this.delayTimer = setTimeout(() => {\n        this.props.onChangeMethod(this.state);\n      }, 1000);\n    };\n\n    this.clearFilter = () => {\n      this.setState({\n        searchBy: \"\",\n        search: \"\"\n      });\n      this.props.reset();\n    };\n\n    this.clearSearch = () => {\n      this.setState({\n        search: \"\"\n      });\n      this.props.clearSearch();\n    };\n\n    this.handleFromDate = () => {\n      this.setState({\n        toDate: \"\"\n      });\n    };\n\n    this.filterSubmit = () => {\n      this.props.filterSearch(moment(this.state.fromDate).format(\"DD-MM-YYYY\"), moment(this.state.toDate).format(\"DD-MM-YYYY\"), this.state.franchiseId);\n    };\n\n    this.filterSubmit = () => {\n      this.props.filterSearch(moment(this.state.fromDate).format(\"DD-MM-YYYY\"), moment(this.state.toDate).format(\"DD-MM-YYYY\"), this.state.franchiseId);\n    };\n\n    this.state = {\n      searchBy: \"\",\n      search: props.searchValue && props.searchValue.search || \"\",\n      searchField: \"\",\n      franchiseOptionsList: [],\n      fromDate: \"\",\n      toDate: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"component-header-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"component-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: [this.props.backArrowBtn && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"back-arrow\",\n            children: this.props.history ? /*#__PURE__*/_jsxDEV(Image, {\n              className: \"back-arrow-btn\",\n              src: backIcon,\n              onClick: this.props.history.goBack\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Link, {\n              to: this.props.parentPageLink,\n              children: /*#__PURE__*/_jsxDEV(Image, {\n                className: \"back-arrow-btn\",\n                src: backIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"page-title\",\n              children: this.props.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), this.props.breadcrumb && /*#__PURE__*/_jsxDEV(Breadcrumb, {\n              children: [/*#__PURE__*/_jsxDEV(Breadcrumb.Item, {\n                href: \"/\",\n                children: \"CRM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this), this.props.parentPage && /*#__PURE__*/_jsxDEV(Breadcrumb.Item, {\n                href: `${this.props.parentPageLink}`,\n                children: this.props.parentPage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Breadcrumb.Item, {\n                active: true,\n                children: this.props.currentPage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), this.props.moduleName && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"red-hat-display-regular grey-999\",\n              children: this.props.moduleName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: [this.props.isFilter && /*#__PURE__*/_jsxDEV(Image, {\n            src: settingsIcon,\n            className: \"setting-icon\",\n            onClick: this.props.handleFilter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), this.props.isSearch && /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onChangeMethod,\n            children: [/*#__PURE__*/_jsxDEV(FormElement, {\n              valueLink: this.linkState(this, \"search\", this.onChangeMethod) // disabled={this.state.searchBy ? false : true}\n              // validations={[]}\n              ,\n              control: {\n                type: CustomTextControl,\n                settings: {\n                  placeholder: this.props.placeholder\n                }\n              },\n              classes: {\n                inputField: \"search-input\",\n                prefix: \"search-prefix\",\n                suffix: \"search-suffix\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), this.state.search ? /*#__PURE__*/_jsxDEV(Image, {\n              src: closeIcon,\n              onClick: this.clearSearch,\n              className: \"search-icon clear-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Image, {\n              src: searchIcon,\n              className: \"search-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), this.props.secondaryBtnText && /*#__PURE__*/_jsxDEV(Button, {\n            className: \"btn secondary-btn\",\n            onClick: this.props.isSecondaryBtn,\n            children: this.props.secondaryBtnText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), this.props.primaryBtnText2 && /*#__PURE__*/_jsxDEV(Button, {\n            className: \"btn black-btn\",\n            onClick: this.props.isPrimaryBtn2,\n            children: this.props.primaryBtnText2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), this.props.primaryBtnText && /*#__PURE__*/_jsxDEV(Button, {\n            className: \"btn black-btn\",\n            onClick: this.props.isPrimaryBtn,\n            children: this.props.primaryBtnText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), this.props.isSettleSearch && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settlement\",\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onValidSubmit: this.filterSubmit,\n              children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"fromDate\", this.handleFromDate) // label=\"Valid From\"\n                ,\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"From date cannot be empty\"\n                }],\n                control: {\n                  type: DatePickerControl,\n                  settings: {\n                    placeholder: \"From Date\" //minDate: new Date(),\n\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"toDate\") // label=\"Valid To\"\n                ,\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"To date cannot be empty\"\n                }],\n                control: {\n                  type: DatePickerControl,\n                  settings: {\n                    placeholder: \"To Date\",\n                    minDate: this.state.fromDate || new Date()\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this), !this.props.isFranchise && /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"franchiseId\"),\n                label: \"\",\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"Franchise cannot be empty\"\n                }],\n                control: {\n                  type: SelectControl,\n                  settings: {\n                    placeholder: \"Select Franchise\",\n                    options: this.props.franchiseOptionsList,\n                    multiple: false,\n                    searchable: true,\n                    onChangeCallback: onBlur => {\n                      onBlur(this.state.franchiseId); //console.log('Hello world!');\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n                customClass: `btn black-btn inactive-btn\"}`,\n                children: \"Settle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), this.props.isReport && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settlement\",\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onValidSubmit: () => this.props.onChangeMethod(this.state),\n              children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"fromDate\", this.handleFromDate) // label=\"Valid From\"\n                ,\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"From date cannot be empty\"\n                }],\n                control: {\n                  type: DatePickerControl,\n                  settings: {\n                    placeholder: \"From Date\" // minDate: new Date(),\n\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                valueLink: this.linkState(this, \"toDate\") // label=\"Valid To\"\n                ,\n                required: true,\n                validations: [{\n                  validate: FormValidator.isRequired,\n                  message: \"To date cannot be empty\"\n                }],\n                control: {\n                  type: DatePickerControl,\n                  settings: {\n                    placeholder: \"To Date\",\n                    minDate: this.state.fromDate || new Date()\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n                customClass: `btn black-btn inactive-btn\"}`,\n                children: \"Apply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ComponentHeader;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/common/ComponentHeader.js"],"names":["React","Button","Image","Breadcrumb","Row","Col","Link","BaseReactComponent","FormSubmitButton","CustomTextControl","Form","FormElement","FormValidator","SelectControl","DatePickerControl","moment","ComponentHeader","constructor","props","onChangeMethod","value","clearTimeout","delayTimer","setTimeout","state","clearFilter","setState","searchBy","search","reset","clearSearch","handleFromDate","toDate","filterSubmit","filterSearch","fromDate","format","franchiseId","searchValue","searchField","franchiseOptionsList","componentDidMount","render","backArrowBtn","history","backIcon","goBack","parentPageLink","title","breadcrumb","parentPage","currentPage","moduleName","isFilter","settingsIcon","handleFilter","isSearch","linkState","type","settings","placeholder","inputField","prefix","suffix","closeIcon","searchIcon","secondaryBtnText","isSecondaryBtn","primaryBtnText2","isPrimaryBtn2","primaryBtnText","isPrimaryBtn","isSettleSearch","validate","isRequired","message","minDate","Date","isFranchise","options","multiple","searchable","onChangeCallback","onBlur","isReport"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Image, Breadcrumb, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport {\n  BaseReactComponent,\n  FormSubmitButton,\n  CustomTextControl,\n  Form,\n  FormElement,\n  FormValidator,\n  SelectControl,\n  DatePickerControl,\n} from \"../../utils/form\";\nimport backIcon from \"../../assets/images/icons/back-arrow-icon.svg\";\nimport settingsIcon from \"../../assets/images/icons/settings-icon.svg\";\nimport searchIcon from \"../../assets/images/icons/search-icon.svg\";\nimport closeIcon from \"../../assets/images/icons/close-icon.svg\";\nimport moment from \"moment\";\n\nclass ComponentHeader extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchBy: \"\",\n      search: (props.searchValue && props.searchValue.search) || \"\",\n      searchField: \"\",\n      franchiseOptionsList: [],\n      fromDate: \"\",\n      toDate: \"\",\n    };\n  }\n  componentDidMount() { }\n\n  delayTimer;\n  onChangeMethod = (value) => {\n    clearTimeout(this.delayTimer);\n    this.delayTimer = setTimeout(() => {\n      this.props.onChangeMethod(this.state);\n    }, 1000);\n  };\n\n  clearFilter = () => {\n    this.setState({ searchBy: \"\", search: \"\" });\n    this.props.reset();\n  };\n\n  clearSearch = () => {\n    this.setState({ search: \"\" });\n    this.props.clearSearch();\n  };\n\n  handleFromDate = () => {\n    this.setState({ toDate: \"\" });\n  };\n\n  filterSubmit = () => {\n    this.props.filterSearch(\n      moment(this.state.fromDate).format(\"DD-MM-YYYY\"),\n      moment(this.state.toDate).format(\"DD-MM-YYYY\"),\n      this.state.franchiseId\n    );\n  };\n\n  filterSubmit = () => {\n    this.props.filterSearch(\n      moment(this.state.fromDate).format(\"DD-MM-YYYY\"),\n      moment(this.state.toDate).format(\"DD-MM-YYYY\"),\n      this.state.franchiseId\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"component-header-wrapper\">\n        <div className=\"component-header\">\n          <div className=\"left\">\n            {this.props.backArrowBtn && (\n              <div className=\"back-arrow\">\n                {this.props.history ? (\n                  <Image\n                    className=\"back-arrow-btn\"\n                    src={backIcon}\n                    onClick={this.props.history.goBack}\n                  />\n                ) : (\n                  <Link to={this.props.parentPageLink}>\n                    <Image className=\"back-arrow-btn\" src={backIcon} />\n                  </Link>\n                )}\n              </div>\n            )}\n            <div className=\"info\">\n              <h1 className=\"page-title\">{this.props.title}</h1>\n              {this.props.breadcrumb && (\n                <Breadcrumb>\n                  <Breadcrumb.Item href=\"/\">CRM</Breadcrumb.Item>\n                  {this.props.parentPage && (\n                    <Breadcrumb.Item href={`${this.props.parentPageLink}`}>\n                      {this.props.parentPage}\n                    </Breadcrumb.Item>\n                  )}\n                  <Breadcrumb.Item active>\n                    {this.props.currentPage}\n                  </Breadcrumb.Item>\n                </Breadcrumb>\n              )}\n              {this.props.moduleName && (\n                <p className=\"red-hat-display-regular grey-999\">\n                  {this.props.moduleName}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"right\">\n            {this.props.isFilter && (\n              <Image\n                src={settingsIcon}\n                className=\"setting-icon\"\n                onClick={this.props.handleFilter}\n              />\n            )}\n            {this.props.isSearch && (\n              <Form onValidSubmit={this.onChangeMethod}>\n                <FormElement\n                  valueLink={this.linkState(\n                    this,\n                    \"search\",\n                    this.onChangeMethod\n                  )}\n                  // disabled={this.state.searchBy ? false : true}\n                  // validations={[]}\n                  control={{\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: this.props.placeholder,\n                    },\n                  }}\n                  classes={{\n                    inputField: \"search-input\",\n                    prefix: \"search-prefix\",\n                    suffix: \"search-suffix\",\n                  }}\n                />\n                {this.state.search ? (\n                  <Image\n                    src={closeIcon}\n                    onClick={this.clearSearch}\n                    className=\"search-icon clear-icon\"\n                  />\n                ) : (\n                  <Image src={searchIcon} className=\"search-icon\" />\n                )}\n              </Form>\n            )}\n\n            {this.props.secondaryBtnText && (\n              <Button\n                className=\"btn secondary-btn\"\n                onClick={this.props.isSecondaryBtn}\n              >\n                {this.props.secondaryBtnText}\n              </Button>\n            )}\n\n            {this.props.primaryBtnText2 && (\n              <Button\n                className=\"btn black-btn\"\n                onClick={this.props.isPrimaryBtn2}\n              >\n                {this.props.primaryBtnText2}\n              </Button>\n            )}\n            {this.props.primaryBtnText && (\n              <Button\n                className=\"btn black-btn\"\n                onClick={this.props.isPrimaryBtn}\n              >\n                {this.props.primaryBtnText}\n              </Button>\n            )}\n\n            {this.props.isSettleSearch && (\n              <span className=\"settlement\">\n                <Form onValidSubmit={this.filterSubmit}>\n                  <FormElement\n                    valueLink={this.linkState(\n                      this,\n                      \"fromDate\",\n                      this.handleFromDate\n                    )}\n                    // label=\"Valid From\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"From date cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: DatePickerControl,\n                      settings: {\n                        placeholder: \"From Date\",\n                        //minDate: new Date(),\n                      },\n                    }}\n                  />\n                  <FormElement\n                    valueLink={this.linkState(this, \"toDate\")}\n                    // label=\"Valid To\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"To date cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: DatePickerControl,\n                      settings: {\n                        placeholder: \"To Date\",\n                        minDate: this.state.fromDate || new Date(),\n                      },\n                    }}\n                  />\n                  {\n                    !this.props.isFranchise &&\n                    <FormElement\n                      valueLink={this.linkState(this, \"franchiseId\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Franchise cannot be empty\",\n                        },\n                      ]}\n                      control={{\n                        type: SelectControl,\n                        settings: {\n                          placeholder: \"Select Franchise\",\n                          options: this.props.franchiseOptionsList,\n                          multiple: false,\n                          searchable: true,\n                          onChangeCallback: (onBlur) => {\n                            onBlur(this.state.franchiseId);\n                            //console.log('Hello world!');\n                          },\n                        },\n                      }}\n                    />\n                  }\n\n                  <FormSubmitButton\n                    customClass={`btn black-btn inactive-btn\"}`}\n                  >\n                    Settle\n                  </FormSubmitButton>\n                </Form>\n              </span>\n            )}\n            {this.props.isReport && (\n              <span className=\"settlement\">\n                <Form\n                  onValidSubmit={() => this.props.onChangeMethod(this.state)}\n                >\n                  <FormElement\n                    valueLink={this.linkState(\n                      this,\n                      \"fromDate\",\n                      this.handleFromDate\n                    )}\n                    // label=\"Valid From\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"From date cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: DatePickerControl,\n                      settings: {\n                        placeholder: \"From Date\",\n                        // minDate: new Date(),\n                      },\n                    }}\n                  />\n                  <FormElement\n                    valueLink={this.linkState(this, \"toDate\")}\n                    // label=\"Valid To\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"To date cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: DatePickerControl,\n                      settings: {\n                        placeholder: \"To Date\",\n                        minDate: this.state.fromDate || new Date(),\n                      },\n                    }}\n                  />\n                  <FormSubmitButton\n                    customClass={`btn black-btn inactive-btn\"}`}\n                  >\n                    Apply\n                  </FormSubmitButton>\n                </Form>\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ComponentHeader;\n"]},"metadata":{},"sourceType":"module"}