{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/franchise/Franchise.js\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { AccountType, PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllFranchiseApi } from './Api';\nimport Switch from '../common/_utils/Switch';\nimport { getUserAccountType } from '../../utils/ManageToken';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Franchise extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      this.props.getAllFranchiseApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: []\n      }, () => {\n        if (currentPage === START_PAGE) {\n          this.props.getAllFranchiseApi(this, START_PAGE);\n        }\n      });\n      replaceHistory(this.props.history, START_PAGE + 1);\n    };\n\n    this.handleAddEditFranchise = function () {\n      let franchiseId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      if (franchiseId) {\n        _this.props.history.push({\n          pathname: `/franchise/edit-franchise/${franchiseId}`,\n          state: {\n            data: franchiseId\n          }\n        });\n      } else {\n        _this.props.history.push(\"/franchise/add-franchise\");\n      }\n    };\n\n    this.handleViewFranchise = function () {\n      let franchiseId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      _this.props.history.push(`/franchise/view-franchise/${franchiseId}`);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      data: [],\n      conditions: [],\n      page: page ? parseInt(page, 10) : START_PAGE + 1\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllFranchiseApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllFranchiseApi(this);\n      } else {\n        this.props.getAllFranchiseApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      data,\n      page,\n      totalPage\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Franchise\",\n        title: \"Franchise\",\n        isFilter: false,\n        isPrimaryBtn: () => this.handleAddEditFranchise(),\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_FRANCHISE) ? \"+ Add Franchise\" : \"\",\n        isSearch: true,\n        placeholder: \"Search Franchise\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: data,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Account Name\",\n            dataKey: \"name\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"name\") {\n                return rowData.name;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Account Email\",\n            dataKey: \"email\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"email\") {\n                return rowData.billing_email;\n              }\n            }\n          },\n          /* {\n            coumnWidth: 250,\n            labelName: \"Contact\",\n            dataKey: \"mobile\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"mobile\") {\n                return rowData.mobile\n              }\n            }\n          }, */\n          {\n            coumnWidth: 250,\n            labelName: \"Contact\",\n            dataKey: \"email\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"email\") {\n                return rowData.billing_contact;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Operation Status\",\n            dataKey: \"is_operational\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"is_operational\") {\n                return /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: rowData.active,\n                  handleClick: () => this.handleToggle(rowData),\n                  handleBtn: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 45\n                }, this);\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [];\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_FRANCHISE)) {\n                  menuItem.push({\n                    title: \"Edit\",\n                    type: \"event\",\n                    handleClick: () => this.handleAddEditFranchise(rowData.id)\n                  });\n                }\n\n                if (permissionList.includes(PermissionList.VIEW_FRANCHISE)) {\n                  menuItem.push({\n                    title: \"View\",\n                    type: \"event\",\n                    handleClick: () => this.handleViewFranchise(rowData.id)\n                  });\n                }\n\n                return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                  menuItem: menuItem\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 45\n                }, this);\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Franchise list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  franchiseState: state.FranchiseState\n});\n\nconst mapDispatchToProps = {\n  getAllFranchiseApi\n};\nFranchise.propTypes = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Franchise);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/franchise/Franchise.js"],"names":["React","Component","connect","CustomTable","AccountType","PermissionList","START_PAGE","getAssignedPermission","replaceHistory","ComponentHeader","ActionDropdown","getAllFranchiseApi","Switch","getUserAccountType","Franchise","constructor","props","onChangeMethod","value","setState","searchValue","conditions","key","search","history","clearSearch","currentPage","handleAddEditFranchise","franchiseId","push","pathname","state","data","handleViewFranchise","location","params","URLSearchParams","page","get","parseInt","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","permissionList","includes","ADD_UPDATE_FRANCHISE","coumnWidth","labelName","dataKey","className","isCell","cell","rowData","name","billing_email","billing_contact","active","handleToggle","menuItem","title","type","handleClick","id","VIEW_FRANCHISE","mapStateToProps","franchiseState","FranchiseState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { AccountType, PermissionList, START_PAGE } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllFranchiseApi } from './Api';\nimport Switch from '../common/_utils/Switch';\nimport { getUserAccountType } from '../../utils/ManageToken';\n\nclass Franchise extends Component {\n    constructor(props) {\n        super(props);\n        const search = props.location.search;\n        const params = new URLSearchParams(search);\n        const page = params.get(\"p\");\n        this.state = {\n            data: [],\n            conditions: [],\n            page: page ? parseInt(page, 10) : START_PAGE + 1,\n        }\n    }\n\n    componentDidMount() {\n        this.props.getAllFranchiseApi(this);\n        this.props.history.replace({\n            search: `?p=${this.state.page}`\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const prevParams = new URLSearchParams(prevProps.location.search);\n        const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n        const params = new URLSearchParams(this.props.location.search);\n        const page = parseInt(params.get('p'), 10) || 1;\n        const search = params.get('search') || \"\";\n\n        if (prevPage !== page) {\n            // this.setState({ page })\n            if (search) {\n                this.props.getAllFranchiseApi(this);\n            } else {\n                this.props.getAllFranchiseApi(this, page - 1);\n            }\n        }\n    }\n\n    onChangeMethod = (value) => {\n        this.setState({\n            searchValue: value,\n            conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n        });\n        replaceHistory(this.props.history, START_PAGE, value.search)\n        this.props.getAllFranchiseApi(this, START_PAGE);\n    }\n\n    clearSearch = (currentPage) => {\n        this.setState({ searchValue: \"\", conditions: [] }, () => {\n            if (currentPage === START_PAGE) {\n                this.props.getAllFranchiseApi(this, START_PAGE);\n            }\n        });\n\n        replaceHistory(this.props.history, START_PAGE + 1)\n    }\n\n    handleAddEditFranchise = (franchiseId = \"\") => {\n        if (franchiseId) {\n            this.props.history.push({\n                pathname: `/franchise/edit-franchise/${franchiseId}`,\n                state: { data: franchiseId }\n            });\n        } else {\n            this.props.history.push(\"/franchise/add-franchise\");\n        }\n    }\n\n    handleViewFranchise = (franchiseId = \"\") => {\n        this.props.history.push(`/franchise/view-franchise/${franchiseId}`);\n    }\n\n    render() {\n        const { data, page, totalPage, } = this.state;\n        const permissionList = getAssignedPermission();\n        return (\n            <>\n                <ComponentHeader\n                    backArrowBtn={false}\n                    breadcrumb={true}\n                    currentPage={\"Franchise\"}\n                    title={\"Franchise\"}\n                    isFilter={false}\n                    isPrimaryBtn={() => this.handleAddEditFranchise()}\n                    primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_FRANCHISE) ? \"+ Add Franchise\" : \"\"}\n                    isSearch={true}\n                    placeholder={\"Search Franchise\"}\n                    onChangeMethod={this.onChangeMethod}\n                    clearSearch={() => this.clearSearch(page || START_PAGE)}\n                />\n                <div className='custom-table-wrapper'>\n                    <CustomTable\n                        tableData={data}\n                        columnList={[\n                            {\n                                coumnWidth: 250,\n                                labelName: \"Account Name\",\n                                dataKey: \"name\",\n                                className: \"red-hat-display-bold\",\n                                isCell: true,\n                                cell: (rowData, dataKey) => {\n                                    if (dataKey === \"name\") {\n                                        return rowData.name\n                                    }\n                                }\n                            },\n                            {\n                                coumnWidth: 250,\n                                labelName: \"Account Email\",\n                                dataKey: \"email\",\n                                className: \"red-hat-display-bold\",\n                                isCell: true,\n                                cell: (rowData, dataKey) => {\n                                    if (dataKey === \"email\") {\n                                        return rowData.billing_email\n                                    }\n                                }\n                            },\n                            /* {\n                              coumnWidth: 250,\n                              labelName: \"Contact\",\n                              dataKey: \"mobile\",\n                              className: \"red-hat-display-bold\",\n                              isCell: true,\n                              cell: (rowData, dataKey) => {\n                                if (dataKey === \"mobile\") {\n                                  return rowData.mobile\n                                }\n                              }\n                            }, */\n                            {\n                                coumnWidth: 250,\n                                labelName: \"Contact\",\n                                dataKey: \"email\",\n                                className: \"\",\n                                isCell: true,\n                                cell: (rowData, dataKey) => {\n                                    if (dataKey === \"email\") {\n                                        return rowData.billing_contact\n                                    }\n                                }\n                            },\n                            {\n                                coumnWidth: 350,\n                                labelName: \"Operation Status\",\n                                dataKey: \"is_operational\",\n                                className: \"red-hat-display-bold\",\n                                isCell: true,\n                                cell: (rowData, dataKey) => {\n                                    if (dataKey === \"is_operational\") {\n                                        return (\n                                            <Switch\n                                                checked={rowData.active}\n                                                handleClick={() => this.handleToggle(rowData)}\n                                                handleBtn={false}\n                                            />\n                                        )\n                                    }\n                                }\n                            },\n                            {\n                                coumnWidth: 50,\n                                labelName: \"\",\n                                dataKey: \"options\",\n                                className: \"options-column\",\n                                isCell: true,\n                                cell: (rowData, dataKey) => {\n                                    if (dataKey === \"options\") {\n                                        const menuItem = [];\n                                        if(permissionList.includes(PermissionList.ADD_UPDATE_FRANCHISE)){\n                                          menuItem.push({\n                                            title: \"Edit\",\n                                            type: \"event\",\n                                            handleClick: () => this.handleAddEditFranchise(rowData.id),\n                                        })\n                                        }\n                                        if(permissionList.includes(PermissionList.VIEW_FRANCHISE)){\n                                            menuItem.push({\n                                                title: \"View\",\n                                                type: \"event\",\n                                                handleClick: () => this.handleViewFranchise(rowData.id),\n                                            })\n                                          }\n                                        return (\n                                            <ActionDropdown\n                                                menuItem={menuItem}\n                                            />\n                                        )\n                                    }\n                                }\n                            }\n                        ]}\n                        // For Pagination\n                        history={this.props.history}\n                        location={this.props.location}\n                        totalPages={totalPage}\n                        currentPage={page}\n                        message={\"Franchise list is empty\"}\n                    />\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    franchiseState: state.FranchiseState\n});\nconst mapDispatchToProps = {\n    getAllFranchiseApi\n}\nFranchise.propTypes = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Franchise);"]},"metadata":{},"sourceType":"module"}