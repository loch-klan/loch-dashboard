{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/userManagement/AddEditOem.js\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { AccountType, LocationType } from '../../utils/Constant';\nimport { getAllLocationApi } from '../common/Api';\nimport { addUpdateAccountApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\n\nclass AddEditOem extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = () => {\n      const data = new URLSearchParams();\n      data.append(\"account_email\", this.state.email);\n      data.append(\"user_account_roles\", JSON.stringify([{\n        \"role_ids\": JSON.parse(localStorage.getItem('userDetails')).account_permissions[0].role_ids,\n        \"account_id\": \"-1\",\n        \"vehicle_scope\": \"1\"\n      }]));\n      data.append(\"account_name\", this.state.oemName);\n      data.append(\"account_type\", AccountType.OEM);\n      data.append(\"city_id\", this.state.city);\n      data.append(\"state_id\", this.state.state);\n      data.append(\"contact_name\", this.state.contactName);\n      data.append(\"contact_number\", this.state.contactNumber);\n      addUpdateAccountApi(data, () => this.props.history.goBack());\n    };\n\n    this.onNextClick = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.state = {\n      oemName: \"\",\n      contactName: \"\",\n      contactNumber: \"\",\n      email: \"\",\n      state: \"\",\n      city: \"\",\n      stateList: [],\n      cityList: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.STATE);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: \"Add OEM\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.onNextClick,\n        primaryBtnText: \"Save OEM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.handleSave,\n            ref: el => this.form = el,\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"oemName\"),\n                  label: \"OEM Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"OEM name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter OEM Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"contactName\"),\n                  label: \"Contact Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Contact Name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Contact Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"contactNumber\"),\n                  label: \"Contact Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Contact cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Contact Number\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"email\"),\n                  label: \"Email\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Email cannot be empty\"\n                  }, {\n                    validate: FormValidator.isEmail,\n                    message: \"Please enter a valid email\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Email\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"state\"),\n                  label: \"State\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"State cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select State\",\n                      options: this.state.stateList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.state);\n                        this.setState({\n                          city: \"\"\n                        });\n                        this.props.getAllLocationApi(this, LocationType.CITY);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"city\"),\n                  label: \"City\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"City cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select City\",\n                      options: this.state.cityList,\n                      multiple: false,\n                      searchable: true,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.city);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\n\nconst mapDispatchToProps = {\n  getAllLocationApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditOem);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/userManagement/AddEditOem.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomTextControl","Form","FormElement","FormValidator","SelectControl","ComponentHeader","ReactDOM","AccountType","LocationType","getAllLocationApi","addUpdateAccountApi","AddEditOem","constructor","props","handleSave","data","URLSearchParams","append","state","email","JSON","stringify","parse","localStorage","getItem","account_permissions","role_ids","oemName","OEM","city","contactName","contactNumber","history","goBack","onNextClick","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","stateList","cityList","componentDidMount","STATE","render","el","linkState","validate","isRequired","message","type","settings","placeholder","isEmail","options","multiple","searchable","onChangeCallback","onBlur","setState","CITY","mapStateToProps","userManagementState","UserManagementState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { BaseReactComponent, CustomTextControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { AccountType, LocationType } from '../../utils/Constant';\nimport { getAllLocationApi } from '../common/Api';\nimport { addUpdateAccountApi } from './Api';\n;\n\n\nclass AddEditOem extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      oemName: \"\",\n      contactName: \"\",\n      contactNumber: \"\",\n      email: \"\",\n      state: \"\",\n      city: \"\",\n      stateList: [],\n      cityList: [],\n    }\n  }\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.STATE)\n  }\n\n  handleSave = () => {\n    const data = new URLSearchParams();\n    data.append(\"account_email\", this.state.email);\n    data.append(\"user_account_roles\", JSON.stringify([{ \"role_ids\": JSON.parse(localStorage.getItem('userDetails')).account_permissions[0].role_ids, \"account_id\": \"-1\", \"vehicle_scope\": \"1\" }]));\n    data.append(\"account_name\", this.state.oemName);\n    data.append(\"account_type\", AccountType.OEM);\n    data.append(\"city_id\", this.state.city);\n    data.append(\"state_id\", this.state.state);\n    data.append(\"contact_name\", this.state.contactName);\n    data.append(\"contact_number\", this.state.contactNumber);\n    addUpdateAccountApi(data, () => this.props.history.goBack());\n  }\n\n  onNextClick = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={\"Add OEM\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.onNextClick}\n          primaryBtnText={\"Save OEM\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.handleSave} ref={el => this.form = el}>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"oemName\")}\n                    label=\"OEM Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"OEM name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter OEM Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"contactName\")}\n                    label=\"Contact Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Contact Name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Contact Name\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"contactNumber\")}\n                    label=\"Contact Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Contact cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Contact Number\",\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"email\")}\n                    label=\"Email\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Email cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isEmail,\n                        message: \"Please enter a valid email\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Email\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"state\")}\n                    label=\"State\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"State cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select State\",\n                        options: this.state.stateList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.state);\n                          this.setState({ city: \"\" })\n                          this.props.getAllLocationApi(this, LocationType.CITY)\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"city\")}\n                    label=\"City\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"City cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select City\",\n                        options: this.state.cityList,\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.city);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\nconst mapDispatchToProps = {\n  getAllLocationApi\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditOem);"]},"metadata":{},"sourceType":"module"}