{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/iotModel/IotModel.js\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllIotModelsApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass IotModel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFilter = () => {\n      this.setState({\n        showFilter: !this.state.showFilter\n      });\n    };\n\n    this.handleAddIotModel = () => {\n      this.props.history.push(\"/master/iot-models/add-iot-model\");\n    };\n\n    this.clearSearch = () => {\n      this.onChangeMethod({\n        search: \"\"\n      });\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchText: value.search,\n        page: 1\n      }, () => {\n        replaceHistory(this.props.history, 1, value.search);\n      });\n    };\n\n    this.handleEditIotModel = rowData => {\n      this.props.history.push({\n        pathname: `/master/iot-models/edit-iot-model/`,\n        state: {\n          editData: rowData\n        }\n      });\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const searchText = params.get(\"search\");\n    this.state = {\n      iotModels: [],\n      page: page ? parseInt(page, 10) : 1,\n      totalPages: 1,\n      searchText,\n      searchKey: 'SEARCH_BY_TEXT',\n      showFilter: false\n    };\n  }\n\n  componentDidMount() {\n    getAllIotModelsApi(this);\n    console.log(\"test\");\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const prevSearchText = prevParams.get('search');\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const searchText = params.get('search');\n\n    if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({\n        page,\n        searchText\n      }, () => {\n        getAllIotModelsApi(this);\n      });\n    }\n  }\n\n  render() {\n    const {\n      iotModels\n    } = this.state;\n    const permissionList = getAssignedPermission();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"Iot Models\",\n        title: \"Iot Models\",\n        isFilter: false,\n        isPrimaryBtn: this.handleAddIotModel,\n        primaryBtnText: permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_MODEL) ? \"+ Add Iot Model\" : \"\",\n        isSearch: true,\n        placeholder: \"Search Iot Model\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: this.clearSearch,\n        searchValue: {\n          search: this.state.searchText\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: iotModels,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"Model Name\",\n            dataKey: \"modelName\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelName\") {\n                return rowData.modelName;\n              }\n            }\n          }, {\n            coumnWidth: 300,\n            labelName: \"Manufacturer Name\",\n            dataKey: \"modelCompany\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"modelCompany\") {\n                return rowData.modelCompany;\n              }\n            }\n          }, {\n            coumnWidth: 50,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [{\n                  title: \"Edit\",\n                  type: \"event\",\n                  handleClick: () => this.handleEditIotModel(rowData)\n                }];\n\n                if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_MODEL)) {\n                  return /*#__PURE__*/_jsxDEV(ActionDropdown, {\n                    menuItem: menuItem\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 25\n                  }, this);\n                }\n              }\n            }\n          }] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: this.state.totalPages,\n          currentPage: this.state.page - 1 // because of 0 based indexing\n          ,\n          message: \"Iot models not found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n}; // Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IotModel);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/iotModel/IotModel.js"],"names":["React","Component","connect","CustomTable","PermissionList","getAssignedPermission","replaceHistory","ComponentHeader","ActionDropdown","getAllIotModelsApi","IotModel","constructor","props","handleFilter","setState","showFilter","state","handleAddIotModel","history","push","clearSearch","onChangeMethod","search","value","searchText","page","handleEditIotModel","rowData","pathname","editData","location","params","URLSearchParams","get","iotModels","parseInt","totalPages","searchKey","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","prevParams","prevPage","prevSearchText","render","permissionList","includes","ADD_UPDATE_TELEMATICS_MODEL","coumnWidth","labelName","dataKey","className","isCell","cell","modelName","modelCompany","menuItem","title","type","handleClick","mapStateToProps","customersState","CustomersState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { PermissionList } from '../../utils/Constant';\nimport { getAssignedPermission, replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\nimport ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllIotModelsApi } from './Api';\n\nclass IotModel extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    const searchText = params.get(\"search\");\n    this.state = {\n      iotModels: [],\n      page: page ? parseInt(page, 10) : 1,\n      totalPages: 1,\n      searchText,\n      searchKey: 'SEARCH_BY_TEXT',\n      showFilter: false,\n    }\n  }\n\n  componentDidMount() {\n    getAllIotModelsApi(this);\n    console.log(\"test\")\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const prevSearchText = prevParams.get('search');\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const searchText = params.get('search');\n\n\n    if (prevPage !== page || prevSearchText !== searchText) {\n      this.setState({ page, searchText }, () => {\n        getAllIotModelsApi(this);\n      })\n    }\n  }\n\n  handleFilter = () => {\n    this.setState({\n      showFilter: !this.state.showFilter\n    })\n  }\n\n  handleAddIotModel = () => {\n    this.props.history.push(\"/master/iot-models/add-iot-model\");\n  }\n\n  clearSearch = () => {\n    this.onChangeMethod({ search: \"\" });\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({ searchText: value.search, page: 1 }, () => {\n      replaceHistory(this.props.history, 1, value.search);\n    });\n  }\n\n  handleEditIotModel = (rowData) => {\n    this.props.history.push({\n      pathname: `/master/iot-models/edit-iot-model/`,\n      state: { editData: rowData }\n    });\n  }\n\n  render() {\n    const { iotModels } = this.state;\n    const permissionList = getAssignedPermission();\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"Iot Models\"}\n          title={\"Iot Models\"}\n          isFilter={false}\n          isPrimaryBtn={this.handleAddIotModel}\n          primaryBtnText={permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_MODEL) ? \"+ Add Iot Model\" : \"\"}\n          isSearch={true}\n          placeholder={\"Search Iot Model\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={this.clearSearch}\n          searchValue={{ search: this.state.searchText }}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={iotModels}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"Model Name\",\n                dataKey: \"modelName\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelName\") {\n                    return rowData.modelName\n                  }\n                }\n              },\n              {\n                coumnWidth: 300,\n                labelName: \"Manufacturer Name\",\n                dataKey: \"modelCompany\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"modelCompany\") {\n                    return rowData.modelCompany\n                  }\n                }\n              },\n              {\n                coumnWidth: 50,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [\n                      {\n                        title: \"Edit\",\n                        type: \"event\",\n                        handleClick: () => this.handleEditIotModel(rowData),\n                      },\n                    ];\n                    if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_MODEL)) {\n                      return (\n                        <ActionDropdown\n                          menuItem={menuItem}\n                        />\n                      )\n                    }\n                  }\n                }\n              }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={this.state.totalPages}\n            currentPage={this.state.page - 1} // because of 0 based indexing\n            message={\"Iot models not found\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n}\n// Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IotModel);"]},"metadata":{},"sourceType":"module"}