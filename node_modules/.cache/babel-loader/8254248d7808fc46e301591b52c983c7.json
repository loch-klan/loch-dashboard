{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/bookingManagement/AddEditBookings.js\";\nimport React from 'react';\nimport { Button, Col, Row, FormGroup, ControlLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { START_PAGE } from '../../utils/Constant';\nimport { BaseReactComponent, CustomTextControl, DatePickerControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { format } from 'date-fns';\nimport { getAllFranchiseLocationApi } from '../franchise/Api';\nimport { getAllCustomersApi } from '../customers/Api';\nimport DatePicker from 'react-datepicker';\nimport setHours from \"date-fns/setHours\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport addDays from \"date-fns/addDays\";\nimport { getApplicableCouponsApi } from '../coupons/Api';\nimport AddCustomerModal from './AddCustomerModal';\nimport moment from 'moment';\nimport { createOrderApi, getAvailableVehiclesApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditBookings extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSelectCustomer = () => {\n      console.log('Heyyy', this.state.phoneNumberOptions);\n      const selectedCustomer = this.state.phoneNumberOptions.filter(item => item.id === this.state.phoneNumber);\n      this.setState({\n        selectedCustomer\n      });\n    };\n\n    this.handleAddCustomer = data => {\n      console.log('data', data);\n      getAllCustomersApi(this, true, data); // const selectedCustomer = this.state.phoneNumberOptions.filter(item=> item.id === this.state.phoneNumber)\n      // this.setState({\n      //   customerInfo: data,\n      //   showAddCustomer: false,\n      //   phoneNumber: data.user_details.id,\n      // },()=>this.handleSelectCustomer)\n    };\n\n    this.callCouponApi = () => {\n      const data = new URLSearchParams();\n      data.append(\"franchise_location_id\", this.state.pickupLocation);\n      getApplicableCouponsApi(data, this);\n      this.handleSelectBike();\n    };\n\n    this.setStartDate = date => {\n      this.setState({\n        startDate: date,\n        endDate: \"\"\n      });\n    };\n\n    this.setEndDate = date => {\n      this.setState({\n        endDate: date\n      }, () => {\n        this.handleSelectBike();\n      });\n    };\n\n    this.handleSelectBike = () => {\n      const data = new URLSearchParams();\n      data.append(\"start\", -1);\n      data.append(\"limit\", -1);\n      data.append(\"franchise_location_id\", this.state.pickupLocation);\n      data.append(\"from_datetime\", moment(this.state.startDate).format(\"DD-MM-YYYY hh:mm\"));\n      data.append(\"to_datetime\", moment(this.state.endDate).format(\"DD-MM-YYYY hh:mm\"));\n      getAvailableVehiclesApi(data, this);\n    };\n\n    this.handleSave = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onValidSubmit = () => {\n      const {\n        startDate,\n        endDate,\n        pickupLocation,\n        selectedCustomer,\n        bike,\n        bikeList,\n        coupon,\n        couponList,\n        paymentMode\n      } = this.state;\n      let selectedBike = bikeList.filter(item => item.id === bike);\n      let selectedCoupon = couponList.filter(item => item.id === coupon);\n      const data = new URLSearchParams();\n      data.append('vehicle_inventory_id', bike);\n      data.append('franchise_location_id', pickupLocation);\n      data.append('start_datetime', moment(startDate).format(\"DD-MM-YYYY hh:mm\"));\n      data.append('end_datetime', moment(endDate).format(\"DD-MM-YYYY hh:mm\"));\n      data.append('pricing_id', selectedBike[0].price_data.id);\n      data.append('customer_id', selectedCustomer[0].id);\n      data.append('payment_mode', paymentMode); // if(pointsApplied){\n      //   data.append('points', points);\n      // }\n\n      if (coupon) {\n        data.append('coupon_id', selectedCoupon[0].id);\n      }\n\n      createOrderApi(data, this);\n    };\n\n    const editData = props.location.state ? props.location.state.editData : null; // console.log('editData', editData);\n\n    this.state = {\n      editId: editData ? editData.id : \"\",\n      isCashCollected: 'false',\n      pickupLocation: \"\",\n      franchiseLocationOption: [],\n      phoneNumberOptions: [],\n      showAddCustomer: false,\n      couponList: [],\n      bike: \"\",\n      bikeList: [],\n      startDate: new Date(),\n      endDate: new Date(Date.now() + 3600 * 1000 * 24) //Current date +1 day\n\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllFranchiseLocationApi(this, START_PAGE, true);\n    getAllCustomersApi(this, true);\n  }\n\n  render() {\n    const {\n      franchiseLocationOption,\n      phoneNumberOptions,\n      startDate,\n      endDate,\n      couponList,\n      bikeList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: this.state.editId ? \"Edit Booking\" : \"Add Booking\",\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.handleSave,\n        primaryBtnText: \"Save Booking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), this.state.showAddCustomer && /*#__PURE__*/_jsxDEV(AddCustomerModal, {\n        show: this.state.showAddCustomer,\n        handleClose: () => this.setState({\n          showAddCustomer: false\n        }),\n        handleAddCustomer: data => this.handleAddCustomer(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onValidSubmit,\n            ref: el => this.form = el,\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"pickupLocation\"),\n                  label: \"Pickup Location\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Pickup location cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Pickup Location\",\n                      options: franchiseLocationOption,\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.pickupLocation);\n                        this.callCouponApi();\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"phoneNumber\"),\n                  label: \"Customer Phone Number\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Phone number cannot be empty\"\n                  }],\n                  control: {\n                    type: SelectControl,\n                    settings: {\n                      placeholder: \"Select Phone Number\",\n                      options: phoneNumberOptions,\n                      noOptionAction: () => {\n                        this.setState({\n                          showAddCustomer: true\n                        });\n                      },\n                      onChangeCallback: onBlur => {\n                        onBlur(this.state.phoneNumber);\n                        this.handleSelectCustomer();\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this), this.state.selectedCustomer && this.state.pickupLocation && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Customer Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"red-hat-display-bold f-s-16\",\n                    children: this.state.selectedCustomer[0].first_name || \"NA\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-wrapper\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-label\",\n                      children: [\"Pickup Date/Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: \"*\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 229,\n                        columnNumber: 73\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 229,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                      controlId: \"scheduleDate\",\n                      className: \"date-group\",\n                      children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                        minTime: startDate.getDay() === new Date().getDay() && startDate.getDay() && setHours(setMinutes(new Date(), startDate.getMinutes()), startDate.getHours()),\n                        maxTime: startDate.getDay() === new Date().getDay() && startDate.getDay() && setHours(setMinutes(new Date(), 45), 23),\n                        minDate: new Date(),\n                        selected: startDate,\n                        onChange: date => this.setStartDate(date),\n                        showTimeSelect: true,\n                        timeFormat: \"HH:mm aa\",\n                        timeIntervals: 15,\n                        timeCaption: \"Time\",\n                        dateFormat: \"MMMM d, yyyy h:mm aa\",\n                        className: \"form-control\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 234,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 230,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-wrapper\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-label\",\n                      children: [\"Return Date/Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: \"*\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 252,\n                        columnNumber: 73\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                      controlId: \"scheduleDate\",\n                      className: \"date-group\",\n                      children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                        minTime: startDate.getDay() === endDate && endDate.getDay() && setHours(setMinutes(new Date(), 0), startDate.getHours() + 1),\n                        maxTime: startDate.getDay() === endDate && endDate.getDay() && setHours(setMinutes(new Date(), 30), 23),\n                        minDate: addDays(startDate, 1),\n                        selected: endDate,\n                        onChange: date => this.setEndDate(date),\n                        showTimeSelect: true,\n                        timeFormat: \"HH:mm aa\",\n                        timeIntervals: 15,\n                        timeCaption: \"Time\",\n                        dateFormat: \"MMMM d, yyyy h:mm aa\",\n                        className: \"form-control\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 257,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"bike\"),\n                    label: \"Select Bike\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Bike cannot be empty\"\n                    }],\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Bike\",\n                        options: bikeList,\n                        onChangeCallback: onBlur => {\n                          onBlur(this.state.bike);\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"coupon\"),\n                    label: \"Select Coupon\" // required\n                    // validations={[\n                    //   {\n                    //     validate: FormValidator.isRequired,\n                    //     message: \"Coupon cannot be empty\"\n                    //   },\n                    // ]}\n                    ,\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Coupon\",\n                        options: couponList\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"paymentMode\"),\n                    label: \"Payment Mode\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Payment Mode cannot be empty\"\n                    }],\n                    control: {\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Payment Mode\",\n                        options: [{\n                          label: \"Payment Link\",\n                          value: \"20\"\n                        }, {\n                          label: \"Offline\",\n                          value: \"30\"\n                        }],\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: onBlur => {\n                          onBlur(this.state.paymentMode);\n                        }\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\n\nconst mapDispatchToProps = {\n  getAllFranchiseLocationApi\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBookings);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/bookingManagement/AddEditBookings.js"],"names":["React","Button","Col","Row","FormGroup","ControlLabel","connect","START_PAGE","BaseReactComponent","CustomTextControl","DatePickerControl","Form","FormElement","FormValidator","SelectControl","ComponentHeader","ReactDOM","format","getAllFranchiseLocationApi","getAllCustomersApi","DatePicker","setHours","setMinutes","addDays","getApplicableCouponsApi","AddCustomerModal","moment","createOrderApi","getAvailableVehiclesApi","AddEditBookings","constructor","props","handleSelectCustomer","console","log","state","phoneNumberOptions","selectedCustomer","filter","item","id","phoneNumber","setState","handleAddCustomer","data","callCouponApi","URLSearchParams","append","pickupLocation","handleSelectBike","setStartDate","date","startDate","endDate","setEndDate","handleSave","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onValidSubmit","bike","bikeList","coupon","couponList","paymentMode","selectedBike","selectedCoupon","price_data","editData","location","editId","isCashCollected","franchiseLocationOption","showAddCustomer","Date","now","componentDidMount","render","history","goBack","el","linkState","validate","isRequired","message","type","settings","placeholder","options","onChangeCallback","onBlur","noOptionAction","first_name","getDay","getMinutes","getHours","label","value","multiple","searchable","mapStateToProps","customersState","CustomersState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Col, Row, FormGroup, ControlLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { START_PAGE } from '../../utils/Constant';\nimport { BaseReactComponent, CustomTextControl, DatePickerControl, Form, FormElement, FormValidator, SelectControl } from '../../utils/form';\nimport { ComponentHeader } from '../common';\nimport ReactDOM from 'react-dom';\nimport { format } from 'date-fns';\nimport { getAllFranchiseLocationApi } from '../franchise/Api';\nimport { getAllCustomersApi } from '../customers/Api';\nimport DatePicker from 'react-datepicker';\nimport setHours from \"date-fns/setHours\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport addDays from \"date-fns/addDays\";\nimport { getApplicableCouponsApi } from '../coupons/Api';\nimport AddCustomerModal from './AddCustomerModal';\nimport moment from 'moment';\nimport { createOrderApi, getAvailableVehiclesApi } from './Api';\n\nclass AddEditBookings extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const editData = props.location.state ? props.location.state.editData : null;\n    // console.log('editData', editData);\n    this.state = {\n      editId: editData ? editData.id : \"\",\n      isCashCollected: 'false',\n      pickupLocation: \"\",\n      franchiseLocationOption: [],\n      phoneNumberOptions: [],\n      showAddCustomer: false,\n      couponList: [],\n      bike: \"\",\n      bikeList: [],\n      startDate: new Date(),\n      endDate: new Date(Date.now() + (3600 * 1000 * 24)), //Current date +1 day\n    }\n  }\n  componentDidMount() {\n    this.props.getAllFranchiseLocationApi(this, START_PAGE, true);\n    getAllCustomersApi(this, true);\n  }\n\n  handleSelectCustomer = ()=>{\n    console.log('Heyyy',this.state.phoneNumberOptions);\n    const selectedCustomer = this.state.phoneNumberOptions.filter(item=> item.id === this.state.phoneNumber)\n    this.setState({selectedCustomer});\n  }\n\n  handleAddCustomer = (data)=>{\n    console.log('data',data);\n    getAllCustomersApi(this, true, data);\n    // const selectedCustomer = this.state.phoneNumberOptions.filter(item=> item.id === this.state.phoneNumber)\n    // this.setState({\n    //   customerInfo: data,\n    //   showAddCustomer: false,\n    //   phoneNumber: data.user_details.id,\n    // },()=>this.handleSelectCustomer)\n  }\n\n  callCouponApi = () =>{\n    const data = new URLSearchParams();\n    data.append(\"franchise_location_id\", this.state.pickupLocation);\n    getApplicableCouponsApi(data,this);\n    this.handleSelectBike();\n  }\n\n  setStartDate = (date) =>{\n    this.setState({\n      startDate: date,\n      endDate: \"\"\n    })\n  }\n  setEndDate = (date) =>{\n    this.setState({\n      endDate: date\n    },()=>{\n      this.handleSelectBike();\n    })\n  }\n\n  handleSelectBike = () =>{\n    const data = new URLSearchParams();\n    data.append(\"start\", -1);\n    data.append(\"limit\", -1);\n    data.append(\"franchise_location_id\", this.state.pickupLocation);\n    data.append(\"from_datetime\", moment(this.state.startDate).format(\"DD-MM-YYYY hh:mm\"));\n    data.append(\"to_datetime\", moment(this.state.endDate).format(\"DD-MM-YYYY hh:mm\"));\n    getAvailableVehiclesApi(data,this);\n  }\n\n  handleSave = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", { cancelable: true, bubbles: true }));\n  }\n\n  onValidSubmit = () => {\n    const { startDate, endDate, pickupLocation, selectedCustomer, bike, bikeList, coupon, couponList, paymentMode } = this.state;\n    let selectedBike = bikeList.filter(item=>item.id === bike)\n    let selectedCoupon = couponList.filter(item=>item.id === coupon)\n    const data = new URLSearchParams();\n    data.append('vehicle_inventory_id', bike);\n    data.append('franchise_location_id', pickupLocation);\n    data.append('start_datetime', moment(startDate).format(\"DD-MM-YYYY hh:mm\"));\n    data.append('end_datetime', moment(endDate).format(\"DD-MM-YYYY hh:mm\"));\n    data.append('pricing_id', selectedBike[0].price_data.id);\n    data.append('customer_id', selectedCustomer[0].id);\n    data.append('payment_mode', paymentMode);\n    // if(pointsApplied){\n    //   data.append('points', points);\n    // }\n    if(coupon){\n      data.append('coupon_id', selectedCoupon[0].id);\n    }\n    createOrderApi(data,this);\n  }\n\n  render() {\n    const {franchiseLocationOption, phoneNumberOptions, startDate, endDate, couponList, bikeList} = this.state;\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={this.state.editId ? \"Edit Booking\" : \"Add Booking\"}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.handleSave}\n          primaryBtnText={\"Save Booking\"}\n        />\n        {\n          this.state.showAddCustomer &&\n          <AddCustomerModal\n            show={this.state.showAddCustomer}\n            handleClose={()=>this.setState({showAddCustomer: false})}\n            handleAddCustomer={(data)=>this.handleAddCustomer(data)}\n          />\n        }\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form onValidSubmit={this.onValidSubmit} ref={el => this.form = el}>\n              <Row>\n                {/* <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"franchiseName\")}\n                    label=\"Franchise Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Franchise name cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Franchise Name\",\n                      }\n                    }}\n                  />\n                </Col> */}\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"pickupLocation\")}\n                    label=\"Pickup Location\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Pickup location cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Pickup Location\",\n                        options: franchiseLocationOption,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.pickupLocation);\n                          this.callCouponApi();\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"phoneNumber\")}\n                    label=\"Customer Phone Number\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Phone number cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Phone Number\",\n                        options: phoneNumberOptions,\n                        noOptionAction: ()=>{this.setState({showAddCustomer: true})},\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.phoneNumber);\n                          this.handleSelectCustomer();\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              {\n                this.state.selectedCustomer && this.state.pickupLocation &&\n                <>\n                <hr/>\n                <br/>\n                <br/>\n                <Row>\n                  <Col md={4}>\n                    <label className=\"form-label\">Customer Name</label>\n                    <h4 className='red-hat-display-bold f-s-16'>{this.state.selectedCustomer[0].first_name || \"NA\"}</h4>\n                  </Col>\n                </Row>\n                <br/>\n                <br/>\n              <Row>\n                <Col md={4}>\n                <div className='form-wrapper'>\n                          <label className=\"form-label\">Pickup Date/Time<span>*</span></label>\n                            <FormGroup\n                              controlId=\"scheduleDate\"\n                              className=\"date-group\"\n                            >\n                              <DatePicker\n                                minTime={startDate.getDay() === new Date().getDay() && startDate.getDay() && setHours(setMinutes(new Date(), startDate.getMinutes()), startDate.getHours())}\n                                maxTime={startDate.getDay() === new Date().getDay() && startDate.getDay() && setHours(setMinutes(new Date(), 45), 23)}\n                                minDate={new Date()}\n                                selected={startDate}\n                                onChange={(date) => this.setStartDate(date)}\n                                showTimeSelect\n                                timeFormat=\"HH:mm aa\"\n                                timeIntervals={15}\n                                timeCaption=\"Time\"\n                                dateFormat=\"MMMM d, yyyy h:mm aa\"\n                                className='form-control'\n                              />\n                            </FormGroup>\n                          </div>\n                </Col>\n                <Col md={4}>\n                <div className='form-wrapper'>\n                          <label className=\"form-label\">Return Date/Time<span>*</span></label>\n                            <FormGroup\n                              controlId=\"scheduleDate\"\n                              className=\"date-group\"\n                            >\n                              <DatePicker\n                                minTime={startDate.getDay() === endDate && endDate.getDay() && setHours(setMinutes(new Date(), 0), startDate.getHours()+1)}\n                                maxTime={startDate.getDay() === endDate && endDate.getDay() && setHours(setMinutes(new Date(), 30), 23)}\n                                minDate={addDays(startDate,1)}\n                                selected={endDate}\n                                onChange={(date) => this.setEndDate(date)}\n                                showTimeSelect\n                                timeFormat=\"HH:mm aa\"\n                                timeIntervals={15}\n                                timeCaption=\"Time\"\n                                dateFormat=\"MMMM d, yyyy h:mm aa\"\n                                className='form-control'\n                              />\n                            </FormGroup>\n                          </div>\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"bike\")}\n                    label=\"Select Bike\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Bike cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Bike\",\n                        options: bikeList,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.bike);\n                        }\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col md={4}>\n                <FormElement\n                    valueLink={this.linkState(this, \"coupon\")}\n                    label=\"Select Coupon\"\n                    // required\n                    // validations={[\n                    //   {\n                    //     validate: FormValidator.isRequired,\n                    //     message: \"Coupon cannot be empty\"\n                    //   },\n                    // ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Coupon\",\n                        options: couponList,\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"paymentMode\")}\n                    label=\"Payment Mode\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Payment Mode cannot be empty\"\n                      },\n                    ]}\n                    control={{\n                      type: SelectControl,\n                      settings: {\n                        placeholder: \"Select Payment Mode\",\n                        options: [{ label: \"Payment Link\", value: \"20\" }, { label: \"Offline\", value: \"30\" }],\n                        multiple: false,\n                        searchable: true,\n                        onChangeCallback: (onBlur) => {\n                          onBlur(this.state.paymentMode);\n                        }\n                      }\n                    }}\n                    />\n                </Col>\n              </Row>\n              </>\n              }\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  customersState: state.CustomersState\n});\nconst mapDispatchToProps = {\n  getAllFranchiseLocationApi,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBookings);"]},"metadata":{},"sourceType":"module"}