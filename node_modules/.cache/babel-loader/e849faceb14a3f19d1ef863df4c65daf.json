{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/utils/form/FormElementComponent.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, FormGroup } from \"react-bootstrap\";\nimport BaseReactComponent from \"./BaseReactComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FormElementComponent extends BaseReactComponent {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.validate = function () {\n      let stateValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      const {\n        valueLink,\n        validations\n      } = _this.props;\n      let failedValidation = null;\n      let isValidState = null;\n      let isInvalidState = null;\n\n      if (validations) {\n        failedValidation = validations.find(validation => {\n          return validation.validate(valueLink.value || stateValue) === false;\n        });\n        failedValidation = failedValidation !== undefined ? failedValidation : null; // console.log('failedValidation', failedValidation);\n\n        isInvalidState = failedValidation && failedValidation.message ? true : false;\n        isValidState = failedValidation && failedValidation.message ? false : true;\n      } // console.log('isInvalidState', isInvalidState);\n      // THE STATE VALUE IS PASSED FROM COMPONENT CALLBACK METHOD IN CASE OF REACT SELECT.\n\n\n      if (Array.isArray(stateValue) && stateValue.length > 0) {\n        failedValidation = false;\n        isInvalidState = false;\n        isValidState = true;\n      }\n\n      _this.setState({\n        failedValidation,\n        isInvalidState,\n        isValidState\n      });\n\n      return failedValidation === null;\n    };\n\n    this.state = {\n      failedValidation: null,\n      isInvalidState: null,\n      isValidState: null\n    };\n  }\n  /* componentWillMount() {\n    this.props.formContext.registerElement(this);\n  } */\n\n\n  componentDidMount() {\n    this.props.formContext.registerElement(this);\n  }\n\n  componentWillUnmount() {\n    this.props.formContext.unRegisterElement(this);\n  }\n\n  render() {\n    const {\n      classes,\n      valueLink,\n      label,\n      required,\n      disabled,\n      helpText,\n      toolTipText,\n      isValid,\n      isInvalid,\n      control: {\n        type,\n        settings\n      }\n    } = this.props; // console.log('this.props', this.props);\n\n    const {\n      failedValidation,\n      isInvalidState,\n      isValidState\n    } = this.state;\n    const FormElementControl = type;\n    const requiredStyle = {\n      color: \"red\"\n    }; // console.log('valueLink', valueLink);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FormGroup, {\n        controlId: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) // validationState={failedValidation ? \"error\" : \"\"}\n        // validated={failedValidation}\n        ,\n        className: classes.formGroup,\n        children: [label && (required ?\n        /*#__PURE__*/\n        // <ControlLabel className={classes.label}>{label} <span style={requiredStyle}>*</span></ControlLabel>\n        _jsxDEV(Form.Label, {\n          className: classes.label,\n          children: [label, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: requiredStyle,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 19\n        }, this) :\n        /*#__PURE__*/\n        // <ControlLabel className={classes.label} > {label}</ControlLabel>\n        _jsxDEV(Form.Label, {\n          className: classes.label,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }, this)), /*#__PURE__*/_jsxDEV(FormElementControl, {\n          valueLink: valueLink,\n          onBlur: this.validate,\n          failedValidation: this.state.failedValidation,\n          classes: classes,\n          disabled: disabled,\n          isValid: isValid || isValidState,\n          isInvalid: isInvalid || isInvalidState,\n          ...settings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), (failedValidation || helpText) && /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: `${failedValidation ? \"has-error\" : \"\"}`,\n          children: failedValidation ? failedValidation.message : helpText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), toolTipText && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          tooltip: true,\n          type: `${failedValidation ? \"invalid\" : \"valid\"}`,\n          children: failedValidation ? failedValidation.message : toolTipText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nFormElementComponent.propTypes = {\n  classes: PropTypes.object,\n  formContext: PropTypes.object.isRequired,\n  valueLink: PropTypes.object.isRequired,\n  label: PropTypes.string,\n  required: PropTypes.bool,\n  helpText: PropTypes.string,\n  toolTipText: PropTypes.string,\n  validations: PropTypes.array,\n  control: PropTypes.object.isRequired,\n  isValid: PropTypes.bool,\n  isInvalid: PropTypes.bool\n};\nFormElementComponent.defaultProps = {\n  label: null,\n  required: false,\n  helpText: \"\",\n  toolTipText: \"\",\n  validations: [],\n  classes: {}\n};\nexport default FormElementComponent;","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/utils/form/FormElementComponent.js"],"names":["React","PropTypes","Form","FormGroup","BaseReactComponent","FormElementComponent","constructor","props","validate","stateValue","valueLink","validations","failedValidation","isValidState","isInvalidState","find","validation","value","undefined","message","Array","isArray","length","setState","state","componentDidMount","formContext","registerElement","componentWillUnmount","unRegisterElement","render","classes","label","required","disabled","helpText","toolTipText","isValid","isInvalid","control","type","settings","FormElementControl","requiredStyle","color","Math","random","toString","substring","formGroup","propTypes","object","isRequired","string","bool","array","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, FormGroup } from \"react-bootstrap\";\nimport BaseReactComponent from \"./BaseReactComponent\";\n\nclass FormElementComponent extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      failedValidation: null,\n      isInvalidState: null,\n      isValidState: null,\n    };\n  }\n\n  /* componentWillMount() {\n    this.props.formContext.registerElement(this);\n  } */\n\n  componentDidMount() {\n    this.props.formContext.registerElement(this);\n  }\n\n  componentWillUnmount() {\n    this.props.formContext.unRegisterElement(this);\n  }\n\n  validate = (stateValue = null) => {\n    const { valueLink, validations } = this.props;\n    let failedValidation = null;\n    let isValidState = null;\n    let isInvalidState = null;\n\n    if (validations) {\n      failedValidation = validations.find(\n        validation => {\n          return validation.validate(valueLink.value || stateValue) === false\n        }\n      );\n      failedValidation =\n        failedValidation !== undefined ? failedValidation : null;\n      // console.log('failedValidation', failedValidation);\n      isInvalidState = failedValidation && failedValidation.message ? true : false;\n      isValidState = failedValidation && failedValidation.message ? false : true;\n    }\n\n    // console.log('isInvalidState', isInvalidState);\n    // THE STATE VALUE IS PASSED FROM COMPONENT CALLBACK METHOD IN CASE OF REACT SELECT.\n    if (Array.isArray(stateValue) && stateValue.length > 0) {\n      failedValidation = false;\n      isInvalidState = false;\n      isValidState = true;\n    }\n\n    this.setState({ failedValidation, isInvalidState, isValidState });\n    return failedValidation === null;\n  };\n\n  render() {\n    const {\n      classes,\n      valueLink,\n      label,\n      required,\n      disabled,\n      helpText,\n      toolTipText,\n      isValid,\n      isInvalid,\n      control: { type, settings }\n    } = this.props;\n    // console.log('this.props', this.props);\n    const { failedValidation, isInvalidState, isValidState } = this.state;\n    const FormElementControl = type;\n\n    const requiredStyle = {\n      color: \"red\"\n    };\n    // console.log('valueLink', valueLink);\n    return (\n\n      <div>\n\n        <FormGroup\n          controlId={Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)}\n          // validationState={failedValidation ? \"error\" : \"\"}\n          // validated={failedValidation}\n          className={classes.formGroup}\n        >\n          {\n            label && (\n              required ?\n                (\n                  // <ControlLabel className={classes.label}>{label} <span style={requiredStyle}>*</span></ControlLabel>\n                  <Form.Label className={classes.label}>{label} <span style={requiredStyle}>*</span></Form.Label>\n                )\n                :\n                (\n                  // <ControlLabel className={classes.label} > {label}</ControlLabel>\n                  <Form.Label className={classes.label}>{label}</Form.Label>\n                )\n\n            )\n          }\n          <FormElementControl\n            valueLink={valueLink}\n            onBlur={this.validate}\n            failedValidation={this.state.failedValidation}\n            classes={classes}\n            disabled={disabled}\n            isValid={isValid || isValidState}\n            isInvalid={isInvalid || isInvalidState}\n            {...settings}\n          />\n          {/* (isValid && failedValidation) || (failedValidation && toolTipText) */}\n          {/* (isInvalid && failedValidation) || (failedValidation && toolTipText) */}\n          {\n\n          }\n          {\n            (failedValidation || helpText) &&\n            <Form.Text className={`${failedValidation ? \"has-error\" : \"\"}`}>\n              {failedValidation ? failedValidation.message : helpText}\n            </Form.Text>\n          }\n\n          {\n            (toolTipText) &&\n            <Form.Control.Feedback tooltip type={`${failedValidation ? \"invalid\" : \"valid\"}`}>{failedValidation ? failedValidation.message : toolTipText}</Form.Control.Feedback>\n          }\n\n        </FormGroup>\n      </div>\n\n    );\n  }\n}\n\nFormElementComponent.propTypes = {\n  classes: PropTypes.object,\n  formContext: PropTypes.object.isRequired,\n  valueLink: PropTypes.object.isRequired,\n  label: PropTypes.string,\n  required: PropTypes.bool,\n  helpText: PropTypes.string,\n  toolTipText: PropTypes.string,\n  validations: PropTypes.array,\n  control: PropTypes.object.isRequired,\n  isValid: PropTypes.bool,\n  isInvalid: PropTypes.bool,\n};\n\nFormElementComponent.defaultProps = {\n  label: null,\n  required: false,\n  helpText: \"\",\n  toolTipText: \"\",\n  validations: [],\n  classes: {}\n};\n\nexport default FormElementComponent;"]},"metadata":{},"sourceType":"module"}