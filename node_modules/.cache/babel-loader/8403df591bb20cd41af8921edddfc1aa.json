{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/userManagement/Oem.js\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { AccountType, START_PAGE } from '../../utils/Constant';\nimport { replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common'; // import ActionDropdown from '../common/_utils/ActionDropdown';\n\nimport { getAllAccountApi } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Oem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddOem = () => {\n      this.props.history.push(\"/user-management/oem/add-oem\");\n    };\n\n    this.onChangeMethod = value => {\n      this.setState({\n        searchValue: value,\n        conditions: [{\n          \"key\": \"SEARCH_BY_TYPE\",\n          \"value\": AccountType.OEM,\n          \"context\": null\n        }, {\n          key: \"SEARCH_BY_TEXT\",\n          value: value.search\n        }]\n      });\n      replaceHistory(this.props.history, START_PAGE, value.search);\n      this.props.getAllAccountApi(this, START_PAGE);\n    };\n\n    this.clearSearch = currentPage => {\n      this.setState({\n        searchValue: \"\",\n        conditions: [{\n          \"key\": \"SEARCH_BY_TYPE\",\n          \"value\": AccountType.OEM,\n          \"context\": null\n        }]\n      }, () => {\n        if (currentPage === START_PAGE) {\n          this.props.getAllAccountApi(this, START_PAGE);\n        }\n      });\n      replaceHistory(this.props.history, START_PAGE + 1);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      data: [],\n      conditions: [{\n        \"key\": \"SEARCH_BY_TYPE\",\n        \"value\": AccountType.OEM,\n        \"context\": null\n      }],\n      page: page ? parseInt(page, 10) : START_PAGE + 1\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllAccountApi(this);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllAccountApi(this);\n      } else {\n        this.props.getAllAccountApi(this, page - 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      data,\n      page,\n      totalPage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: false,\n        breadcrumb: true,\n        currentPage: \"OEM\",\n        title: \"OEM\",\n        isFilter: false,\n        isPrimaryBtn: this.handleAddOem,\n        primaryBtnText: \"+ Add OEM\",\n        isSearch: true,\n        placeholder: \"Search OEM\",\n        onChangeMethod: this.onChangeMethod,\n        clearSearch: () => this.clearSearch(page || START_PAGE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: data,\n          columnList: [{\n            coumnWidth: 250,\n            labelName: \"OEM Name\",\n            dataKey: \"oemName\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"oemName\") {\n                return /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"cursor\",\n                  onClick: () => this.props.history.push('/user-management/oem/1'),\n                  children: rowData.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          },\n          /* {\n            coumnWidth: 250,\n            labelName: \"Contact Name\",\n            dataKey: \"contactName\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"contactName\") {\n                return rowData.contactName\n              }\n            }\n          },\n          {\n            coumnWidth: 250,\n            labelName: \"Contact Number\",\n            dataKey: \"contactNumber\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"contactNumber\") {\n                return rowData.contactNumber\n              }\n            }\n          }, */\n          {\n            coumnWidth: 250,\n            labelName: \"Email\",\n            dataKey: \"email\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"email\") {\n                return rowData.billing_email;\n              }\n            }\n          }, {\n            coumnWidth: 250,\n            labelName: \"Location\",\n            dataKey: \"location\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"location\") {\n                return rowData.extra_information.state_details.name + \" - \" + rowData.extra_information.city_details.name;\n              }\n            }\n          }\n          /* {\n            coumnWidth: 250,\n            labelName: \"\",\n            dataKey: \"options\",\n            className: \"options-column\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"options\") {\n                const menuItem = [\n                  {\n                    title: \"View Details\",\n                    type: \"link\",\n                    linkUrl: `view-details`\n                  },\n                  {\n                    title: \"Raise Service Request\",\n                    type: \"link\",\n                    linkUrl: `view-details`\n                  },\n                  {\n                    title: \"Allocate Vehicle\",\n                    type: \"link\",\n                    linkUrl: `view-details`\n                  },\n                ];\n                return (\n                  <ActionDropdown\n                    menuItem={menuItem}\n                  />\n                )\n              }\n            }\n          } */\n          ] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"OEM list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\n\nconst mapDispatchToProps = {\n  getAllAccountApi\n}; // Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Oem);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/userManagement/Oem.js"],"names":["React","Component","connect","CustomTable","AccountType","START_PAGE","replaceHistory","ComponentHeader","getAllAccountApi","Oem","constructor","props","handleAddOem","history","push","onChangeMethod","value","setState","searchValue","conditions","OEM","key","search","clearSearch","currentPage","location","params","URLSearchParams","page","get","state","data","parseInt","componentDidMount","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","coumnWidth","labelName","dataKey","className","isCell","cell","rowData","name","billing_email","extra_information","state_details","city_details","mapStateToProps","userManagementState","UserManagementState","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,sBAAxC;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,eAAT,QAAgC,WAAhC,C,CACA;;AACA,SAASC,gBAAT,QAAiC,OAAjC;;;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAC1BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAqCnBC,YArCmB,GAqCJ,MAAM;AACnB,WAAKD,KAAL,CAAWE,OAAX,CAAmBC,IAAnB,CAAwB,8BAAxB;AACD,KAvCkB;;AAAA,SAyCnBC,cAzCmB,GAyCDC,KAAD,IAAW;AAC1B,WAAKC,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEF,KADD;AAEZG,QAAAA,UAAU,EAAE,CACV;AAAE,iBAAO,gBAAT;AAA2B,mBAASf,WAAW,CAACgB,GAAhD;AAAqD,qBAAW;AAAhE,SADU,EAEV;AAAEC,UAAAA,GAAG,EAAE,gBAAP;AAAyBL,UAAAA,KAAK,EAAEA,KAAK,CAACM;AAAtC,SAFU;AAFA,OAAd;AAOAhB,MAAAA,cAAc,CAAC,KAAKK,KAAL,CAAWE,OAAZ,EAAqBR,UAArB,EAAiCW,KAAK,CAACM,MAAvC,CAAd;AACA,WAAKX,KAAL,CAAWH,gBAAX,CAA4B,IAA5B,EAAkCH,UAAlC;AACD,KAnDkB;;AAAA,SAqDnBkB,WArDmB,GAqDJC,WAAD,IAAiB;AAC7B,WAAKP,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAE,EAAf;AAAmBC,QAAAA,UAAU,EAAE,CAAC;AAAE,iBAAO,gBAAT;AAA2B,mBAASf,WAAW,CAACgB,GAAhD;AAAqD,qBAAW;AAAhE,SAAD;AAA/B,OAAd,EAAyH,MAAM;AAC7H,YAAII,WAAW,KAAKnB,UAApB,EAAgC;AAC9B,eAAKM,KAAL,CAAWH,gBAAX,CAA4B,IAA5B,EAAkCH,UAAlC;AACD;AACF,OAJD;AAMAC,MAAAA,cAAc,CAAC,KAAKK,KAAL,CAAWE,OAAZ,EAAqBR,UAAU,GAAG,CAAlC,CAAd;AACD,KA7DkB;;AAEjB,UAAMiB,MAAM,GAAGX,KAAK,CAACc,QAAN,CAAeH,MAA9B;AACA,UAAMI,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,MAApB,CAAf;AACA,UAAMM,IAAI,GAAGF,MAAM,CAACG,GAAP,CAAW,GAAX,CAAb;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXZ,MAAAA,UAAU,EAAE,CAAC;AAAE,eAAO,gBAAT;AAA2B,iBAASf,WAAW,CAACgB,GAAhD;AAAqD,mBAAW;AAAhE,OAAD,CAFD;AAGXQ,MAAAA,IAAI,EAAEA,IAAI,GAAGI,QAAQ,CAACJ,IAAD,EAAO,EAAP,CAAX,GAAwBvB,UAAU,GAAG;AAHpC,KAAb;AAKD;;AAED4B,EAAAA,iBAAiB,GAAG;AAClB,SAAKtB,KAAL,CAAWH,gBAAX,CAA4B,IAA5B;AACA,SAAKG,KAAL,CAAWE,OAAX,CAAmBqB,OAAnB,CAA2B;AACzBZ,MAAAA,MAAM,EAAG,MAAK,KAAKQ,KAAL,CAAWF,IAAK;AADL,KAA3B;AAGD;;AAEDO,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,UAAMC,UAAU,GAAG,IAAIX,eAAJ,CAAoBS,SAAS,CAACX,QAAV,CAAmBH,MAAvC,CAAnB;AACA,UAAMiB,QAAQ,GAAGP,QAAQ,CAACM,UAAU,CAACT,GAAX,CAAe,GAAf,CAAD,EAAsB,EAAtB,CAAR,IAAqC,CAAtD;AAEA,UAAMH,MAAM,GAAG,IAAIC,eAAJ,CAAoB,KAAKhB,KAAL,CAAWc,QAAX,CAAoBH,MAAxC,CAAf;AACA,UAAMM,IAAI,GAAGI,QAAQ,CAACN,MAAM,CAACG,GAAP,CAAW,GAAX,CAAD,EAAkB,EAAlB,CAAR,IAAiC,CAA9C;AACA,UAAMP,MAAM,GAAGI,MAAM,CAACG,GAAP,CAAW,QAAX,KAAwB,EAAvC;;AAEA,QAAIU,QAAQ,KAAKX,IAAjB,EAAuB;AACrB;AACA,UAAIN,MAAJ,EAAY;AACV,aAAKX,KAAL,CAAWH,gBAAX,CAA4B,IAA5B;AACD,OAFD,MAEO;AACL,aAAKG,KAAL,CAAWH,gBAAX,CAA4B,IAA5B,EAAkCoB,IAAI,GAAG,CAAzC;AACD;AACF;AACF;;AA4BDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,IAAF;AAAQH,MAAAA,IAAR;AAAca,MAAAA;AAAd,QAA6B,KAAKX,KAAxC;AACA,wBACE;AAAA,8BACE,QAAC,eAAD;AACE,QAAA,YAAY,EAAE,KADhB;AAEE,QAAA,UAAU,EAAE,IAFd;AAGE,QAAA,WAAW,EAAE,KAHf;AAIE,QAAA,KAAK,EAAE,KAJT;AAKE,QAAA,QAAQ,EAAE,KALZ;AAME,QAAA,YAAY,EAAE,KAAKlB,YANrB;AAOE,QAAA,cAAc,EAAE,WAPlB;AAQE,QAAA,QAAQ,EAAE,IARZ;AASE,QAAA,WAAW,EAAE,YATf;AAUE,QAAA,cAAc,EAAE,KAAKG,cAVvB;AAWE,QAAA,WAAW,EAAE,MAAM,KAAKQ,WAAL,CAAiBK,IAAI,IAAIvB,UAAzB;AAXrB;AAAA;AAAA;AAAA;AAAA,cADF,eAcE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACE,QAAC,WAAD;AACE,UAAA,SAAS,EAAE0B,IADb;AAEE,UAAA,UAAU,EAAE,CACV;AACEW,YAAAA,UAAU,EAAE,GADd;AAEEC,YAAAA,SAAS,EAAE,UAFb;AAGEC,YAAAA,OAAO,EAAE,SAHX;AAIEC,YAAAA,SAAS,EAAE,sBAJb;AAKEC,YAAAA,MAAM,EAAE,IALV;AAMEC,YAAAA,IAAI,EAAE,CAACC,OAAD,EAAUJ,OAAV,KAAsB;AAC1B,kBAAIA,OAAO,KAAK,SAAhB,EAA2B;AACzB,oCACE;AACE,kBAAA,SAAS,EAAC,QADZ;AAEE,kBAAA,OAAO,EAAE,MAAM,KAAKjC,KAAL,CAAWE,OAAX,CAAmBC,IAAnB,CAAwB,wBAAxB,CAFjB;AAAA,4BAGGkC,OAAO,CAACC;AAHX;AAAA;AAAA;AAAA;AAAA,wBADF;AAOD;AACF;AAhBH,WADU;AAmBV;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc;AACEP,YAAAA,UAAU,EAAE,GADd;AAEEC,YAAAA,SAAS,EAAE,OAFb;AAGEC,YAAAA,OAAO,EAAE,OAHX;AAIEC,YAAAA,SAAS,EAAE,EAJb;AAKEC,YAAAA,MAAM,EAAE,IALV;AAMEC,YAAAA,IAAI,EAAE,CAACC,OAAD,EAAUJ,OAAV,KAAsB;AAC1B,kBAAIA,OAAO,KAAK,OAAhB,EAAyB;AACvB,uBAAOI,OAAO,CAACE,aAAf;AACD;AACF;AAVH,WA3CU,EAuDV;AACER,YAAAA,UAAU,EAAE,GADd;AAEEC,YAAAA,SAAS,EAAE,UAFb;AAGEC,YAAAA,OAAO,EAAE,UAHX;AAIEC,YAAAA,SAAS,EAAE,EAJb;AAKEC,YAAAA,MAAM,EAAE,IALV;AAMEC,YAAAA,IAAI,EAAE,CAACC,OAAD,EAAUJ,OAAV,KAAsB;AAC1B,kBAAIA,OAAO,KAAK,UAAhB,EAA4B;AAC1B,uBAAOI,OAAO,CAACG,iBAAR,CAA0BC,aAA1B,CAAwCH,IAAxC,GAA+C,KAA/C,GAAuDD,OAAO,CAACG,iBAAR,CAA0BE,YAA1B,CAAuCJ,IAArG;AACD;AACF;AAVH;AAYA;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnGwB,WAFd,CAuGE;AAvGF;AAwGE,UAAA,OAAO,EAAE,KAAKtC,KAAL,CAAWE,OAxGtB;AAyGE,UAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWc,QAzGvB;AA0GE,UAAA,UAAU,EAAEgB,SA1Gd;AA2GE,UAAA,WAAW,EAAEb,IA3Gf;AA4GE,UAAA,OAAO,EAAE;AA5GX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA,oBADF;AAkID;;AApMyB;;AAuM5B,MAAM0B,eAAe,GAAGxB,KAAK,KAAK;AAChCyB,EAAAA,mBAAmB,EAAEzB,KAAK,CAAC0B;AADK,CAAL,CAA7B;;AAGA,MAAMC,kBAAkB,GAAG;AACzBjD,EAAAA;AADyB,CAA3B,C,CAGA;AACA;AACA;;AAEA,eAAeN,OAAO,CAACoD,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChD,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { AccountType, START_PAGE } from '../../utils/Constant';\nimport { replaceHistory } from '../../utils/ReusableFunctions';\nimport { ComponentHeader } from '../common';\n// import ActionDropdown from '../common/_utils/ActionDropdown';\nimport { getAllAccountApi } from './Api';\n\nclass Oem extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      data: [],\n      conditions: [{ \"key\": \"SEARCH_BY_TYPE\", \"value\": AccountType.OEM, \"context\": null }],\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllAccountApi(this)\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      // this.setState({ page })\n      if (search) {\n        this.props.getAllAccountApi(this);\n      } else {\n        this.props.getAllAccountApi(this, page - 1);\n      }\n    }\n  }\n\n  handleAddOem = () => {\n    this.props.history.push(\"/user-management/oem/add-oem\");\n  }\n\n  onChangeMethod = (value) => {\n    this.setState({\n      searchValue: value,\n      conditions: [\n        { \"key\": \"SEARCH_BY_TYPE\", \"value\": AccountType.OEM, \"context\": null },\n        { key: \"SEARCH_BY_TEXT\", value: value.search }\n      ]\n    });\n    replaceHistory(this.props.history, START_PAGE, value.search)\n    this.props.getAllAccountApi(this, START_PAGE);\n  }\n\n  clearSearch = (currentPage) => {\n    this.setState({ searchValue: \"\", conditions: [{ \"key\": \"SEARCH_BY_TYPE\", \"value\": AccountType.OEM, \"context\": null }] }, () => {\n      if (currentPage === START_PAGE) {\n        this.props.getAllAccountApi(this, START_PAGE);\n      }\n    });\n\n    replaceHistory(this.props.history, START_PAGE + 1)\n  }\n\n  render() {\n    const { data, page, totalPage, } = this.state;\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={false}\n          breadcrumb={true}\n          currentPage={\"OEM\"}\n          title={\"OEM\"}\n          isFilter={false}\n          isPrimaryBtn={this.handleAddOem}\n          primaryBtnText={\"+ Add OEM\"}\n          isSearch={true}\n          placeholder={\"Search OEM\"}\n          onChangeMethod={this.onChangeMethod}\n          clearSearch={() => this.clearSearch(page || START_PAGE)}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={data}\n            columnList={[\n              {\n                coumnWidth: 250,\n                labelName: \"OEM Name\",\n                dataKey: \"oemName\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"oemName\") {\n                    return (\n                      <span\n                        className='cursor'\n                        onClick={() => this.props.history.push('/user-management/oem/1')}>\n                        {rowData.name}\n                      </span>\n                    )\n                  }\n                }\n              },\n              /* {\n                coumnWidth: 250,\n                labelName: \"Contact Name\",\n                dataKey: \"contactName\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"contactName\") {\n                    return rowData.contactName\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Contact Number\",\n                dataKey: \"contactNumber\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"contactNumber\") {\n                    return rowData.contactNumber\n                  }\n                }\n              }, */\n              {\n                coumnWidth: 250,\n                labelName: \"Email\",\n                dataKey: \"email\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"email\") {\n                    return rowData.billing_email\n                  }\n                }\n              },\n              {\n                coumnWidth: 250,\n                labelName: \"Location\",\n                dataKey: \"location\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"location\") {\n                    return rowData.extra_information.state_details.name + \" - \" + rowData.extra_information.city_details.name\n                  }\n                }\n              },\n              /* {\n                coumnWidth: 250,\n                labelName: \"\",\n                dataKey: \"options\",\n                className: \"options-column\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"options\") {\n                    const menuItem = [\n                      {\n                        title: \"View Details\",\n                        type: \"link\",\n                        linkUrl: `view-details`\n                      },\n                      {\n                        title: \"Raise Service Request\",\n                        type: \"link\",\n                        linkUrl: `view-details`\n                      },\n                      {\n                        title: \"Allocate Vehicle\",\n                        type: \"link\",\n                        linkUrl: `view-details`\n                      },\n                    ];\n                    return (\n                      <ActionDropdown\n                        menuItem={menuItem}\n                      />\n                    )\n                  }\n                }\n              } */\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"OEM list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  userManagementState: state.UserManagementState\n});\nconst mapDispatchToProps = {\n  getAllAccountApi,\n}\n// Customers.propTypes = {\n//   // getPosts: PropTypes.func\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Oem);"]},"metadata":{},"sourceType":"module"}