{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/bikeModel/AddEditBikeModel.js\";\nimport React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { BaseReactComponent, CustomTextControl, FileUploadControl, Form, FormElement, FormValidator } from \"../../utils/form\";\nimport { ComponentHeader } from \"../common\";\nimport ReactDOM from \"react-dom\";\nimport { addUpdateBikeModelApi } from \"./Api\";\nimport { API_URL, MEDIA_URL } from \"../../utils/Constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddEditBikeModel extends BaseReactComponent {\n  constructor(props) {\n    var _editData$vehicleInfo, _editData$vehicleInfo2, _editData$vehicleInfo3, _editData$vehicleInfo4, _editData$vehicleInfo5, _editData$vehicleInfo6, _editData$vehicleInfo7, _editData$vehicleInfo8, _editData$vehicleInfo9, _editData$vehicleInfo10, _editData$vehicleInfo11, _editData$vehicleInfo12;\n\n    super(props);\n\n    this.handleSave = () => {\n      ReactDOM.findDOMNode(this.form).dispatchEvent(new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      }));\n    };\n\n    this.onValidSubmit = () => {\n      const data = new URLSearchParams();\n      data.append(\"model_name\", this.state.modelName);\n      data.append(\"model_company\", this.state.manufacturerName);\n      data.append(\"no_of_batteries\", this.state.noOfBatteries);\n      data.append(\"tax_percentage\", this.state.tax);\n      data.append(\"tax_code\", this.state.taxCode);\n      data.append(\"cancellation_tax_percentage\", this.state.cancellationTaxPercentage);\n      data.append(\"cancellation_tax_code\", this.state.cancellationTaxCode);\n      data.append(\"damages_tax_percentage\", this.state.damageTaxPercentage);\n      data.append(\"damages_tax_code\", this.state.damageTaxCode);\n      data.append(\"optimal_speed\", JSON.stringify({\n        min: parseFloat(this.state.minSpeed),\n        max: parseFloat(this.state.maxSpeed)\n      }));\n      data.append(\"vehicle_range\", JSON.stringify({\n        min: parseFloat(this.state.minRange),\n        max: parseFloat(this.state.maxRange)\n      }));\n      data.append(\"optimal_acceleration\", JSON.stringify({\n        min: parseFloat(this.state.minAcceleration),\n        max: parseFloat(this.state.maxAcceleration)\n      }));\n      data.append(\"continuous_power\", JSON.stringify({\n        min: parseFloat(this.state.minPower),\n        max: parseFloat(this.state.maxPower)\n      }));\n      data.append(\"torque\", JSON.stringify({\n        min: parseFloat(this.state.minTorque),\n        max: parseFloat(this.state.maxTorque)\n      }));\n      data.append(\"charging_time\", JSON.stringify({\n        min: parseFloat(this.state.minCharging),\n        max: parseFloat(this.state.maxCharging)\n      }));\n      data.append(\"images\", JSON.stringify([this.state.vehicleImage.imageId]));\n\n      if (this.state.editId) {\n        data.append(\"model_id\", this.state.editId);\n      }\n\n      addUpdateBikeModelApi(data, () => {\n        this.props.history.push(\"/master/bike-models\");\n      });\n    };\n\n    const editData = props.location.state ? props.location.state.editData : {};\n    console.log('editData', editData);\n    this.state = {\n      editId: editData.id || \"\",\n      modelName: editData.modelName || \"\",\n      manufacturerName: editData.modelCompany || \"\",\n      noOfBatteries: editData.noOfBatteries || \"\",\n      tax: editData.taxPercentage || \"\",\n      taxCode: editData.taxCode || \"\",\n      cancellationTaxCode: editData && editData.cancellationTaxCode || \"\",\n      cancellationTaxPercentage: editData && editData.cancellationTaxPercentage || \"\",\n      damageTaxCode: editData && editData.damageTaxCode || \"\",\n      damageTaxPercentage: editData && editData.damageTaxPercentage || \"\",\n      minSpeed: editData.vehicleInformation && ((_editData$vehicleInfo = editData.vehicleInformation.optimalSpeed) === null || _editData$vehicleInfo === void 0 ? void 0 : _editData$vehicleInfo.min) || \"\",\n      maxSpeed: editData.vehicleInformation && ((_editData$vehicleInfo2 = editData.vehicleInformation.optimalSpeed) === null || _editData$vehicleInfo2 === void 0 ? void 0 : _editData$vehicleInfo2.max) || \"\",\n      minRange: editData.vehicleInformation && ((_editData$vehicleInfo3 = editData.vehicleInformation.vehicleRange) === null || _editData$vehicleInfo3 === void 0 ? void 0 : _editData$vehicleInfo3.min) || \"\",\n      maxRange: editData.vehicleInformation && ((_editData$vehicleInfo4 = editData.vehicleInformation.vehicleRange) === null || _editData$vehicleInfo4 === void 0 ? void 0 : _editData$vehicleInfo4.max) || \"\",\n      minAcceleration: editData.vehicleInformation && ((_editData$vehicleInfo5 = editData.vehicleInformation.optimalAcceleration) === null || _editData$vehicleInfo5 === void 0 ? void 0 : _editData$vehicleInfo5.min) || \"\",\n      maxAcceleration: editData.vehicleInformation && ((_editData$vehicleInfo6 = editData.vehicleInformation.optimalAcceleration) === null || _editData$vehicleInfo6 === void 0 ? void 0 : _editData$vehicleInfo6.max) || \"\",\n      minPower: editData.vehicleInformation && ((_editData$vehicleInfo7 = editData.vehicleInformation.continuousPower) === null || _editData$vehicleInfo7 === void 0 ? void 0 : _editData$vehicleInfo7.min) || \"\",\n      maxPower: editData.vehicleInformation && ((_editData$vehicleInfo8 = editData.vehicleInformation.continuousPower) === null || _editData$vehicleInfo8 === void 0 ? void 0 : _editData$vehicleInfo8.max) || \"\",\n      minTorque: editData.vehicleInformation && ((_editData$vehicleInfo9 = editData.vehicleInformation.torque) === null || _editData$vehicleInfo9 === void 0 ? void 0 : _editData$vehicleInfo9.min) || \"\",\n      maxTorque: editData.vehicleInformation && ((_editData$vehicleInfo10 = editData.vehicleInformation.torque) === null || _editData$vehicleInfo10 === void 0 ? void 0 : _editData$vehicleInfo10.max) || \"\",\n      minCharging: editData.vehicleInformation && ((_editData$vehicleInfo11 = editData.vehicleInformation.chargingTime) === null || _editData$vehicleInfo11 === void 0 ? void 0 : _editData$vehicleInfo11.min) || \"\",\n      maxCharging: editData.vehicleInformation && ((_editData$vehicleInfo12 = editData.vehicleInformation.chargingTime) === null || _editData$vehicleInfo12 === void 0 ? void 0 : _editData$vehicleInfo12.max) || \"\",\n      vehicleImage: editData && editData.images ? {\n        imageId: editData.images[0].id,\n        name: editData.images[0].name,\n        path: MEDIA_URL + editData.images[0].path\n      } : \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        backArrowBtn: true,\n        history: this.props.history,\n        title: `${this.state.editId ? \"Edit\" : \"Add\"} Bike Model`,\n        secondaryBtnText: \"Cancel\",\n        isSecondaryBtn: () => this.props.history.goBack(),\n        isPrimaryBtn: this.handleSave,\n        primaryBtnText: \"Save Bike Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-edit-customer-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onValidSubmit: this.onValidSubmit,\n            ref: el => this.form = el,\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"modelName\"),\n                  label: \"Model Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Model name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Model Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"manufacturerName\"),\n                  label: \"Manufacturer Name\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Manufacturer name cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Manufacturer Name\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"noOfBatteries\"),\n                  label: \"No of Batteries\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Count cannot be empty\"\n                  }, {\n                    validate: FormValidator.isNum,\n                    message: \"Please enter a valid number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter no. of batteries\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"cancellationTaxPercentage\"),\n                  label: \"Cancellation Tax Percentage\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Cancellation tax percentage cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Cancellation Tax Percentage\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"cancellationTaxCode\"),\n                  label: \"Cancellation Tax Code\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Cancellation tax code cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Cancellation Tax Code\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"damageTaxPercentage\"),\n                  label: \"Damage Tax Percentage\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Damage tax percentage cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Damage Tax Percentage\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"damageTaxCode\"),\n                  label: \"Damage Tax Code\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Damage tax code cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Please enter a valid x number\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Damage Tax Code\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"tax\"),\n                  label: \"Tax (in percentage)\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Tax cannot be empty\"\n                  }, {\n                    validate: FormValidator.isPositiveInt,\n                    message: \"Tax cannot be negative\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Value\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, \"taxCode\"),\n                  label: \"Tax Code (Hsn Code)\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"Tax Code cannot be empty\"\n                  }],\n                  control: {\n                    type: CustomTextControl,\n                    settings: {\n                      placeholder: \"Enter Tax Code\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minSpeed\"),\n                    label: \"Optimal Speed\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum speed cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Speed\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxSpeed\"),\n                    label: \"\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Maximum speed cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Speed\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minRange\"),\n                    label: \"Vehicle Range\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum range cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Range\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxRange\"),\n                    label: \"\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Maximum range cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Range\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 389,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minCharging\"),\n                    label: \"Vehicle Charging\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Minimum charging cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Charging\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxCharging\"),\n                    label: \"\",\n                    required: true,\n                    validations: [{\n                      validate: FormValidator.isRequired,\n                      message: \"Maximum charging cannot be empty\"\n                    }, {\n                      validate: FormValidator.isNum,\n                      message: \"Please enter numeric value\"\n                    }, {\n                      validate: FormValidator.isInt,\n                      message: \"Please enter numeric value\"\n                    }],\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Charging\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minAcceleration\"),\n                    label: \"Optimal Acceleration\",\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Acceleration\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 472,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxAcceleration\"),\n                    label: \"\",\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Acceleration\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 471,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minPower\"),\n                    label: \"Continuous Power\",\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Power\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 496,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxPower\"),\n                    label: \"\",\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Power\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 506,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"min-max-element\",\n                  children: [/*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"minTorque\"),\n                    label: \"Torque\",\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Minimum Torque\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 520,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormElement, {\n                    valueLink: this.linkState(this, \"maxTorque\"),\n                    label: \"\",\n                    control: {\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Maximum Torque\"\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 530,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 519,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(FormElement, {\n                  valueLink: this.linkState(this, 'vehicleImage'),\n                  label: \"Upload file\",\n                  required: true,\n                  validations: [{\n                    validate: FormValidator.isRequired,\n                    message: \"File is required\"\n                  }],\n                  control: {\n                    type: FileUploadControl,\n                    settings: {\n                      moduleName: \"offering\",\n                      subModule: \"vehicle\",\n                      fileType: \"IMAGE\",\n                      extensions: [\"image/*\"],\n                      maxFiles: 1,\n                      maxFileSize: 100000000,\n                      onSelect: (file, callback) => {\n                        // You will need to generate signedURL by calling API and then call callback\n                        const fileInfo = {\n                          id: file.lastModified,\n                          name: file.name,\n                          size: file.size,\n                          mimeType: file.type,\n                          path: \"single.jpg\"\n                        };\n                        callback(fileInfo, API_URL);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 545,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({ ...state\n});\n\nconst mapDispatchToProps = {// getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBikeModel);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/bikeModel/AddEditBikeModel.js"],"names":["React","Col","Row","connect","BaseReactComponent","CustomTextControl","FileUploadControl","Form","FormElement","FormValidator","ComponentHeader","ReactDOM","addUpdateBikeModelApi","API_URL","MEDIA_URL","AddEditBikeModel","constructor","props","handleSave","findDOMNode","form","dispatchEvent","Event","cancelable","bubbles","onValidSubmit","data","URLSearchParams","append","state","modelName","manufacturerName","noOfBatteries","tax","taxCode","cancellationTaxPercentage","cancellationTaxCode","damageTaxPercentage","damageTaxCode","JSON","stringify","min","parseFloat","minSpeed","max","maxSpeed","minRange","maxRange","minAcceleration","maxAcceleration","minPower","maxPower","minTorque","maxTorque","minCharging","maxCharging","vehicleImage","imageId","editId","history","push","editData","location","console","log","id","modelCompany","taxPercentage","vehicleInformation","optimalSpeed","vehicleRange","optimalAcceleration","continuousPower","torque","chargingTime","images","name","path","componentDidMount","render","goBack","el","linkState","validate","isRequired","message","type","settings","placeholder","isNum","isPositiveInt","isInt","moduleName","subModule","fileType","extensions","maxFiles","maxFileSize","onSelect","file","callback","fileInfo","lastModified","size","mimeType","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  BaseReactComponent,\n  CustomTextControl,\n  FileUploadControl,\n  Form,\n  FormElement,\n  FormValidator,\n} from \"../../utils/form\";\nimport { ComponentHeader } from \"../common\";\nimport ReactDOM from \"react-dom\";\nimport { addUpdateBikeModelApi } from \"./Api\";\nimport { API_URL, MEDIA_URL } from \"../../utils/Constant\";\n\nclass AddEditBikeModel extends BaseReactComponent {\n  constructor(props) {\n    super(props);\n    const editData = props.location.state ? props.location.state.editData : {};\n    console.log('editData',editData);\n    this.state = {\n      editId: editData.id || \"\",\n      modelName: editData.modelName || \"\",\n      manufacturerName: editData.modelCompany || \"\",\n      noOfBatteries: editData.noOfBatteries || \"\",\n      tax: editData.taxPercentage || \"\",\n      taxCode: editData.taxCode || \"\",\n\n      cancellationTaxCode: editData && editData.cancellationTaxCode || \"\",\n      cancellationTaxPercentage: editData && editData.cancellationTaxPercentage || \"\",\n      damageTaxCode: editData && editData.damageTaxCode || \"\",\n      damageTaxPercentage: editData && editData.damageTaxPercentage || \"\",\n\n      minSpeed: editData.vehicleInformation && editData.vehicleInformation.optimalSpeed?.min || \"\",\n      maxSpeed: editData.vehicleInformation && editData.vehicleInformation.optimalSpeed?.max || \"\",\n      minRange: editData.vehicleInformation && editData.vehicleInformation.vehicleRange?.min || \"\",\n      maxRange: editData.vehicleInformation && editData.vehicleInformation.vehicleRange?.max || \"\",\n      minAcceleration: editData.vehicleInformation && editData.vehicleInformation.optimalAcceleration?.min || \"\",\n      maxAcceleration: editData.vehicleInformation && editData.vehicleInformation.optimalAcceleration?.max || \"\",\n      minPower: editData.vehicleInformation && editData.vehicleInformation.continuousPower?.min || \"\",\n      maxPower: editData.vehicleInformation && editData.vehicleInformation.continuousPower?.max || \"\",\n      minTorque: editData.vehicleInformation && editData.vehicleInformation.torque?.min || \"\",\n      maxTorque: editData.vehicleInformation && editData.vehicleInformation.torque?.max || \"\",\n      minCharging: editData.vehicleInformation && editData.vehicleInformation.chargingTime?.min || \"\",\n      maxCharging: editData.vehicleInformation && editData.vehicleInformation.chargingTime?.max || \"\",\n      vehicleImage: editData && editData.images ? {\n        imageId: editData.images[0].id,\n        name: editData.images[0].name,\n        path: MEDIA_URL + editData.images[0].path,\n      } : \"\",\n    };\n  }\n  componentDidMount() { }\n  handleSave = () => {\n    ReactDOM.findDOMNode(this.form).dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    );\n  };\n\n  onValidSubmit = () => {\n    const data = new URLSearchParams();\n    data.append(\"model_name\", this.state.modelName);\n    data.append(\"model_company\", this.state.manufacturerName);\n    data.append(\"no_of_batteries\", this.state.noOfBatteries);\n    data.append(\"tax_percentage\", this.state.tax);\n    data.append(\"tax_code\", this.state.taxCode);\n\n    data.append(\"cancellation_tax_percentage\", this.state.cancellationTaxPercentage);\n    data.append(\"cancellation_tax_code\", this.state.cancellationTaxCode);\n    data.append(\"damages_tax_percentage\", this.state.damageTaxPercentage);\n    data.append(\"damages_tax_code\", this.state.damageTaxCode);\n\n    data.append(\"optimal_speed\", JSON.stringify({min: parseFloat(this.state.minSpeed), max: parseFloat(this.state.maxSpeed)}));\n    data.append(\"vehicle_range\", JSON.stringify({min: parseFloat(this.state.minRange), max: parseFloat(this.state.maxRange)}));\n    data.append(\"optimal_acceleration\", JSON.stringify({min: parseFloat(this.state.minAcceleration), max: parseFloat(this.state.maxAcceleration)}));\n    data.append(\"continuous_power\", JSON.stringify({min: parseFloat(this.state.minPower), max: parseFloat(this.state.maxPower)}));\n    data.append(\"torque\", JSON.stringify({min: parseFloat(this.state.minTorque), max: parseFloat(this.state.maxTorque)}));\n    data.append(\"charging_time\", JSON.stringify({min: parseFloat(this.state.minCharging), max: parseFloat(this.state.maxCharging)}));\n    data.append(\"images\", JSON.stringify([this.state.vehicleImage.imageId]));\n\n    if (this.state.editId) {\n      data.append(\"model_id\", this.state.editId);\n    }\n    addUpdateBikeModelApi(data, () => {\n      this.props.history.push(\"/master/bike-models\");\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <ComponentHeader\n          backArrowBtn={true}\n          history={this.props.history}\n          title={`${this.state.editId ? \"Edit\" : \"Add\"} Bike Model`}\n          secondaryBtnText={\"Cancel\"}\n          isSecondaryBtn={() => this.props.history.goBack()}\n          isPrimaryBtn={this.handleSave}\n          primaryBtnText={\"Save Bike Model\"}\n        />\n        <div className=\"add-edit-customer-wrapper\">\n          {/* <Container> */}\n          <div className=\"content\">\n            <Form\n              onValidSubmit={this.onValidSubmit}\n              ref={(el) => (this.form = el)}\n            >\n              <Row>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"modelName\")}\n                    label=\"Model Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Model name cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Model Name\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"manufacturerName\")}\n                    label=\"Manufacturer Name\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Manufacturer name cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Manufacturer Name\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={4}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"noOfBatteries\")}\n                    label=\"No of Batteries\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Count cannot be empty\",\n                      },\n                      {\n                        validate: FormValidator.isNum,\n                        message: \"Please enter a valid number\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter no. of batteries\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={3}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"cancellationTaxPercentage\")}\n                    label=\"Cancellation Tax Percentage\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Cancellation tax percentage cannot be empty\",\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Cancellation Tax Percentage\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={3}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"cancellationTaxCode\")}\n                    label=\"Cancellation Tax Code\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Cancellation tax code cannot be empty\",\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Cancellation Tax Code\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={3}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"damageTaxPercentage\")}\n                    label=\"Damage Tax Percentage\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Damage tax percentage cannot be empty\",\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Damage Tax Percentage\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={3}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"damageTaxCode\")}\n                    label=\"Damage Tax Code\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Damage tax code cannot be empty\",\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Please enter a valid x number\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Damage Tax Code\",\n                      },\n                    }}\n                  />\n                </Col>\n\n                <Col md={3}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"tax\")}\n                    label=\"Tax (in percentage)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Tax cannot be empty\"\n                      },\n                      {\n                        validate: FormValidator.isPositiveInt,\n                        message: \"Tax cannot be negative\"\n                      }\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Value\",\n                      }\n                    }}\n                  />\n                </Col>\n                <Col md={3}>\n                  <FormElement\n                    valueLink={this.linkState(this, \"taxCode\")}\n                    label=\"Tax Code (Hsn Code)\"\n                    required\n                    validations={[\n                      {\n                        validate: FormValidator.isRequired,\n                        message: \"Tax Code cannot be empty\",\n                      },\n                    ]}\n                    control={{\n                      type: CustomTextControl,\n                      settings: {\n                        placeholder: \"Enter Tax Code\",\n                      },\n                    }}\n                  />\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minSpeed\")}\n                      label=\"Optimal Speed\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Minimum speed cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Speed\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxSpeed\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Maximum speed cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Speed\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n              </Row>\n              <Row>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minRange\")}\n                      label=\"Vehicle Range\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Minimum range cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Range\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxRange\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Maximum range cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Range\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minCharging\")}\n                      label=\"Vehicle Charging\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Minimum charging cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Charging\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxCharging\")}\n                      label=\"\"\n                      required\n                      validations={[\n                        {\n                          validate: FormValidator.isRequired,\n                          message: \"Maximum charging cannot be empty\"\n                        },\n                        {\n                          validate: FormValidator.isNum,\n                          message: \"Please enter numeric value\"\n                        },\n                        {\n                          validate: FormValidator.isInt,\n                          message: \"Please enter numeric value\"\n                        }\n                      ]}\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Charging\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minAcceleration\")}\n                      label=\"Optimal Acceleration\"\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Acceleration\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxAcceleration\")}\n                      label=\"\"\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Acceleration\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minPower\")}\n                      label=\"Continuous Power\"\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Power\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxPower\")}\n                      label=\"\"\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Power\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n                <Col md={6}>\n                  <div className='min-max-element'>\n                    <FormElement\n                      valueLink={this.linkState(this, \"minTorque\")}\n                      label=\"Torque\"\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Minimum Torque\",\n                        }\n                      }}\n                    />\n                    <FormElement\n                      valueLink={this.linkState(this, \"maxTorque\")}\n                      label=\"\"\n                      control={{\n                        type: CustomTextControl,\n                        settings: {\n                          placeholder: \"Enter Maximum Torque\",\n                        }\n                      }}\n                    />\n                  </div>\n                </Col>\n              {/* </Row>\n              <Row> */}\n                <Col md={6}>\n                <FormElement\n                        valueLink={this.linkState(this, 'vehicleImage')}\n                        label=\"Upload file\"\n                        required\n                        validations={[\n                          {\n                            validate: FormValidator.isRequired,\n                            message: \"File is required\",\n                          },\n                        ]}\n                        control={{\n                          type: FileUploadControl,\n                          settings: {\n                            moduleName: \"offering\",\n                            subModule: \"vehicle\",\n                            fileType: \"IMAGE\",\n                            extensions: [\"image/*\"],\n                            maxFiles: 1,\n                            maxFileSize: 100000000,\n                            onSelect: (file, callback) => {\n                              // You will need to generate signedURL by calling API and then call callback\n                              const fileInfo = {\n                                id: file.lastModified,\n                                name: file.name,\n                                size: file.size,\n                                mimeType: file.type,\n                                path: \"single.jpg\",\n                              };\n                              callback(fileInfo,API_URL);\n                            },\n                          },\n                        }}\n                      />\n                </Col>\n              </Row>\n            </Form>\n          </div>\n          {/* </Container> */}\n        </div>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  ...state,\n});\nconst mapDispatchToProps = {\n  // getPosts: fetchPosts\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEditBikeModel);\n"]},"metadata":{},"sourceType":"module"}