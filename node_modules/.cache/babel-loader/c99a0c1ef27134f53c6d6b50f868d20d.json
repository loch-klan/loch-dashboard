{"ast":null,"code":"var _jsxFileName = \"/opt/projects/loch-dashboard/src/app/locationMaster/Country.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { LocationType, START_PAGE } from '../../utils/Constant';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi, updateLocationApi } from '../common/Api';\nimport Switch from '../common/_utils/Switch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Country extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleToggle = rowData => {\n      const {\n        id,\n        is_operational,\n        code,\n        name,\n        type\n      } = rowData;\n      let data = new URLSearchParams();\n      data.append(\"location_id\", id);\n      data.append(\"location_type\", type);\n      data.append(\"name\", name);\n      data.append(\"code\", code);\n      data.append(\"is_operational\", !is_operational);\n      this.props.updateLocationApi(data, this);\n    };\n\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      countryList: [],\n      // showFilter: false,\n      conditions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.COUNTRY);\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {// this.props.getAllIotApi(this);\n      } else {// this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  // handleAddCountry = (rowData = \"\") => {\n  //   if (rowData) {\n  //     this.props.history.push({\n  //       pathname: `/location-master/country/edit-country/${rowData.id}`,\n  //       state: { data: rowData }\n  //     });\n  //   } else {\n  //     this.props.history.push(\"/location-master/country/add-country\");\n  //   }\n  // }\n  // onChangeMethod = (value) => {\n  //   this.setState({\n  //     searchValue: value,\n  //     conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n  //   });\n  //   replaceHistory(this.props.history, START_PAGE, value.search)\n  //   // this.props.getAllIotApi(this, START_PAGE);\n  // }\n  // clearSearch = (currentPage) => {\n  //   this.setState({ searchValue: \"\", conditions: [] });\n  //   if (currentPage === START_PAGE) {\n  //     // this.props.getAllIotApi(this, START_PAGE);\n  //   }\n  //   replaceHistory(this.props.history, START_PAGE)\n  // }\n  render() {\n    const {\n      page,\n      totalPage,\n      countryList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n        breadcrumb: true,\n        currentPage: \"Country\",\n        title: \"Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CustomTable, {\n          tableData: countryList,\n          columnList: [{\n            coumnWidth: 200,\n            labelName: \"Country Name\",\n            dataKey: \"name\",\n            className: \"\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"name\") {\n                return rowData.name;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Code\",\n            dataKey: \"code\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"code\") {\n                return rowData.code;\n              }\n            }\n          }, {\n            coumnWidth: 350,\n            labelName: \"Operation Status\",\n            dataKey: \"is_operational\",\n            className: \"red-hat-display-bold\",\n            isCell: true,\n            cell: (rowData, dataKey) => {\n              if (dataKey === \"is_operational\") {\n                return /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: rowData.is_operational,\n                  handleClick: () => this.handleToggle(rowData)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          } // {\n          //   coumnWidth: 50,\n          //   labelName: \"\",\n          //   dataKey: \"options\",\n          //   className: \"\",\n          //   isCell: true,\n          //   cell: (rowData, dataKey) => {\n          //     if (dataKey === \"options\") {\n          //       const menuItem = [];\n          //       menuItem.push({\n          //         title: \"Edit\",\n          //         type: \"event\",\n          //         handleClick: () => this.handleAddCountry(rowData),\n          //       })\n          //       menuItem.push({\n          //         title: \"View Details\",\n          //         type: \"\",\n          //         linkUrl: `location-master/country/${rowData.id}`,\n          //       })\n          //       if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY)) {\n          //         return (\n          //           <ActionDropdown\n          //             menuItem={menuItem}\n          //           />\n          //         )\n          //       }\n          //     }\n          //   }\n          // }\n          ] // For Pagination\n          ,\n          history: this.props.history,\n          location: this.props.location,\n          totalPages: totalPage,\n          currentPage: page,\n          message: \"Country list is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  locationMasterState: state.LocationMasterState\n});\n\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  updateLocationApi\n};\nCountry.propTypes = {// getPosts: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Country);","map":{"version":3,"sources":["/opt/projects/loch-dashboard/src/app/locationMaster/Country.js"],"names":["React","Component","connect","CustomTable","LocationType","START_PAGE","ComponentHeader","getAllLocationApi","updateLocationApi","Switch","Country","constructor","props","handleToggle","rowData","id","is_operational","code","name","type","data","URLSearchParams","append","search","location","params","page","get","state","parseInt","countryList","conditions","componentDidMount","COUNTRY","history","replace","componentDidUpdate","prevProps","prevState","prevParams","prevPage","render","totalPage","coumnWidth","labelName","dataKey","className","isCell","cell","mapStateToProps","locationMasterState","LocationMasterState","mapDispatchToProps","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomTable from '../../utils/commonComponent/CustomTable';\nimport { LocationType, START_PAGE } from '../../utils/Constant';\nimport { ComponentHeader } from '../common';\nimport { getAllLocationApi, updateLocationApi } from '../common/Api';\nimport Switch from '../common/_utils/Switch';\n\nclass Country extends Component {\n  constructor(props) {\n    super(props);\n    const search = props.location.search;\n    const params = new URLSearchParams(search);\n    const page = params.get(\"p\");\n    this.state = {\n      page: page ? parseInt(page, 10) : START_PAGE + 1,\n      countryList: [],\n      // showFilter: false,\n      conditions: []\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAllLocationApi(this, LocationType.COUNTRY);\n\n    this.props.history.replace({\n      search: `?p=${this.state.page}`\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = new URLSearchParams(prevProps.location.search);\n    const prevPage = parseInt(prevParams.get('p'), 10) || 1;\n\n    const params = new URLSearchParams(this.props.location.search);\n    const page = parseInt(params.get('p'), 10) || 1;\n    const search = params.get('search') || \"\";\n\n    if (prevPage !== page) {\n      if (search) {\n        // this.props.getAllIotApi(this);\n      } else {\n        // this.props.getAllIotApi(this, page - 1);\n      }\n    }\n  }\n\n  handleToggle = (rowData) => {\n    const { id, is_operational, code, name, type } = rowData;\n    let data = new URLSearchParams();\n    data.append(\"location_id\", id);\n    data.append(\"location_type\", type);\n    data.append(\"name\", name);\n    data.append(\"code\", code);\n    data.append(\"is_operational\", !is_operational);\n    this.props.updateLocationApi(data, this);\n  };\n\n  // handleAddCountry = (rowData = \"\") => {\n  //   if (rowData) {\n  //     this.props.history.push({\n  //       pathname: `/location-master/country/edit-country/${rowData.id}`,\n  //       state: { data: rowData }\n  //     });\n  //   } else {\n  //     this.props.history.push(\"/location-master/country/add-country\");\n  //   }\n  // }\n\n  // onChangeMethod = (value) => {\n  //   this.setState({\n  //     searchValue: value,\n  //     conditions: [{ key: \"SEARCH_BY_TEXT\", value: value.search }]\n  //   });\n  //   replaceHistory(this.props.history, START_PAGE, value.search)\n  //   // this.props.getAllIotApi(this, START_PAGE);\n  // }\n\n  // clearSearch = (currentPage) => {\n  //   this.setState({ searchValue: \"\", conditions: [] });\n  //   if (currentPage === START_PAGE) {\n  //     // this.props.getAllIotApi(this, START_PAGE);\n  //   }\n  //   replaceHistory(this.props.history, START_PAGE)\n  // }\n  render() {\n    const { page, totalPage, countryList } = this.state;\n    return (\n      <>\n        <ComponentHeader\n          breadcrumb={true}\n          currentPage={\"Country\"}\n          title={\"Country\"}\n        />\n        <div className='custom-table-wrapper'>\n          <CustomTable\n            tableData={countryList}\n            columnList={[\n              {\n                coumnWidth: 200,\n                labelName: \"Country Name\",\n                dataKey: \"name\",\n                className: \"\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"name\") {\n                    return rowData.name\n                  }\n                }\n              },\n\n              {\n                coumnWidth: 350,\n                labelName: \"Code\",\n                dataKey: \"code\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"code\") {\n                    return rowData.code\n                  }\n                }\n              },\n              {\n                coumnWidth: 350,\n                labelName: \"Operation Status\",\n                dataKey: \"is_operational\",\n                className: \"red-hat-display-bold\",\n                isCell: true,\n                cell: (rowData, dataKey) => {\n                  if (dataKey === \"is_operational\") {\n                    return (\n                      <Switch\n                        checked={rowData.is_operational}\n                        handleClick={() => this.handleToggle(rowData)}\n                      />\n                    )\n                  }\n                }\n              },\n              // {\n              //   coumnWidth: 50,\n              //   labelName: \"\",\n              //   dataKey: \"options\",\n              //   className: \"\",\n              //   isCell: true,\n              //   cell: (rowData, dataKey) => {\n              //     if (dataKey === \"options\") {\n              //       const menuItem = [];\n              //       menuItem.push({\n              //         title: \"Edit\",\n              //         type: \"event\",\n              //         handleClick: () => this.handleAddCountry(rowData),\n              //       })\n              //       menuItem.push({\n              //         title: \"View Details\",\n              //         type: \"\",\n              //         linkUrl: `location-master/country/${rowData.id}`,\n              //       })\n              //       if (permissionList.includes(PermissionList.ADD_UPDATE_TELEMATICS_INVENTORY)) {\n              //         return (\n              //           <ActionDropdown\n              //             menuItem={menuItem}\n              //           />\n              //         )\n              //       }\n              //     }\n              //   }\n              // }\n            ]}\n            // For Pagination\n            history={this.props.history}\n            location={this.props.location}\n            totalPages={totalPage}\n            currentPage={page}\n            message={\"Country list is empty\"}\n          />\n        </div>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  locationMasterState: state.LocationMasterState\n});\nconst mapDispatchToProps = {\n  getAllLocationApi,\n  updateLocationApi\n}\nCountry.propTypes = {\n  // getPosts: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Country);"]},"metadata":{},"sourceType":"module"}